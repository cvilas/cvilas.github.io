<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>POSIX Utilities Package 2.2: UDPServer Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>UDPServer Class Reference</h1><!-- doxytag: class="UDPServer" -->This is the server part of the UDPServer/UDPClient pair.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="UDPClientServer_8hpp-source.htm">UDPClientServer.hpp</a>&gt;</code>
<p>
<a href="classUDPServer-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPServer.htm#5f9126e71c6938ff1d0794ebcb579a8e">UDPServer</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPServer.htm#f5792fb3d294981c027adc80f05ddd43">UDPServer</a> (int port, int maxMsgSize, int bdp=0)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPServer.htm#8a273698d4803bd48c01c958ab861b9c">~UDPServer</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPServer.htm#a3bbb6950bb5b54df64b32b6e3014c9d">init</a> (int port, int maxMsgSize, int bdp=0)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPServer.htm#8321b0cf1ca5c03af0d063b2e4e454b5">doMessageCycle</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPServer.htm#14ee63fe1ea19dac4bc4b1895cb173fb">getStatusCode</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPServer.htm#d45136ec7848f6a6f0b83b0dfe72f269">getStatusMessage</a> () const </td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPServer.htm#36b046f001df923023a0c5ae5fae76bb">receiveAndReply</a> (const char *inMsgBuf, int inMsgLen, int *outMsgLen)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
This is the server part of the UDPServer/UDPClient pair. 
<p>
UDPServer/UDPClient uses the User Datagram Protocol (UDP, IETF RFC768) for fast, 'unreliable' data transfer between two devices over the ethernet. The protocol is unreliable because there is no guarantee that data packets will reach their destination, or that they will reach the destination in the right sequence. UDP prioritizes speed over reliability. Use (the much slower) TCPServer/TCPClient if reliability and data integrity is more important in your application.<p>
<b>Example Program:</b> <div class="fragment"><pre class="fragment"><span class="comment">//==============================================================================</span>
<span class="comment">// UDPClientServer.t.cpp - Example program for UDPClient/UDPServer</span>
<span class="comment">//</span>
<span class="comment">// Author        : Vilas Kumar Chitrakaran</span>
<span class="comment">//==============================================================================</span>

<span class="preprocessor">#include "UDPClientServer.hpp"</span>
<span class="preprocessor">#include &lt;iostream&gt;</span>
<span class="preprocessor">#include &lt;string&gt;</span>
<span class="preprocessor">#include &lt;pthread.h&gt;</span>

<span class="keyword">using namespace </span>std;

<span class="comment">//==============================================================================</span>
<span class="comment">// class MyServer</span>
<span class="comment">//==============================================================================</span>
<span class="keyword">class </span>MyServer : <span class="keyword">public</span> <a class="code" href="classUDPServer.htm">UDPServer</a>
{
 <span class="keyword">public</span>:
  MyServer(<span class="keywordtype">int</span> port, <span class="keywordtype">int</span> maxLen, <span class="keywordtype">int</span> bdp) : <a class="code" href="classUDPServer.htm">UDPServer</a>(port, maxLen, bdp){};
  ~MyServer() {};
 <span class="keyword">protected</span>:
  <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classUDPServer.htm#36b046f001df923023a0c5ae5fae76bb">receiveAndReply</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *inMsgBuf, <span class="keywordtype">int</span> inMsgLen, <span class="keywordtype">int</span> *outMsgLen); 
 <span class="keyword">private</span>:
  <span class="keywordtype">char</span> d_outMsgBuf[80];
};


<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classUDPServer.htm#36b046f001df923023a0c5ae5fae76bb">MyServer::receiveAndReply</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *inMsgBuf, <span class="keywordtype">int</span> inMsgLen, <span class="keywordtype">int</span> *outMsgLen)
{
 cout &lt;&lt; <span class="stringliteral">"MyServer: client said: "</span>;
 <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; inMsgLen; i++) cout &lt;&lt; inMsgBuf[i];
 cout &lt;&lt; endl;
 snprintf(d_outMsgBuf, 80, <span class="stringliteral">"%s"</span>, <span class="stringliteral">"Hi there client!!"</span>);
 *outMsgLen = strlen(d_outMsgBuf);
 <span class="keywordflow">return</span> d_outMsgBuf;
}

<span class="comment">//==============================================================================</span>
<span class="comment">// server</span>
<span class="comment">// - handles messages from clients</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">void</span> *server(<span class="keywordtype">void</span> *arg)
{
 arg=arg;
 MyServer server(3000, 80, 625);

 <span class="comment">// check for errors</span>
 <span class="keywordflow">if</span>(server.getStatusCode())
  cout &lt;&lt; <span class="stringliteral">"server: "</span> &lt;&lt; server.getStatusMessage() &lt;&lt; endl;

 <span class="comment">// serve clients</span>
 server.doMessageCycle();
 
 <span class="comment">// check for error</span>
 <span class="keywordflow">if</span>(server.getStatusCode())
  cout &lt;&lt; <span class="stringliteral">"server: "</span> &lt;&lt; server.getStatusMessage() &lt;&lt; endl;
 
 <span class="keywordflow">return</span> NULL;
}


<span class="comment">//==============================================================================</span>
<span class="comment">// client</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">int</span> client()
{
 <span class="keywordtype">char</span> outMsgBuf[80];
 <span class="keywordtype">char</span> inMsgBuf[80];
 <span class="keywordtype">int</span> outMsgLen = 0;
 <span class="keywordtype">int</span> inMsgLen;
 
 <span class="keyword">struct </span>timeval timeout;
 timeout.tv_sec = 0;
 timeout.tv_usec = 50000; <span class="comment">// 50 ms</span>

 <span class="comment">// initialize a client and connect to server</span>
 <a class="code" href="classUDPClient.htm">UDPClient</a> client(<span class="stringliteral">"127.0.0.1"</span>, 3000, timeout, 625);
 <span class="keywordflow">if</span>(client.getStatusCode())
 {
  cout &lt;&lt; <span class="stringliteral">"client: "</span> &lt;&lt; client.getStatusMessage() &lt;&lt; endl;
  <span class="keywordflow">return</span> -1;
 }
 
 <span class="keywordtype">int</span> msgNum = 0;
 <span class="keywordflow">while</span>(1)
 {
  <span class="keywordflow">if</span>(msgNum &gt; 100)
   <span class="keywordflow">break</span>;

  <span class="comment">// a message</span>
  snprintf(outMsgBuf, 80, <span class="stringliteral">"%s %d"</span>, <span class="stringliteral">"Hello server"</span>, msgNum);
  outMsgLen = strlen(outMsgBuf);
  cout &lt;&lt; endl &lt;&lt; <span class="stringliteral">"client  : Sending msg. - "</span> &lt;&lt; outMsgBuf &lt;&lt; endl;
  msgNum++;
   
  <span class="comment">// Send the message and receive reply</span>
  <span class="keywordflow">if</span>( client.sendAndReceive(outMsgBuf, outMsgLen, inMsgBuf, 80, &amp;inMsgLen) == -1)
  {
   cout &lt;&lt; <span class="stringliteral">"client  : "</span> &lt;&lt; client.getStatusMessage() &lt;&lt; endl;
   <span class="keywordflow">break</span>;
  }
 
  <span class="comment">// reply received</span>
  cout &lt;&lt; <span class="stringliteral">"client  : server replied: "</span>;
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i = 0; i &lt; inMsgLen; i++) cout &lt;&lt; inMsgBuf[i];
  cout &lt;&lt; endl;
 }

 <span class="comment">// bye </span>
 <span class="keywordflow">if</span>(client.getStatusCode())
  cout &lt;&lt; <span class="stringliteral">"client  : "</span> &lt;&lt; client.getStatusMessage() &lt;&lt; endl;
 
 <span class="keywordflow">return</span> 0;
}


<span class="comment">//==============================================================================</span>
<span class="comment">// main function</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">int</span> main()
{
 pthread_t threadId;
 pthread_create(&amp;threadId, NULL, &amp;server, NULL);
 sleep(1);
 client();
 <span class="keywordflow">return</span> 0;
}
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="5f9126e71c6938ff1d0794ebcb579a8e"></a><!-- doxytag: member="UDPServer::UDPServer" ref="5f9126e71c6938ff1d0794ebcb579a8e" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">UDPServer::UDPServer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor. Does nothing.     </td>
  </tr>
</table>
<a class="anchor" name="f5792fb3d294981c027adc80f05ddd43"></a><!-- doxytag: member="UDPServer::UDPServer" ref="f5792fb3d294981c027adc80f05ddd43" args="(int port, int maxMsgSize, int bdp=0)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">UDPServer::UDPServer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>port</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>maxMsgSize</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>bdp</em> = <code>0</code></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Initializes the sever. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>port</em>&nbsp;</td><td>The port on which the server will listen for data packets from clients. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>maxMsgSize</em>&nbsp;</td><td>Maximum size (bytes) of the receive buffer. Client messages larger than this size are discarded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bdp</em>&nbsp;</td><td>This is an advanced option. It allows the user to suggest the bandwidth-delay product in kilo bytes so that socket buffers of optimal sizes can be created. Suppose you are going to receive connections from a machine whose round-trip time (delay between sending a packet and receiving acknowledgement) is 50ms, and the link bandwidth is 100 Mbits per sec. Then your BDP is 100e6 * 50e-3 / 8 = 625 kilo bytes. You can use the 'ping' utility to get an approx. measure for the round-trip time. Set this value to 0 to use system defaults. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="8a273698d4803bd48c01c958ab861b9c"></a><!-- doxytag: member="UDPServer::~UDPServer" ref="8a273698d4803bd48c01c958ab861b9c" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">virtual UDPServer::~UDPServer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The destructor frees resources.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="8321b0cf1ca5c03af0d063b2e4e454b5"></a><!-- doxytag: member="UDPServer::doMessageCycle" ref="8321b0cf1ca5c03af0d063b2e4e454b5" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void UDPServer::doMessageCycle           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function never returns, waiting for any data packets in an infinite loop. When a data packet is received, it copies the data into the message buffer and calls the user implemented function <a class="el" href="classUDPServer.htm#36b046f001df923023a0c5ae5fae76bb">receiveAndReply()</a>.     </td>
  </tr>
</table>
<a class="anchor" name="14ee63fe1ea19dac4bc4b1895cb173fb"></a><!-- doxytag: member="UDPServer::getStatusCode" ref="14ee63fe1ea19dac4bc4b1895cb173fb" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int UDPServer::getStatusCode           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>0 on no error, else latest status code. See errno.h for codes. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="d45136ec7848f6a6f0b83b0dfe72f269"></a><!-- doxytag: member="UDPServer::getStatusMessage" ref="d45136ec7848f6a6f0b83b0dfe72f269" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">const char* UDPServer::getStatusMessage           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>Latest error status report </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a3bbb6950bb5b54df64b32b6e3014c9d"></a><!-- doxytag: member="UDPServer::init" ref="a3bbb6950bb5b54df64b32b6e3014c9d" args="(int port, int maxMsgSize, int bdp=0)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int UDPServer::init           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>port</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>maxMsgSize</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>bdp</em> = <code>0</code></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Initialize the server. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>port</em>&nbsp;</td><td>The port number used by the server in listening for clients. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>maxMsgSize</em>&nbsp;</td><td>Maximum size (bytes) of the receive buffer. Client messages larger than this size are discarded. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bdp</em>&nbsp;</td><td>This is an advanced option. It allows the user to suggest the bandwidth-delay product in kilo bytes so that socket buffers of optimal sizes can be created. Suppose you are going to receive connections from a machine whose round-trip time (delay between sending a packet and receiving acknowledgement) is 50ms, and the link bandwidth is 100 Mbits per sec. Then your BDP is 100e6 * 50e-3 / 8 = 625 kilo bytes. You can use the 'ping' utility to get an approx. measure for the round-trip time. Set this value to 0 to use system defaults. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on failure. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="36b046f001df923023a0c5ae5fae76bb"></a><!-- doxytag: member="UDPServer::receiveAndReply" ref="36b046f001df923023a0c5ae5fae76bb" args="(const char *inMsgBuf, int inMsgLen, int *outMsgLen)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">virtual const char* UDPServer::receiveAndReply           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>inMsgBuf</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>inMsgLen</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int *&nbsp;</td>
          <td class="mdname" nowrap> <em>outMsgLen</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [protected, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Re-implement this function in your derived class. This function is called by <a class="el" href="classUDPServer.htm#8321b0cf1ca5c03af0d063b2e4e454b5">doMessageCycle()</a> everytime it receives a data packet from a client. <br>
<hr>
 <ul>
<li>
If return value is set to NULL, the server will not attempt to reply back to the client. </li>
<li>
If the data packet is too long to fit into the receive buffer (whose length is set in the constructor), the excess message from client is discarded. </li>
</ul>
<hr>
<br>
 <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>inMsgBuf</em>&nbsp;</td><td>Pointer to buffer containing message from client. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>inMsgLen</em>&nbsp;</td><td>Length of the message (bytes) in the above buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>outMsgLen</em>&nbsp;</td><td>The length (bytes) of the reply buffer. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>NULL, or a pointer to reply buffer provided by you containing reply message for the client. </dd></dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="UDPClientServer_8hpp-source.htm">UDPClientServer.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>POSIX Utilities Package</b></font></code> on Sat Aug 26 17:12:56 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
