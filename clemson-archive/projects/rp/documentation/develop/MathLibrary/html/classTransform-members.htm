<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>QMath Matrix Library: Member List</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.9.1 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>Transform Member List</h1>This is the complete list of members for <a class="el" href="classTransform.htm">Transform</a>, including all inherited members.<p><table>
  <tr bgcolor="#f0f0f0"><td><b>d_element</b> (defined in <a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a>)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a6">getColumn</a>(int c) const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a8">getElement</a>(int r, int c) const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a3">getElementsPointer</a>() const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classTransform.htm#a6">getEulerAngles</a>(double &amp;theta, double &amp;phi, double &amp;xi) const </td><td><a class="el" href="classTransform.htm">Transform</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a5">getNumColumns</a>() const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a4">getNumRows</a>() const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classTransform.htm#a5">getRollPitchYaw</a>(double &amp;roll, double &amp;pitch, double &amp;yaw) const </td><td><a class="el" href="classTransform.htm">Transform</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a7">getRow</a>(int r) const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a10">getSubMatrix</a>(int pivotRow, int pivotColumn, Matrix&lt; sr, sc, X &gt; &amp;m) const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classTransform.htm#a4">getTranslation</a>() const </td><td><a class="el" href="classTransform.htm">Transform</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a0">Matrix</a>()</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a1">Matrix</a>(const Matrix&lt; numRows, numColumns, double &gt; &amp;matrix)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrixBase.htm#a0">MatrixBase</a>()</td><td><a class="el" href="classMatrixBase.htm">MatrixBase&lt; double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a18">operator *</a>(const double &amp;scalar)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#n3">operator!=</a>(const Matrix&lt; numRows, numColumns, double &gt; &amp;lhs, const Matrix&lt; numRows, numColumns, double &gt; &amp;rhs)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a12">operator()</a>(int r, int c)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a13">operator()</a>(int row, int column) const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a16">operator+</a>(const Matrix&lt; numRows, numColumns, double &gt; &amp;rhs)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a17">operator-</a>(const Matrix&lt; numRows, numColumns, double &gt; &amp;rhs)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a19">operator/</a>(const double &amp;scalar)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#n0">operator&lt;&lt;</a>(ostream &amp;output, const Matrix&lt; numRows, numColumns, double &gt; &amp;matrix)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classTransform.htm#a3">operator=</a>(const double &amp;value)</td><td><a class="el" href="classTransform.htm">Transform</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a15">Matrix&lt; 4, 4, double &gt;::operator=</a>(const MatrixBase&lt; double &gt; &amp;m)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#n2">operator==</a>(const Matrix&lt; numRows, numColumns, double &gt; &amp;lhs, const Matrix&lt; numRows, numColumns, double &gt; &amp;rhs)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#n1">operator&gt;&gt;</a>(istream &amp;input, Matrix&lt; numRows, numColumns, double &gt; &amp;matrix)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrixBase.htm#a9">output</a>(ostream &amp;outputStream=cout)</td><td><a class="el" href="classMatrixBase.htm">MatrixBase&lt; double &gt;</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a9">setElement</a>(int r, int c, doubleval)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a11">setSubMatrix</a>(int pivotRow, int pivotColumn, const Matrix&lt; sr, sc, X &gt; &amp;m)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classTransform.htm#a0">Transform</a>()</td><td><a class="el" href="classTransform.htm">Transform</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classTransform.htm#a1">Transform</a>(const Transform &amp;transform)</td><td><a class="el" href="classTransform.htm">Transform</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a2">~Matrix</a>()</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr bgcolor="#f0f0f0"><td><b>~MatrixBase</b>() (defined in <a class="el" href="classMatrixBase.htm">MatrixBase&lt; double &gt;</a>)</td><td><a class="el" href="classMatrixBase.htm">MatrixBase&lt; double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classTransform.htm#a2">~Transform</a>()</td><td><a class="el" href="classTransform.htm">Transform</a></td><td><code> [inline]</code></td></tr>
</table><hr>
Created for project <code><font color="red"><b>QMath Matrix Library</b></font></code> on Mon May 2 11:22:00 EDT 2005
<br>
Vilas Kumar Chitrakaran (cvilas at ces dot clemson dot edu)
</body>
</html>
