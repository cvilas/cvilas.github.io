<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>QMath Matrix Library: MatrixBase&lt; T &gt; Class Template Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.9.1 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>MatrixBase&lt; T &gt; Class Template Reference</h1>This is a pure virtual base class for <code><a class="el" href="classMatrix.htm">Matrix</a></code>.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="MatrixBase_8hpp-source.htm">MatrixBase.hpp</a>&gt;</code>
<p>
<p>Inheritance diagram for MatrixBase&lt; T &gt;:
<p><center><img src="classMatrixBase.png" usemap="#MatrixBase< T >_map" border="0" alt=""></center>
<map name="MatrixBase< T >_map">
<area href="classMatrix.htm" alt="Matrix< numRows, numColumns, T >" shape="rect" coords="0,56,220,80">
<area href="classMatrix.htm" alt="Matrix< 1, size, T >" shape="rect" coords="230,56,450,80">
<area href="classMatrix.htm" alt="Matrix< size, 1, T >" shape="rect" coords="460,56,680,80">
<area href="classRowVector.htm" alt="RowVector< size, T >" shape="rect" coords="230,112,450,136">
<area href="classColumnVector.htm" alt="ColumnVector< size, T >" shape="rect" coords="460,112,680,136">
<area href="classVector.htm" alt="Vector< size, T >" shape="rect" coords="460,168,680,192">
</map>
<a href="classMatrixBase-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#a0">MatrixBase</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#a2">getElementsPointer</a> () const =0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#a3">getNumRows</a> () const =0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#a4">getNumColumns</a> () const =0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#a5">getElement</a> (int row, int column) const =0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#a6">setElement</a> (int row, int column, T value)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#a7">operator=</a> (const <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt; &amp;m)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt; T &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#a8">operator=</a> (const T &amp;value)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#a9">output</a> (ostream &amp;outputStream=cout)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<h3>template&lt;class T = double&gt;<br>
 class MatrixBase&lt; T &gt;</h3>

This is a pure virtual base class for <code><a class="el" href="classMatrix.htm">Matrix</a></code>. 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="a0" doxytag="MatrixBase::MatrixBase"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::<a class="el" href="classMatrixBase.htm">MatrixBase</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="a5" doxytag="MatrixBase::getElement"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::getElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>row</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>column</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"> const<code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The element at the specified position. </dd></dl>

<p>
Implemented in <a class="el" href="classMatrix.htm#a8">Matrix&lt; numRows, numColumns, T &gt;</a>, <a class="el" href="classMatrix.htm#a8">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#a8">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#a8">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a2" doxytag="MatrixBase::getElementsPointer"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T* <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::getElementsPointer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The pointer to the first element in a matrix or vector.</dd></dl>

<p>
Implemented in <a class="el" href="classColumnVector.htm#a5">ColumnVector&lt; size, T &gt;</a>, <a class="el" href="classMatrix.htm#a3">Matrix&lt; numRows, numColumns, T &gt;</a>, <a class="el" href="classRowVector.htm#a4">RowVector&lt; size, T &gt;</a>, <a class="el" href="classMatrix.htm#a3">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#a3">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#a3">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a4" doxytag="MatrixBase::getNumColumns"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual int <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::getNumColumns           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The number of columns in the <a class="el" href="classMatrix.htm">Matrix</a>. </dd></dl>

<p>
Implemented in <a class="el" href="classMatrix.htm#a5">Matrix&lt; numRows, numColumns, T &gt;</a>, <a class="el" href="classMatrix.htm#a5">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#a5">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#a5">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a3" doxytag="MatrixBase::getNumRows"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual int <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::getNumRows           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The number of rows in the <a class="el" href="classMatrix.htm">Matrix</a>. </dd></dl>

<p>
Implemented in <a class="el" href="classMatrix.htm#a4">Matrix&lt; numRows, numColumns, T &gt;</a>, <a class="el" href="classMatrix.htm#a4">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#a4">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#a4">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a8" doxytag="MatrixBase::operator="></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual <a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt;T&gt; <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const T &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Initialization of matrix. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The value to which all elements in the matrix are initialized.</td></tr>
  </table>
</dl>

<p>
Implemented in <a class="el" href="classColumnVector.htm#a13">ColumnVector&lt; size, T &gt;</a>, <a class="el" href="classMatrix.htm#a14">Matrix&lt; numRows, numColumns, T &gt;</a>, <a class="el" href="classRowVector.htm#a12">RowVector&lt; size, T &gt;</a>, <a class="el" href="classTransform.htm#a3">Transform</a>, <a class="el" href="classVector.htm#a5">Vector&lt; size, T &gt;</a>, <a class="el" href="classMatrix.htm#a14">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#a14">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#a14">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a7" doxytag="MatrixBase::operator="></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt;T&gt;&amp; <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>m</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Assignment operator between two <code>MatrixBase</code> types of same dimensions.
<p>
Reimplemented in <a class="el" href="classMatrix.htm#a15">Matrix&lt; numRows, numColumns, T &gt;</a>, <a class="el" href="classMatrix.htm#a15">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#a15">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#a15">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a9" doxytag="MatrixBase::output"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">void <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::output           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">ostream &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>outputStream</em> = <code>cout</code>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The elements in the referenced matrix to the output stream (by default the output is to the console)</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a6" doxytag="MatrixBase::setElement"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual void <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::setElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>row</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>column</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>T&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets an element to a value at the specified position. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>row</em>&nbsp;</td><td>Row number of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>column</em>&nbsp;</td><td>Column number of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The desired element is set to this value. </td></tr>
  </table>
</dl>

<p>
Implemented in <a class="el" href="classMatrix.htm#a9">Matrix&lt; numRows, numColumns, T &gt;</a>, <a class="el" href="classMatrix.htm#a9">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#a9">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#a9">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="MatrixBase_8hpp-source.htm">MatrixBase.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>QMath Matrix Library</b></font></code> on Mon May 2 11:22:00 EDT 2005
<br>
Vilas Kumar Chitrakaran (cvilas at ces dot clemson dot edu)
</body>
</html>
