<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>POSIX Utilities Package 2.2: TCPClient Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>TCPClient Class Reference</h1><!-- doxytag: class="TCPClient" -->This is the client part of the TCPServer/TCPClient pair.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="TCPClientServer_8hpp-source.htm">TCPClientServer.hpp</a>&gt;</code>
<p>
<a href="classTCPClient-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTCPClient.htm#d37bba4f2ebcc899b9871656802dcbe9">TCPClient</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTCPClient.htm#eca1ae1532b4d6a60b99e4459226fd41">TCPClient</a> (const char *serverIp, int port, struct timeval &amp;timeout, int bdp=0)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTCPClient.htm#869a5b3319ca562d03cb4c59ebec4407">~TCPClient</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTCPClient.htm#c8bbc37fc7576bcc12d133f629cb0238">init</a> (const char *serverIp, int port, struct timeval &amp;timeout, int bdp=0)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTCPClient.htm#6bc662e4e3381751249c0e18fb39265e">sendAndReceive</a> (char *outMsgBuf, int outMsgLen, char *inMsgBuf, int inBufLen, int *inMsgLen)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTCPClient.htm#34e0bcabec00d67128098f8ff74055e1">getStatusCode</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTCPClient.htm#7ab28c1741fbcb7c4d2cdc693960b426">getStatusMessage</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTCPClient.htm#0178b2a6ee653e5650bdeaf2f0b3e9dd">enableIgnoreSigPipe</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTCPClient.htm#d984f1bac894b8d69c5217555bcc71c0">disableIgnoreSigPipe</a> ()</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
This is the client part of the TCPServer/TCPClient pair. 
<p>
An object of this class can establish connection with an object of class (or derived from) <a class="el" href="classTCPServer.htm">TCPServer</a> over a TCP/IP network. This implementation does not do endian conversions to the data being sent/received over the network. Hence you will have jumbled data when communicating between little endian and big endian devices and vice-versa (no problems if both ends use same byte order for data). Note that this implementation provides a signal handler to ignore SIGPIPE. This will allow client to keep running even after send/recv data on illegal socket resulting from an unexpected server termination.<p>
Use TCPClient/TCPServer when you want to reliably transfer data at slow speeds. Use UDPClient/UDPServer when your primary requirement is speed.<p>
<b>Example Program:</b> See example for <a class="el" href="classTCPServer.htm">TCPServer</a> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="d37bba4f2ebcc899b9871656802dcbe9"></a><!-- doxytag: member="TCPClient::TCPClient" ref="d37bba4f2ebcc899b9871656802dcbe9" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">TCPClient::TCPClient           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor. Does nothing.     </td>
  </tr>
</table>
<a class="anchor" name="eca1ae1532b4d6a60b99e4459226fd41"></a><!-- doxytag: member="TCPClient::TCPClient" ref="eca1ae1532b4d6a60b99e4459226fd41" args="(const char *serverIp, int port, struct timeval &amp;timeout, int bdp=0)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">TCPClient::TCPClient           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>serverIp</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>port</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>struct timeval &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>timeout</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>bdp</em> = <code>0</code></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This constructor initializes parameters for a connection to remote server BUT doesn't connect until <a class="el" href="classTCPClient.htm#6bc662e4e3381751249c0e18fb39265e">sendAndReceive()</a> is called. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>serverIp</em>&nbsp;</td><td>IP name of the remote server. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>port</em>&nbsp;</td><td>Port address on which the remote server is listening for client connections. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>timeout</em>&nbsp;</td><td>The <a class="el" href="classTCPClient.htm#6bc662e4e3381751249c0e18fb39265e">sendAndReceive()</a> function sends messages and waits for replies from the server. This parameter sets the timeout period in waiting for a reply. If a reply is not received within this timeout period, <a class="el" href="classTCPClient.htm#6bc662e4e3381751249c0e18fb39265e">sendAndReceive()</a> will exit with error. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bdp</em>&nbsp;</td><td>This is an advanced option. It allows the user to suggest the bandwidth-delay product in kilo bytes so that socket buffers of optimal sizes can be created. Suppose you are going to connect to a machine whose round-trip time (delay between sending a packet and receiving acknowledgement) is 50ms, and the link bandwidth is 100 Mbits per sec. Then your BDP is 100e6 * 50e-3 / 8 = 625 kilo bytes. You can use the 'ping' utility to get an approx. measure for the round-trip time. Set this to 0 to use system defaults. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="869a5b3319ca562d03cb4c59ebec4407"></a><!-- doxytag: member="TCPClient::~TCPClient" ref="869a5b3319ca562d03cb4c59ebec4407" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">TCPClient::~TCPClient           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The destructor. Cleans up.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="d984f1bac894b8d69c5217555bcc71c0"></a><!-- doxytag: member="TCPClient::disableIgnoreSigPipe" ref="d984f1bac894b8d69c5217555bcc71c0" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int TCPClient::disableIgnoreSigPipe           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Call this function to disable SIG_PIPE handling. The client will terminate if server terminates <dl compact><dt><b>Returns:</b></dt><dd>0 if no error, else -1 </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="0178b2a6ee653e5650bdeaf2f0b3e9dd"></a><!-- doxytag: member="TCPClient::enableIgnoreSigPipe" ref="0178b2a6ee653e5650bdeaf2f0b3e9dd" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int TCPClient::enableIgnoreSigPipe           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Call this function to ignore SIG_PIPE, and hence save client from terminating due to server termination <dl compact><dt><b>Returns:</b></dt><dd>0 if no error, else -1 </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="34e0bcabec00d67128098f8ff74055e1"></a><!-- doxytag: member="TCPClient::getStatusCode" ref="34e0bcabec00d67128098f8ff74055e1" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int TCPClient::getStatusCode           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>Latest status code. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="7ab28c1741fbcb7c4d2cdc693960b426"></a><!-- doxytag: member="TCPClient::getStatusMessage" ref="7ab28c1741fbcb7c4d2cdc693960b426" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">const char* TCPClient::getStatusMessage           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>Latest error status report. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="c8bbc37fc7576bcc12d133f629cb0238"></a><!-- doxytag: member="TCPClient::init" ref="c8bbc37fc7576bcc12d133f629cb0238" args="(const char *serverIp, int port, struct timeval &amp;timeout, int bdp=0)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int TCPClient::init           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>serverIp</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>port</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>struct timeval &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>timeout</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>bdp</em> = <code>0</code></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Establish connection with a remote server. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>serverIp</em>&nbsp;</td><td>IP name of the remote server. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>port</em>&nbsp;</td><td>Port address on which the remote server is listening for client connections. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>timeout</em>&nbsp;</td><td>The <a class="el" href="classTCPClient.htm#6bc662e4e3381751249c0e18fb39265e">sendAndReceive()</a> function sends messages and waits for replies from the server. This parameter sets the timeout period in waiting for a reply. If a reply is not received within this timeout period, <a class="el" href="classTCPClient.htm#6bc662e4e3381751249c0e18fb39265e">sendAndReceive()</a> will exit with error. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bdp</em>&nbsp;</td><td>This is an advanced option. It allows the user to suggest the bandwidth-delay product in kilo bytes so that socket buffers of optimal sizes can be created. Suppose you are going to connect to a machine whose round-trip time (delay between sending a packet and receiving acknowledgement) is 50ms, and the link bandwidth is 100 Mbits per sec. Then your BDP is 100e6 * 50e-3 / 8 = 625 kilo bytes. You can use the 'ping' utility to get an approx. measure for the round-trip time. Set this to 0 to use system defaults. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="6bc662e4e3381751249c0e18fb39265e"></a><!-- doxytag: member="TCPClient::sendAndReceive" ref="6bc662e4e3381751249c0e18fb39265e" args="(char *outMsgBuf, int outMsgLen, char *inMsgBuf, int inBufLen, int *inMsgLen)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int TCPClient::sendAndReceive           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">char *&nbsp;</td>
          <td class="mdname" nowrap> <em>outMsgBuf</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>outMsgLen</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>char *&nbsp;</td>
          <td class="mdname" nowrap> <em>inMsgBuf</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>inBufLen</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int *&nbsp;</td>
          <td class="mdname" nowrap> <em>inMsgLen</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Send a message to the server, and receive a reply. <br>
<hr>
 <ul>
<li>
This function will normally block waiting for reply from server unless you set <em>inMsgBuf</em> to NULL. </li>
<li>
The message from server is discarded if the receive buffer <em>inMsgBuf</em> is not large enough. </li>
</ul>
<hr>
<br>
 <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>outMsgBuf</em>&nbsp;</td><td>Pointer to buffer containing your message to server. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>outMsgLen</em>&nbsp;</td><td>The length of your message above. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>inMsgBuf</em>&nbsp;</td><td>A pointer to buffer provided by you to store the reply message from the server. Set this to NULL if you aren't interested in reply from server. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>inBufLen</em>&nbsp;</td><td>The size (bytes) of the above buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>inMsgLen</em>&nbsp;</td><td>The actual length (bytes) of message received from the server. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error. Call getStatus....() for the error. </dd></dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="TCPClientServer_8hpp-source.htm">TCPClientServer.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>POSIX Utilities Package</b></font></code> on Sat Aug 26 17:12:56 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
