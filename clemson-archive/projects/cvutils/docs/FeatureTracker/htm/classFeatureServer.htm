<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Real-time Feature Tracker Library: FeatureServer Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>FeatureServer Class Reference</h1><!-- doxytag: class="FeatureServer" -->A UDP network server for feature tracker.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="FeatureClientServer_8hpp-source.htm">FeatureClientServer.hpp</a>&gt;</code>
<p>
<a href="classFeatureServer-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFeatureServer.htm#8b3aede5903ef104e24f46751660ad0e">FeatureServer</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFeatureServer.htm#15386da9303e9d49ccdb08d1bd578c82">~FeatureServer</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFeatureServer.htm#7f092d6c938d48fffed0d86e9ff0b1ec">initialize</a> (<a class="el" href="struct__FeatureServerContext.htm">FeatureServerContext_t</a> &amp;cxt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFeatureServer.htm#501abd780d3af9c15675ab38210f46d6">updateFeatures</a> (<a class="el" href="struct__feature__list.htm">feature_list_t</a> &amp;features, int srcFrameNumber)</td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFeatureServer.htm#e36ac457f50737f8e0efc7036e6de96d">receiveAndReply</a> (const char *inMsgBuf, int inMsgLen, int *outMsgLen)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFeatureServer.htm#4572e08e536e3ca2eb2bf13352a89269">enterThread</a> (void *arg)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFeatureServer.htm#1cdc206003e0afc2beefdd4339129d8a">executeInThread</a> (void *arg)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFeatureServer.htm#7a8304d8dd83bc81d549adeba7b73ed6">exitThread</a> (void *arg)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
A UDP network server for feature tracker. 
<p>
An object of this class starts a separate thread and replies to clients (<a class="el" href="classFeatureClient.htm">FeatureClient</a> object) with the latest feature point list.<p>
<b>Example Program:</b> <div class="fragment"><pre class="fragment"><span class="comment">//==============================================================================</span>
<span class="comment">// FeatureServer.t.cpp - Examples program for FeatureServer class</span>
<span class="comment">// UAV follower experiment</span>
<span class="comment">// Vilas Chitrakaran, May 2006</span>
<span class="comment">//==============================================================================</span>

<span class="preprocessor">#include "<a class="code" href="FeatureClientServer_8hpp.htm">FeatureClientServer.hpp</a>"</span>

<span class="keywordtype">int</span> main()
{ 
 <a class="code" href="classFeatureServer.htm">FeatureServer</a> server;
 <a class="code" href="struct__FeatureServerContext.htm">FeatureServerContext_t</a> context;
 <a class="code" href="struct__feature__list.htm">feature_list_t</a> features;
 
 <span class="comment">// set server parameters</span>
 context.<a class="code" href="struct__FeatureServerContext.htm#c1290eb9fa76675115cf5407740315e8">port</a> = 8000;
 context.<a class="code" href="struct__FeatureServerContext.htm#26c7d878917beda166f95589a012f3fe">thread_priority</a> = 10;
 context.<a class="code" href="struct__FeatureServerContext.htm#f0a197a87f82b414357e90ba3816363b">num_features</a> = 10;

 <span class="keywordflow">if</span>( <a class="code" href="TrackerUtils_8hpp.htm#8793e527b678779c3bcd08047adf29ab">allocateFeatureList</a>(features, context.<a class="code" href="struct__FeatureServerContext.htm#f0a197a87f82b414357e90ba3816363b">num_features</a>) &lt; 0)
  <span class="keywordflow">return</span> -1;
 
 <span class="comment">// initialize and start server thread</span>
 <span class="keywordflow">if</span>( server.<a class="code" href="classFeatureServer.htm#7f092d6c938d48fffed0d86e9ff0b1ec">initialize</a>(context) != 0)
  <span class="keywordflow">return</span> -1;
 
 <span class="keywordtype">int</span> frame = 0;
 <span class="keywordflow">while</span>(1){
  <span class="comment">// do processing here....</span>
  
  <span class="comment">// update server buffer</span>
  features.<a class="code" href="struct__feature__list.htm#8e2e1c2bc6c829a57c6909bc72f1f217">features</a>[0].<a class="code" href="struct__feature.htm#c3d93448e2d7e4c42f6cb81f5636575b">x</a> += 1;
  <span class="keywordflow">if</span>( server.<a class="code" href="classFeatureServer.htm#501abd780d3af9c15675ab38210f46d6">updateFeatures</a>(features, frame++) != 0)
   <span class="keywordflow">break</span>;
  sleep(1);
 }
 
 <a class="code" href="TrackerUtils_8hpp.htm#a5c4fd16fc87e9a0e3c260f835c25623">freeFeatureList</a>(features);
 
 <span class="keywordflow">return</span> 0;
}
</pre></div> <div class="fragment"><pre class="fragment"><span class="comment">//==============================================================================</span>
<span class="comment">// FeatureClient.t.cpp - Examples program for FeatureClient class</span>
<span class="comment">// UAV follower experiment</span>
<span class="comment">// Vilas Chitrakaran, May 2006</span>
<span class="comment">//==============================================================================</span>

<span class="preprocessor">#include "<a class="code" href="FeatureClientServer_8hpp.htm">FeatureClientServer.hpp</a>"</span>

<span class="comment">//==============================================================================</span>
<span class="comment">// main: Connects to a feature server and delivers updates from server.</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])
{
 <a class="code" href="classFeatureClient.htm">FeatureClient</a> client;
 <a class="code" href="struct__feature__list.htm">feature_list_t</a> features;
 <span class="keywordtype">int</span> nFeatures = 10;
 
 <span class="comment">// initialize a client and connect to server</span>
 <span class="keywordflow">if</span>(client.<a class="code" href="classFeatureClient.htm#4388eeb511c927ab4109b5f73b0b7e46">initialize</a>(<span class="stringliteral">"127.0.0.1"</span>, 8000, 50, nFeatures) != 0) 
  <span class="keywordflow">return</span> -1;
 
 <span class="comment">// create feature list</span>
 <span class="keywordflow">if</span>( <a class="code" href="TrackerUtils_8hpp.htm#8793e527b678779c3bcd08047adf29ab">allocateFeatureList</a>(features, nFeatures) &lt; 0 )
  <span class="keywordflow">return</span> -1;
 
 <span class="comment">// server read loop</span>
 <span class="keywordtype">int</span> msgNum = 0;
 <span class="keywordflow">while</span>(1) {
  <span class="keywordflow">if</span>(msgNum &gt; 1000) <span class="keywordflow">break</span>;
  ++msgNum;

  <span class="comment">// Ask for update from server</span>
  <span class="keywordflow">if</span>( client.<a class="code" href="classFeatureClient.htm#65087661b11ff002631eba81cf642a5c">receiveFeatureList</a>(features) == -1)
   <span class="keywordflow">break</span>;
  
  <span class="keywordflow">if</span>( features.<a class="code" href="struct__feature__list.htm#f0d6f07c0f9cf215ba66775fe35b5197">frame_number</a> &lt; 0 ) <span class="comment">// server hasn't started updating frames yet</span>
   <span class="keywordflow">continue</span>;

  <span class="comment">// print recevied frame number</span>
  fprintf(stdout, <span class="stringliteral">"latest frame received: %d.\n"</span>, features.<a class="code" href="struct__feature__list.htm#f0d6f07c0f9cf215ba66775fe35b5197">frame_number</a>);
 }

 <a class="code" href="TrackerUtils_8hpp.htm#a5c4fd16fc87e9a0e3c260f835c25623">freeFeatureList</a>(features);
 
 <span class="keywordflow">return</span> 0;
}
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="8b3aede5903ef104e24f46751660ad0e"></a><!-- doxytag: member="FeatureServer::FeatureServer" ref="8b3aede5903ef104e24f46751660ad0e" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">FeatureServer::FeatureServer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Default constructor. Does a few initializations.     </td>
  </tr>
</table>
<a class="anchor" name="15386da9303e9d49ccdb08d1bd578c82"></a><!-- doxytag: member="FeatureServer::~FeatureServer" ref="15386da9303e9d49ccdb08d1bd578c82" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">FeatureServer::~FeatureServer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Default destructor. Frees resources     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="7f092d6c938d48fffed0d86e9ff0b1ec"></a><!-- doxytag: member="FeatureServer::initialize" ref="7f092d6c938d48fffed0d86e9ff0b1ec" args="(FeatureServerContext_t &amp;cxt)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int FeatureServer::initialize           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="struct__FeatureServerContext.htm">FeatureServerContext_t</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>cxt</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Initializes and starts the server thread. This must be the first method called before using any other method in this class. <dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error (error message redirected to stderr). </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="501abd780d3af9c15675ab38210f46d6"></a><!-- doxytag: member="FeatureServer::updateFeatures" ref="501abd780d3af9c15675ab38210f46d6" args="(feature_list_t &amp;features, int srcFrameNumber)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int FeatureServer::updateFeatures           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="struct__feature__list.htm">feature_list_t</a> &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>features</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>srcFrameNumber</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Update the features buffer in the server. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>features</em>&nbsp;</td><td>The feature list. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>srcFrameNumber</em>&nbsp;</td><td>the image/video frame number corresponding to this feature list. The internal buffer is not updated unless this number is different from an internally maintained counter. This avoid unecessary copy operations. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error (error message redirected to stderr). </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="e36ac457f50737f8e0efc7036e6de96d"></a><!-- doxytag: member="FeatureServer::receiveAndReply" ref="e36ac457f50737f8e0efc7036e6de96d" args="(const char *inMsgBuf, int inMsgLen, int *outMsgLen)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">virtual const char* FeatureServer::receiveAndReply           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>inMsgBuf</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>inMsgLen</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int *&nbsp;</td>
          <td class="mdname" nowrap> <em>outMsgLen</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [protected, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Reimplemented from UDPServer class.     </td>
  </tr>
</table>
<a class="anchor" name="4572e08e536e3ca2eb2bf13352a89269"></a><!-- doxytag: member="FeatureServer::enterThread" ref="4572e08e536e3ca2eb2bf13352a89269" args="(void *arg)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">virtual void FeatureServer::enterThread           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">void *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>arg</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Reimplemented from Thread class.     </td>
  </tr>
</table>
<a class="anchor" name="1cdc206003e0afc2beefdd4339129d8a"></a><!-- doxytag: member="FeatureServer::executeInThread" ref="1cdc206003e0afc2beefdd4339129d8a" args="(void *arg)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">virtual int FeatureServer::executeInThread           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">void *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>arg</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Reimplemented from Thread class.     </td>
  </tr>
</table>
<a class="anchor" name="7a8304d8dd83bc81d549adeba7b73ed6"></a><!-- doxytag: member="FeatureServer::exitThread" ref="7a8304d8dd83bc81d549adeba7b73ed6" args="(void *arg)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">virtual void FeatureServer::exitThread           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">void *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>arg</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Reimplemented from Thread class.     </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="FeatureClientServer_8hpp-source.htm">FeatureClientServer.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>Real-time Feature Tracker Library</b></font></code> on Thu Sep 14 20:30:15 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
