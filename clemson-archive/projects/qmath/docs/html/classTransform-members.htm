<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>QMath Matrix Library: Member List</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>Transform Member List</h1>This is the complete list of members for <a class="el" href="classTransform.htm">Transform</a>, including all inherited members.<p><table>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#50926e7ca3f56aa0028e990e5c394a7b">d_element</a></td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#d1ca45237c389f51f63cab83b1cf0dd2">d_size</a></td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#624386f865095247d13c8282bb8db991">determinant</a>(const Matrix&lt; size, size, double &gt; &amp;matrix)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#f0373874bcefa4c11d80e2c2ca7ce650">getColumn</a>(int c) const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#0a7366bb9752491a8a8ae7d5c5626080">getElement</a>(int r, int c) const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#15ed828f282a27d51bc11a9499b6749e">getElementsPointer</a>() const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#f5a746aee68aa00f0cdbdcd1400d8c14">getNumColumns</a>() const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#0b3f0fbcb77b712b7dc29596bd75945a">getNumRows</a>() const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classTransform.htm#20f1917f34315984367421e98f5a759a">getRollPitchYaw</a>(double &amp;roll, double &amp;pitch, double &amp;yaw) const </td><td><a class="el" href="classTransform.htm">Transform</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#d48c4475e9ec1c71e53b61a60317b4e5">getRow</a>(int r) const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#d2a2c2427aa4150c7349237e774ceb81">getSubMatrix</a>(int pivotRow, int pivotColumn, Matrix&lt; sr, sc, X &gt; &amp;m) const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classTransform.htm#efd76efb2df548c1bf9feac5d9da4f62">getTranslation</a>() const </td><td><a class="el" href="classTransform.htm">Transform</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#800d306b91f512c556316b182a6b7201">inverse</a>(const Matrix&lt; size, size, double &gt; &amp;m)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#f81c867db5cdbf2d4a8892f6b8439f82">Matrix</a>()</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#2ccfd6df3e282a1634699ceaa80016f1">Matrix</a>(const Matrix&lt; nRows, nCols, double &gt; &amp;matrix)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrixBase.htm#6d4e1b44531f52347fdb9cb6cd39bfeb">MatrixBase</a>()</td><td><a class="el" href="classMatrixBase.htm">MatrixBase&lt; double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrixBase.htm#d1f395ee454813d4962eee009889ad3c">MatrixBase</a>(const MatrixBase&lt; double &gt; &amp;m)</td><td><a class="el" href="classMatrixBase.htm">MatrixBase&lt; double &gt;</a></td><td><code> [inline, protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#79ad509dcb87dce873d631d9e82a5838">operator *</a>(const Matrix&lt; nRows, nCols, double &gt; &amp;lhs, const double &amp;scalar)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#ca57bb6c17f5f07fa9c413badc46da11">operator *</a>(const double &amp;s, const Matrix&lt; nRows, nCols, double &gt; &amp;rhs)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#a0ca1e96285323a9fc5a1f71d7872e53">operator *</a>(const Matrix&lt; r1, c1r2, double &gt; &amp;m1, const Matrix&lt; c1r2, c2, double &gt; &amp;m2)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#c2f0b69d82c7ae5d317ef87d1a76ee8f">operator *</a>(const Matrix&lt; 1, c1r2, double &gt; &amp;m1, const Matrix&lt; c1r2, 1, double &gt; &amp;m2)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#3e1aedce68233877ac17178e56e7aaf9">operator *=</a>(const double &amp;scalar)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#70bbf4ba567224d5259746b6623047d9">operator!=</a>(const Matrix&lt; nRows, nCols, double &gt; &amp;lhs, const Matrix&lt; nRows, nCols, double &gt; &amp;rhs)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#e6153c41f242aa4d74668f1af12c5ff4">operator()</a>(int r, int c) const </td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#172d6dac11ecaca6d6ba9fa37e79db24">operator()</a>(int r, int c)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#de39d7fbf42f7da8a5349c66e6f34dad">operator+</a>(const Matrix&lt; nRows, nCols, double &gt; &amp;lhs, const Matrix&lt; nRows, nCols, double &gt; &amp;rhs)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#edf7eb50f3481be450845b8938f2905c">operator+=</a>(const Matrix&lt; nRows, nCols, double &gt; &amp;rhs)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#f45f7536c3be43377a4298c37bafbcc1">operator-</a>(const Matrix&lt; nRows, nCols, double &gt; &amp;lhs, const Matrix&lt; nRows, nCols, double &gt; &amp;rhs)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#cf59e55bb983060a84a9ff6b99f4ef77">operator-=</a>(const Matrix&lt; nRows, nCols, double &gt; &amp;rhs)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#050579bc4f30d6cb93976df3676ac830">operator/</a>(const Matrix&lt; nRows, nCols, double &gt; &amp;lhs, const double &amp;scalar)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#f4675ef62406c10f7947daefc0fae592">operator/=</a>(const double &amp;scalar)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#b6dd207b17fa40e610a3623cb531f278">operator&lt;&lt;</a>(std::ostream &amp;output, const Matrix&lt; nRows, nCols, double &gt; &amp;matrix)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classTransform.htm#e5cf18ef44b656c18a03233c0e0558d1">operator=</a>(const double &amp;val)</td><td><a class="el" href="classTransform.htm">Transform</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#ed665403f0f55f8212220146bec9ce89">Matrix&lt; 4, 4, double &gt;::operator=</a>(const MatrixBase&lt; double &gt; &amp;m)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#e4fc9eb3282b2fbc3d432cfc1e7aa4ce">operator==</a>(const Matrix&lt; nRows, nCols, double &gt; &amp;lhs, const Matrix&lt; nRows, nCols, double &gt; &amp;rhs)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#bed80944ebde4fafca2252aa33069c93">operator&gt;&gt;</a>(std::istream &amp;input, Matrix&lt; nRows, nCols, double &gt; &amp;matrix)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrixBase.htm#37f012169567e29e11871a0489de3249">output</a>(std::ostream &amp;outputStream=std::cout)</td><td><a class="el" href="classMatrixBase.htm">MatrixBase&lt; double &gt;</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#ec00b50a25f4e5cb95a0b0b7e192e0bf">setElement</a>(int r, int c, doubleval)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#60e9b07c96df3bd5eebb79ba0e124943">setSubMatrix</a>(int pivotRow, int pivotColumn, const Matrix&lt; sr, sc, X &gt; &amp;m)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#55be71612a1b34484c5b39a649e84536">trace</a>(const Matrix&lt; size, size, double &gt; &amp;matrix)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classTransform.htm#a08ca4266efabc768973cdeea51945ab">Transform</a>()</td><td><a class="el" href="classTransform.htm">Transform</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classTransform.htm#a7a387108cf421888952b454d641895b">Transform</a>(const Transform &amp;transform)</td><td><a class="el" href="classTransform.htm">Transform</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#8e1002b73935c3285e044b67e00b2382">transpose</a>(const Matrix&lt; nRows, nCols, double &gt; &amp;matrix)</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#ea6c6fd8fcc3d2f32c0e0c69a9a204c4">unitMatrix</a>()</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrix.htm#317d03800b7573e5fe4810c3edd99522">~Matrix</a>()</td><td><a class="el" href="classMatrix.htm">Matrix&lt; 4, 4, double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classMatrixBase.htm#f81fd20360f891b3dac1730303663702">~MatrixBase</a>()</td><td><a class="el" href="classMatrixBase.htm">MatrixBase&lt; double &gt;</a></td><td><code> [inline, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classTransform.htm#a72e286c069850db80927b0e6554cd3e">~Transform</a>()</td><td><a class="el" href="classTransform.htm">Transform</a></td><td><code> [inline]</code></td></tr>
</table><hr>
Created for project <code><font color="red"><b>QMath Matrix Library</b></font></code> on Mon Sep 11 14:52:24 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
