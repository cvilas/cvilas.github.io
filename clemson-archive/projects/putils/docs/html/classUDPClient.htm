<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>POSIX Utilities Package 2.2: UDPClient Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>UDPClient Class Reference</h1><!-- doxytag: class="UDPClient" -->This is the client part of the UDPServer/UDPClient pair.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="UDPClientServer_8hpp-source.htm">UDPClientServer.hpp</a>&gt;</code>
<p>
<a href="classUDPClient-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPClient.htm#8e66a3b64581f3040cd78f8379ddca9c">UDPClient</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPClient.htm#cffbaaa34b0664166ab7670e2a1f273b">UDPClient</a> (const char *serverIp, int port, struct timeval &amp;timeout, int bdp=0)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPClient.htm#34f070027c8fa69813efcf9100d7e35d">~UDPClient</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPClient.htm#61473d1ea02868ab4d2a26b964c4b51a">init</a> (const char *serverIp, int port, struct timeval &amp;timeout, int bdp=0)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPClient.htm#c94ac5c3d0d1961a0b91bf04f80329f5">getStatusCode</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPClient.htm#3629d6ba4e6a49d2f8f1c7c76a87c500">getStatusMessage</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classUDPClient.htm#190faefc150c24176d55cd82e373782f">sendAndReceive</a> (char *outMsgBuf, int outMsgLen, char *inMsgBuf, int inBufLen, int *inMsgLen)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
This is the client part of the UDPServer/UDPClient pair. 
<p>
UDPServer/UDPClient uses the User Datagram Protocol (UDP, IETF RFC768) for fast, 'unreliable' data transfer between two devices over the ethernet. The protocol is unreliable because there is no guarantee that data packets will reach their destination, or that they will reach the destination in the right sequence. UDP prioritizes speed over reliability. Use (the much slower) TCPServer/TCPClient if reliability and data integrity is more important in your application.<p>
<b>Example Program:</b> See example for <a class="el" href="classUDPServer.htm">UDPServer</a> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="8e66a3b64581f3040cd78f8379ddca9c"></a><!-- doxytag: member="UDPClient::UDPClient" ref="8e66a3b64581f3040cd78f8379ddca9c" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">UDPClient::UDPClient           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor. Does nothing.     </td>
  </tr>
</table>
<a class="anchor" name="cffbaaa34b0664166ab7670e2a1f273b"></a><!-- doxytag: member="UDPClient::UDPClient" ref="cffbaaa34b0664166ab7670e2a1f273b" args="(const char *serverIp, int port, struct timeval &amp;timeout, int bdp=0)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">UDPClient::UDPClient           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>serverIp</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>port</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>struct timeval &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>timeout</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>bdp</em> = <code>0</code></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This constructor initializes parameters for a connection to remote server. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>serverIp</em>&nbsp;</td><td>IP name of the remote server. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>port</em>&nbsp;</td><td>Port address on which the remote server is listening for client connections. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>timeout</em>&nbsp;</td><td>The <a class="el" href="classUDPClient.htm#190faefc150c24176d55cd82e373782f">sendAndReceive()</a> function sends messages and waits for replies from the server. This parameter sets the timeout period in waiting for a reply. If a reply is not received within this timeout period, <a class="el" href="classUDPClient.htm#190faefc150c24176d55cd82e373782f">sendAndReceive()</a> will exit with error. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bdp</em>&nbsp;</td><td>This is an advanced option. It allows the user to suggest the bandwidth-delay product in kilo bytes so that socket buffers of optimal sizes can be created. Suppose you are going to connect to a machine whose round-trip time (delay between sending a packet and receiving acknowledgement) is 50ms, and the link bandwidth is 100 Mbits per sec. Then your BDP is 100e6 * 50e-3 / 8 = 625 kilo bytes. You can use the 'ping' utility to get an approx. measure for the round-trip time. Set this value to 0 to use system defaults. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="34f070027c8fa69813efcf9100d7e35d"></a><!-- doxytag: member="UDPClient::~UDPClient" ref="34f070027c8fa69813efcf9100d7e35d" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">UDPClient::~UDPClient           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The destructor. Cleans up.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="c94ac5c3d0d1961a0b91bf04f80329f5"></a><!-- doxytag: member="UDPClient::getStatusCode" ref="c94ac5c3d0d1961a0b91bf04f80329f5" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int UDPClient::getStatusCode           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>Latest status code. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="3629d6ba4e6a49d2f8f1c7c76a87c500"></a><!-- doxytag: member="UDPClient::getStatusMessage" ref="3629d6ba4e6a49d2f8f1c7c76a87c500" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">const char* UDPClient::getStatusMessage           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>Latest error status report. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="61473d1ea02868ab4d2a26b964c4b51a"></a><!-- doxytag: member="UDPClient::init" ref="61473d1ea02868ab4d2a26b964c4b51a" args="(const char *serverIp, int port, struct timeval &amp;timeout, int bdp=0)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int UDPClient::init           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>serverIp</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>port</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>struct timeval &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>timeout</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>bdp</em> = <code>0</code></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Establish connection with a remote server. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>serverIp</em>&nbsp;</td><td>IP name of the remote server. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>port</em>&nbsp;</td><td>Port address on which the remote server is listening for client connections. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>timeout</em>&nbsp;</td><td>The <a class="el" href="classUDPClient.htm#190faefc150c24176d55cd82e373782f">sendAndReceive()</a> function sends messages and waits for replies from the server. This parameter sets the timeout period in waiting for a reply. If a reply is not received within this timeout period, <a class="el" href="classUDPClient.htm#190faefc150c24176d55cd82e373782f">sendAndReceive()</a> will exit with error. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bdp</em>&nbsp;</td><td>This is an advanced option. It allows the user to suggest the bandwidth-delay product in kilo bytes so that socket buffers of optimal sizes can be created. Suppose you are going to connect to a machine whose round-trip time (delay between sending a packet and receiving acknowledgement) is 50ms, and the link bandwidth is 100 Mbits per sec. Then your BDP is 100e6 * 50e-3 / 8 = 625 kilo bytes. You can use the 'ping' utility to get an approx. measure for the round-trip time. Set this value to 0 to use system defaults. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="190faefc150c24176d55cd82e373782f"></a><!-- doxytag: member="UDPClient::sendAndReceive" ref="190faefc150c24176d55cd82e373782f" args="(char *outMsgBuf, int outMsgLen, char *inMsgBuf, int inBufLen, int *inMsgLen)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int UDPClient::sendAndReceive           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">char *&nbsp;</td>
          <td class="mdname" nowrap> <em>outMsgBuf</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>outMsgLen</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>char *&nbsp;</td>
          <td class="mdname" nowrap> <em>inMsgBuf</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>inBufLen</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int *&nbsp;</td>
          <td class="mdname" nowrap> <em>inMsgLen</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Send a message to the server, and receive a reply. <br>
<hr>
 <ul>
<li>
If <em>inMsgBuf</em> is set to NULL, the function will return immediately after sending a message. It won't wait for any reply. </li>
<li>
If <em>inMsgBuf</em> is set, this function will block until a reply is received or until timeout (set in <a class="el" href="classUDPClient.htm#61473d1ea02868ab4d2a26b964c4b51a">init()</a>). </li>
<li>
If the data packet is too long to fit into the receive buffer <em>inMsgBuf</em>, the excess message from client is discarded. </li>
</ul>
<hr>
<br>
 <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>outMsgBuf</em>&nbsp;</td><td>Pointer to buffer containing your message to server. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>outMsgLen</em>&nbsp;</td><td>The length of your message above. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>inMsgBuf</em>&nbsp;</td><td>A pointer to buffer provided by you to store the reply message from the server. Set this to NULL if you aren't interested in reply from server. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>inBufLen</em>&nbsp;</td><td>The size (bytes) of the above buffer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>inMsgLen</em>&nbsp;</td><td>The actual length (bytes) of message received from the server. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error. Call getStatus....() for the error. </dd></dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="UDPClientServer_8hpp-source.htm">UDPClientServer.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>POSIX Utilities Package</b></font></code> on Sat Aug 26 17:12:56 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
