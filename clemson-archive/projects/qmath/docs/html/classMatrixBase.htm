<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>QMath Matrix Library: MatrixBase&lt; T &gt; Class Template Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>MatrixBase&lt; T &gt; Class Template Reference</h1><!-- doxytag: class="MatrixBase" -->This is a pure virtual base class for <code><a class="el" href="classMatrix.htm">Matrix</a></code>.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="MatrixBase_8hpp-source.htm">MatrixBase.hpp</a>&gt;</code>
<p>
<p>Inheritance diagram for MatrixBase&lt; T &gt;:
<p><center><img src="classMatrixBase.png" usemap="#MatrixBase< T >_map" border="0" alt=""></center>
<map name="MatrixBase< T >_map">
<area href="classMatrix.htm" alt="Matrix< nRows, nCols, T >" shape="rect" coords="0,56,165,80">
<area href="classMatrix.htm" alt="Matrix< 1, size, T >" shape="rect" coords="175,56,340,80">
<area href="classMatrix.htm" alt="Matrix< size, 1, T >" shape="rect" coords="350,56,515,80">
<area href="classRowVector.htm" alt="RowVector< size, T >" shape="rect" coords="175,112,340,136">
<area href="classColumnVector.htm" alt="ColumnVector< size, T >" shape="rect" coords="350,112,515,136">
<area href="classVector.htm" alt="Vector< size, T >" shape="rect" coords="350,168,515,192">
</map>
<a href="classMatrixBase-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#6d4e1b44531f52347fdb9cb6cd39bfeb">MatrixBase</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#f81fd20360f891b3dac1730303663702">~MatrixBase</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#697a99966e5933f36d9fb6b05ee8b88f">getElementsPointer</a> () const =0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#294b91db01517fa317024bddb15b2ba3">getNumRows</a> () const =0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#2fee84c748193dd52066d60cc925072c">getNumColumns</a> () const =0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#9da6b2075ff556cf1c575cc7a0684859">getElement</a> (int row, int column) const =0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#69c4d1d9631e4f3343491297bfc9b1f5">setElement</a> (int row, int column, T value)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#b8dfe404a25c32601d59143eb15128f2">operator=</a> (const <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt; &amp;m)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt; T &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#2eb51f7ac52d6ad11bc60aee399114b7">operator=</a> (const T &amp;value)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#37f012169567e29e11871a0489de3249">output</a> (std::ostream &amp;outputStream=std::cout)</td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrixBase.htm#d1f395ee454813d4962eee009889ad3c">MatrixBase</a> (const <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt; &amp;m)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<h3>template&lt;class T = double&gt;<br>
 class MatrixBase&lt; T &gt;</h3>

This is a pure virtual base class for <code><a class="el" href="classMatrix.htm">Matrix</a></code>. 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="6d4e1b44531f52347fdb9cb6cd39bfeb"></a><!-- doxytag: member="MatrixBase::MatrixBase" ref="6d4e1b44531f52347fdb9cb6cd39bfeb" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::<a class="el" href="classMatrixBase.htm">MatrixBase</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor.     </td>
  </tr>
</table>
<a class="anchor" name="f81fd20360f891b3dac1730303663702"></a><!-- doxytag: member="MatrixBase::~MatrixBase" ref="f81fd20360f891b3dac1730303663702" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::~<a class="el" href="classMatrixBase.htm">MatrixBase</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
    </td>
  </tr>
</table>
<a class="anchor" name="d1f395ee454813d4962eee009889ad3c"></a><!-- doxytag: member="MatrixBase::MatrixBase" ref="d1f395ee454813d4962eee009889ad3c" args="(const MatrixBase&lt; T &gt; &amp;m)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::<a class="el" href="classMatrixBase.htm">MatrixBase</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>m</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
    </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="697a99966e5933f36d9fb6b05ee8b88f"></a><!-- doxytag: member="MatrixBase::getElementsPointer" ref="697a99966e5933f36d9fb6b05ee8b88f" args="() const =0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T* <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::getElementsPointer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default destructor.<dl compact><dt><b>Returns:</b></dt><dd>The pointer to the first element in a matrix or vector. </dd></dl>

<p>
Implemented in <a class="el" href="classColumnVector.htm#1fb8d93b4d6c13497b2fa7250ab6d367">ColumnVector&lt; size, T &gt;</a>, <a class="el" href="classMatrix.htm#15ed828f282a27d51bc11a9499b6749e">Matrix&lt; nRows, nCols, T &gt;</a>, <a class="el" href="classRowVector.htm#ab28549dd2b603a0a7727ee3e93f8dfd">RowVector&lt; size, T &gt;</a>, <a class="el" href="classMatrix.htm#15ed828f282a27d51bc11a9499b6749e">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#15ed828f282a27d51bc11a9499b6749e">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#15ed828f282a27d51bc11a9499b6749e">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="294b91db01517fa317024bddb15b2ba3"></a><!-- doxytag: member="MatrixBase::getNumRows" ref="294b91db01517fa317024bddb15b2ba3" args="() const =0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual int <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::getNumRows           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The number of rows in the <a class="el" href="classMatrix.htm">Matrix</a>. </dd></dl>

<p>
Implemented in <a class="el" href="classMatrix.htm#0b3f0fbcb77b712b7dc29596bd75945a">Matrix&lt; nRows, nCols, T &gt;</a>, <a class="el" href="classMatrix.htm#0b3f0fbcb77b712b7dc29596bd75945a">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#0b3f0fbcb77b712b7dc29596bd75945a">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#0b3f0fbcb77b712b7dc29596bd75945a">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="2fee84c748193dd52066d60cc925072c"></a><!-- doxytag: member="MatrixBase::getNumColumns" ref="2fee84c748193dd52066d60cc925072c" args="() const =0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual int <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::getNumColumns           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The number of columns in the <a class="el" href="classMatrix.htm">Matrix</a>. </dd></dl>

<p>
Implemented in <a class="el" href="classMatrix.htm#f5a746aee68aa00f0cdbdcd1400d8c14">Matrix&lt; nRows, nCols, T &gt;</a>, <a class="el" href="classMatrix.htm#f5a746aee68aa00f0cdbdcd1400d8c14">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#f5a746aee68aa00f0cdbdcd1400d8c14">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#f5a746aee68aa00f0cdbdcd1400d8c14">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="9da6b2075ff556cf1c575cc7a0684859"></a><!-- doxytag: member="MatrixBase::getElement" ref="9da6b2075ff556cf1c575cc7a0684859" args="(int row, int column) const =0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::getElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>row</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>column</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"> const<code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The element at the specified position. </dd></dl>

<p>
Implemented in <a class="el" href="classMatrix.htm#0a7366bb9752491a8a8ae7d5c5626080">Matrix&lt; nRows, nCols, T &gt;</a>, <a class="el" href="classMatrix.htm#0a7366bb9752491a8a8ae7d5c5626080">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#0a7366bb9752491a8a8ae7d5c5626080">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#0a7366bb9752491a8a8ae7d5c5626080">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="69c4d1d9631e4f3343491297bfc9b1f5"></a><!-- doxytag: member="MatrixBase::setElement" ref="69c4d1d9631e4f3343491297bfc9b1f5" args="(int row, int column, T value)=0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual void <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::setElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>row</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>column</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>T&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets an element to a value at the specified position. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>row</em>&nbsp;</td><td>Row number of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>column</em>&nbsp;</td><td>Column number of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The desired element is set to this value. </td></tr>
  </table>
</dl>

<p>
Implemented in <a class="el" href="classMatrix.htm#ec00b50a25f4e5cb95a0b0b7e192e0bf">Matrix&lt; nRows, nCols, T &gt;</a>, <a class="el" href="classMatrix.htm#ec00b50a25f4e5cb95a0b0b7e192e0bf">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#ec00b50a25f4e5cb95a0b0b7e192e0bf">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#ec00b50a25f4e5cb95a0b0b7e192e0bf">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="b8dfe404a25c32601d59143eb15128f2"></a><!-- doxytag: member="MatrixBase::operator=" ref="b8dfe404a25c32601d59143eb15128f2" args="(const MatrixBase&lt; T &gt; &amp;m)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt;T&gt;&amp; <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>m</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Assignment operator between two <code><a class="el" href="classMatrixBase.htm">MatrixBase</a></code> types of same dimensions. 
<p>
Reimplemented in <a class="el" href="classMatrix.htm#ed665403f0f55f8212220146bec9ce89">Matrix&lt; nRows, nCols, T &gt;</a>, <a class="el" href="classMatrix.htm#ed665403f0f55f8212220146bec9ce89">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#ed665403f0f55f8212220146bec9ce89">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#ed665403f0f55f8212220146bec9ce89">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="2eb51f7ac52d6ad11bc60aee399114b7"></a><!-- doxytag: member="MatrixBase::operator=" ref="2eb51f7ac52d6ad11bc60aee399114b7" args="(const T &amp;value)=0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual <a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt;T&gt; <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const T &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Initialization of matrix. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The value to which all elements in the matrix are initialized. </td></tr>
  </table>
</dl>

<p>
Implemented in <a class="el" href="classColumnVector.htm#25bcd4c9b443769b7b07beadf8d0426e">ColumnVector&lt; size, T &gt;</a>, <a class="el" href="classMatrix.htm#05b79ba5d2b4854bc3ef6ae7b00a9c75">Matrix&lt; nRows, nCols, T &gt;</a>, <a class="el" href="classRowVector.htm#1892ceca09f69b73baceb885270ff07b">RowVector&lt; size, T &gt;</a>, <a class="el" href="classTransform.htm#e5cf18ef44b656c18a03233c0e0558d1">Transform</a>, <a class="el" href="classVector.htm#7db6221df5b3298e6ad2631dfe7d729a">Vector&lt; size, T &gt;</a>, <a class="el" href="classMatrix.htm#05b79ba5d2b4854bc3ef6ae7b00a9c75">Matrix&lt; size, 1, T &gt;</a>, <a class="el" href="classMatrix.htm#05b79ba5d2b4854bc3ef6ae7b00a9c75">Matrix&lt; 1, size, T &gt;</a>, and <a class="el" href="classMatrix.htm#05b79ba5d2b4854bc3ef6ae7b00a9c75">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="37f012169567e29e11871a0489de3249"></a><!-- doxytag: member="MatrixBase::output" ref="37f012169567e29e11871a0489de3249" args="(std::ostream &amp;outputStream=std::cout)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">void <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt;::output           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">std::ostream &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>outputStream</em> = <code>std::cout</code>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The elements in the referenced matrix to the output stream (by default the output is to the console) </dd></dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="MatrixBase_8hpp-source.htm">MatrixBase.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>QMath Matrix Library</b></font></code> on Mon Sep 11 14:52:24 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
