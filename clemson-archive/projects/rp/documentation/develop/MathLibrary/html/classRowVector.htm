<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>QMath Matrix Library: RowVector&lt; size, T &gt; Class Template Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.9.1 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>RowVector&lt; size, T &gt; Class Template Reference</h1>A class for row vectors.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="RowVector_8hpp-source.htm">RowVector.hpp</a>&gt;</code>
<p>
<p>Inheritance diagram for RowVector&lt; size, T &gt;:
<p><center><img src="classRowVector.png" usemap="#RowVector< size, T >_map" border="0" alt=""></center>
<map name="RowVector< size, T >_map">
<area href="classMatrix.htm" alt="Matrix< 1, size, T >" shape="rect" coords="0,56,136,80">
<area href="classVectorBase.htm" alt="VectorBase< T >" shape="rect" coords="146,56,282,80">
<area href="classMatrixBase.htm" alt="MatrixBase< T >" shape="rect" coords="0,0,136,24">
</map>
<a href="classRowVector-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a0">RowVector</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a1">RowVector</a> (const <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt; &amp;rowVector)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a2">RowVector</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; 1, size, T &gt; &amp;matrix)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a3">~RowVector</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a4">getElementsPointer</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a5">getElement</a> (int index) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a6">setElement</a> (int index, T value)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a7">isRowVector</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a8">getNumElements</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">T &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a9">operator()</a> (int index)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a10">operator()</a> (int index) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a11">operator=</a> (const <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt; &amp;vectorBase)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt; T &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a12">operator=</a> (const T &amp;value)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<h3>template&lt;int size, class T = double&gt;<br>
 class RowVector&lt; size, T &gt;</h3>

A class for row vectors. 
<p>
The class <code>RowVector</code> is derived from the base classes <code><a class="el" href="classMatrix.htm">Matrix</a></code> and <code><a class="el" href="classVectorBase.htm">VectorBase</a></code>, and provides methods for operations such as cross product, dot product and element-by-element multiplication.<p>
<b>Example Program: </b>See the example of the class <code><a class="el" href="classColumnVector.htm">ColumnVector</a></code>. 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="a0" doxytag="RowVector::RowVector"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::<a class="el" href="classRowVector.htm">RowVector</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor. The elements are not initialized.    </td>
  </tr>
</table>
<a class="anchor" name="a1" doxytag="RowVector::RowVector"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::<a class="el" href="classRowVector.htm">RowVector</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>rowVector</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Copy Constructor.     </td>
  </tr>
</table>
<a class="anchor" name="a2" doxytag="RowVector::RowVector"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::<a class="el" href="classRowVector.htm">RowVector</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; 1, size, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>matrix</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The conversion constructor for conversion of a <code><a class="el" href="classMatrix.htm">Matrix</a></code> type of single row into type <code>RowVector</code>.     </td>
  </tr>
</table>
<a class="anchor" name="a3" doxytag="RowVector::~RowVector"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::~<a class="el" href="classRowVector.htm">RowVector</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default destructor     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="a5" doxytag="RowVector::getElement"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::getElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>index</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The value at position specified by index (index = 1 is the first element). </dd></dl>

<p>
Implements <a class="el" href="classVectorBase.htm#a3">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a4" doxytag="RowVector::getElementsPointer"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T* <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::getElementsPointer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>A pointer to the first element in the vector. </dd></dl>

<p>
Implements <a class="el" href="classVectorBase.htm#a2">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a8" doxytag="RowVector::getNumElements"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual int <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::getNumElements           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The number of elements in the vector. </dd></dl>

<p>
Implements <a class="el" href="classVectorBase.htm#a5">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a7" doxytag="RowVector::isRowVector"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual bool <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::isRowVector           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>true </dd></dl>

<p>
Implements <a class="el" href="classVectorBase.htm#a7">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a10" doxytag="RowVector::operator()"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::operator()           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>index</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Access the element at the position specified by index.     </td>
  </tr>
</table>
<a class="anchor" name="a9" doxytag="RowVector::operator()"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T&amp; <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::operator()           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>index</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Access or assign the element at the position specified by index. For example: <div class="fragment"><pre class="fragment">    myVector(2)=12.65; 
</pre></div>    </td>
  </tr>
</table>
<a class="anchor" name="a12" doxytag="RowVector::operator="></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt;T&gt; <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const T &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Initialize a vector object. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The value to which all elements in the vector are initialized. The initialization of the vector object can also be done as a comma seperated list. For example: <div class="fragment"><pre class="fragment">    <a class="code" href="classColumnVector.htm">ColumnVector&lt;3&gt;</a> myVector;
    myVector = 67.88, 45.89, 90; 
</pre></div></td></tr>
  </table>
</dl>

<p>
Implements <a class="el" href="classVectorBase.htm#a10">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a11" doxytag="RowVector::operator="></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt;size, T&gt;&amp; <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>vectorBase</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Assign a <code><a class="el" href="classVectorBase.htm">VectorBase</a></code> type to a <code>RowVector</code> type. Both objects must have the same dimensions. 
<p>
Reimplemented from <a class="el" href="classVectorBase.htm#a9">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a6" doxytag="RowVector::setElement"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual void <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::setElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>index</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>T&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets an element to a value at the specified position. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>index</em>&nbsp;</td><td>Position of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The desired element is set to this value. </td></tr>
  </table>
</dl>

<p>
Implements <a class="el" href="classVectorBase.htm#a4">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="RowVector_8hpp-source.htm">RowVector.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>QMath Matrix Library</b></font></code> on Mon May 2 11:22:00 EDT 2005
<br>
Vilas Kumar Chitrakaran (cvilas at ces dot clemson dot edu)
</body>
</html>
