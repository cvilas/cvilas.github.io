<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>QMath Matrix Library: VectorBase&lt; T &gt; Class Template Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>VectorBase&lt; T &gt; Class Template Reference</h1><!-- doxytag: class="VectorBase" -->The pure virtual base class for <code><a class="el" href="classColumnVector.htm">ColumnVector</a></code>, <code><a class="el" href="classRowVector.htm">RowVector</a></code> and <code><a class="el" href="classVector.htm">Vector</a></code> classes.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="VectorBase_8hpp-source.htm">VectorBase.hpp</a>&gt;</code>
<p>
<p>Inheritance diagram for VectorBase&lt; T &gt;:
<p><center><img src="classVectorBase.png" usemap="#VectorBase< T >_map" border="0" alt=""></center>
<map name="VectorBase< T >_map">
<area href="classColumnVector.htm" alt="ColumnVector< size, T >" shape="rect" coords="0,56,154,80">
<area href="classRowVector.htm" alt="RowVector< size, T >" shape="rect" coords="164,56,318,80">
<area href="classVector.htm" alt="Vector< size, T >" shape="rect" coords="0,112,154,136">
</map>
<a href="classVectorBase-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVectorBase.htm#7c6c8ed8176b411636e4fa653f98a29b">VectorBase</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVectorBase.htm#f2835abe6a8ce98386c96ebdb63be5f2">~VectorBase</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVectorBase.htm#a4b541538865f78f3047602e81218572">getElementsPointer</a> () const =0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVectorBase.htm#ca55b281d62b2c0d47048585b461ef5e">getElement</a> (int i) const =0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVectorBase.htm#3f5f181627c37d72fd2b3384e4072f4c">setElement</a> (int index, T value)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVectorBase.htm#382bad4c18bca2ff98666ae8187a0654">getNumElements</a> () const =0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVectorBase.htm#a538b3378ecb84ffcf4f2932c3e2e802">norm</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVectorBase.htm#69bb4249c0f1bf59b464fb6bab1ce091">isRowVector</a> () const =0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVectorBase.htm#1e7d294bb30e884493842757079f2299">isColumnVector</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVectorBase.htm#a8cf80b8534b85864af03a4a248be7b1">operator=</a> (const <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt; &amp;vectorBase)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt; T &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVectorBase.htm#5e4218fdb2e8839eabc48c37eddbac17">operator=</a> (const T &amp;value)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVectorBase.htm#79fd10d43f4a0dca23437c34078b7ec9">output</a> (std::ostream &amp;outputStream=std::cout)</td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVectorBase.htm#adf8f70a81831229c80cff1b4a467dad">VectorBase</a> (<a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt; &amp;m)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<h3>template&lt;class T = double&gt;<br>
 class VectorBase&lt; T &gt;</h3>

The pure virtual base class for <code><a class="el" href="classColumnVector.htm">ColumnVector</a></code>, <code><a class="el" href="classRowVector.htm">RowVector</a></code> and <code><a class="el" href="classVector.htm">Vector</a></code> classes. 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="7c6c8ed8176b411636e4fa653f98a29b"></a><!-- doxytag: member="VectorBase::VectorBase" ref="7c6c8ed8176b411636e4fa653f98a29b" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt;::<a class="el" href="classVectorBase.htm">VectorBase</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor.     </td>
  </tr>
</table>
<a class="anchor" name="f2835abe6a8ce98386c96ebdb63be5f2"></a><!-- doxytag: member="VectorBase::~VectorBase" ref="f2835abe6a8ce98386c96ebdb63be5f2" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt;::~<a class="el" href="classVectorBase.htm">VectorBase</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default destructor.     </td>
  </tr>
</table>
<a class="anchor" name="adf8f70a81831229c80cff1b4a467dad"></a><!-- doxytag: member="VectorBase::VectorBase" ref="adf8f70a81831229c80cff1b4a467dad" args="(VectorBase&lt; T &gt; &amp;m)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt;::<a class="el" href="classVectorBase.htm">VectorBase</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>m</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
    </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="a4b541538865f78f3047602e81218572"></a><!-- doxytag: member="VectorBase::getElementsPointer" ref="a4b541538865f78f3047602e81218572" args="() const =0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T* <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt;::getElementsPointer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>A pointer to the first element in a vector. </dd></dl>

<p>
Implemented in <a class="el" href="classColumnVector.htm#1fb8d93b4d6c13497b2fa7250ab6d367">ColumnVector&lt; size, T &gt;</a>, and <a class="el" href="classRowVector.htm#ab28549dd2b603a0a7727ee3e93f8dfd">RowVector&lt; size, T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="ca55b281d62b2c0d47048585b461ef5e"></a><!-- doxytag: member="VectorBase::getElement" ref="ca55b281d62b2c0d47048585b461ef5e" args="(int i) const =0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt;::getElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>i</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The element at the index i. </dd></dl>

<p>
Implemented in <a class="el" href="classColumnVector.htm#9894c4055278ffb94870c807f0f10bcf">ColumnVector&lt; size, T &gt;</a>, and <a class="el" href="classRowVector.htm#c89b40aa56117193ee2129cac8562f04">RowVector&lt; size, T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="3f5f181627c37d72fd2b3384e4072f4c"></a><!-- doxytag: member="VectorBase::setElement" ref="3f5f181627c37d72fd2b3384e4072f4c" args="(int index, T value)=0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual void <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt;::setElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>index</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>T&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets an element to a value at the specified position. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>index</em>&nbsp;</td><td>Position of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The desired element is set to this value. </td></tr>
  </table>
</dl>

<p>
Implemented in <a class="el" href="classColumnVector.htm#4ac4407800e8de0783fccce91a15de1a">ColumnVector&lt; size, T &gt;</a>, and <a class="el" href="classRowVector.htm#02b627a70d0245a62a954a42b1a65ee6">RowVector&lt; size, T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="382bad4c18bca2ff98666ae8187a0654"></a><!-- doxytag: member="VectorBase::getNumElements" ref="382bad4c18bca2ff98666ae8187a0654" args="() const =0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual int <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt;::getNumElements           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The number of elements in the vector. </dd></dl>

<p>
Implemented in <a class="el" href="classColumnVector.htm#f5723f3275a78eee299f0c1c84bde2c3">ColumnVector&lt; size, T &gt;</a>, and <a class="el" href="classRowVector.htm#8d197d69cb0859b6cd62b99396bc77b9">RowVector&lt; size, T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a538b3378ecb84ffcf4f2932c3e2e802"></a><!-- doxytag: member="VectorBase::norm" ref="a538b3378ecb84ffcf4f2932c3e2e802" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt;::norm           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>2-norm of the vector. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="69bb4249c0f1bf59b464fb6bab1ce091"></a><!-- doxytag: member="VectorBase::isRowVector" ref="69bb4249c0f1bf59b464fb6bab1ce091" args="() const =0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual bool <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt;::isRowVector           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>'true' if the vector instantiated is a <code><a class="el" href="classRowVector.htm">RowVector</a></code>. </dd></dl>

<p>
Implemented in <a class="el" href="classColumnVector.htm#bd0a12f204c4cce59cc89ae3173a94a9">ColumnVector&lt; size, T &gt;</a>, and <a class="el" href="classRowVector.htm#6218b86bbca220ca16cd86f99c7036ef">RowVector&lt; size, T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="1e7d294bb30e884493842757079f2299"></a><!-- doxytag: member="VectorBase::isColumnVector" ref="1e7d294bb30e884493842757079f2299" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">bool <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt;::isColumnVector           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>'true' if the vector instantiated is a <code><a class="el" href="classColumnVector.htm">ColumnVector</a></code>. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a8cf80b8534b85864af03a4a248be7b1"></a><!-- doxytag: member="VectorBase::operator=" ref="a8cf80b8534b85864af03a4a248be7b1" args="(const VectorBase&lt; T &gt; &amp;vectorBase)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classVectorBase.htm">VectorBase</a>&lt;T&gt;&amp; <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>vectorBase</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Assignment operator between two <a class="el" href="classVectorBase.htm">VectorBase</a> types. 
<p>
Reimplemented in <a class="el" href="classColumnVector.htm#4ef0197c69f952e40d98e097ab7e0b45">ColumnVector&lt; size, T &gt;</a>, <a class="el" href="classRowVector.htm#4a2ef5061d14fa1110364d2f1dbf2657">RowVector&lt; size, T &gt;</a>, and <a class="el" href="classVector.htm#2e1515125b6c64381de5c80affa804cc">Vector&lt; size, T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="5e4218fdb2e8839eabc48c37eddbac17"></a><!-- doxytag: member="VectorBase::operator=" ref="5e4218fdb2e8839eabc48c37eddbac17" args="(const T &amp;value)=0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual <a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt;T&gt; <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const T &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Initialize a vector object. 
<p>
Implemented in <a class="el" href="classColumnVector.htm#25bcd4c9b443769b7b07beadf8d0426e">ColumnVector&lt; size, T &gt;</a>, <a class="el" href="classRowVector.htm#1892ceca09f69b73baceb885270ff07b">RowVector&lt; size, T &gt;</a>, and <a class="el" href="classVector.htm#7db6221df5b3298e6ad2631dfe7d729a">Vector&lt; size, T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="79fd10d43f4a0dca23437c34078b7ec9"></a><!-- doxytag: member="VectorBase::output" ref="79fd10d43f4a0dca23437c34078b7ec9" args="(std::ostream &amp;outputStream=std::cout)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">void <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt;::output           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">std::ostream &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>outputStream</em> = <code>std::cout</code>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The elements in the vector to the output stream (by default the output is to the console) </dd></dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="VectorBase_8hpp-source.htm">VectorBase.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>QMath Matrix Library</b></font></code> on Mon Sep 11 14:52:24 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
