<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>QMath Matrix Library: Matrix&lt; numRows, numColumns, T &gt; Class Template Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.9.1 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>Matrix&lt; numRows, numColumns, T &gt; Class Template Reference</h1>Methods for mathematical operations on matrices.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Matrix_8hpp-source.htm">Matrix.hpp</a>&gt;</code>
<p>
<p>Inheritance diagram for Matrix&lt; numRows, numColumns, T &gt;:
<p><center><img src="classMatrix.png" usemap="#Matrix< numRows, numColumns, T >_map" border="0" alt=""></center>
<map name="Matrix< numRows, numColumns, T >_map">
<area href="classMatrixBase.htm" alt="MatrixBase< T >" shape="rect" coords="0,0,220,24">
</map>
<a href="classMatrix-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a0">Matrix</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a1">Matrix</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;matrix)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a2">~Matrix</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a3">getElementsPointer</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a4">getNumRows</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a5">getNumColumns</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; numRows, T &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a6">getColumn</a> (int c) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt; numColumns, T &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a7">getRow</a> (int r) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a8">getElement</a> (int r, int c) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a9">setElement</a> (int r, int c, T val)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2">template&lt;int sr, int sc, class X&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a10">getSubMatrix</a> (int pivotRow, int pivotColumn, <a class="el" href="classMatrix.htm">Matrix</a>&lt; sr, sc, X &gt; &amp;m) const </td></tr>

<tr><td class="memTemplParams" nowrap colspan="2">template&lt;int sr, int sc, class X&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a11">setSubMatrix</a> (int pivotRow, int pivotColumn, const <a class="el" href="classMatrix.htm">Matrix</a>&lt; sr, sc, X &gt; &amp;m)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">T &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a12">operator()</a> (int r, int c)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a13">operator()</a> (int row, int column) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt; T &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a14">operator=</a> (const T &amp;val)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a15">operator=</a> (const <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt; &amp;m)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a16">operator+</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;rhs)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a17">operator-</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;rhs)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a18">operator *</a> (const T &amp;scalar)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a19">operator/</a> (const T &amp;scalar)</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="p0" doxytag="Matrix::d_element"></a>
T&nbsp;</td><td class="memItemRight" valign="bottom"><b>d_element</b> [numRows][numColumns]</td></tr>

<tr><td colspan="2"><br><h2>Friends</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#n0">operator&lt;&lt;</a> (ostream &amp;output, const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;matrix)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">istream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#n1">operator&gt;&gt;</a> (istream &amp;input, <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;matrix)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#n2">operator==</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;lhs, const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;rhs)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#n3">operator!=</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;lhs, const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;rhs)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<h3>template&lt;int numRows, int numColumns, class T = double&gt;<br>
 class Matrix&lt; numRows, numColumns, T &gt;</h3>

Methods for mathematical operations on matrices. 
<p>
The class <code>Matrix</code> is derived from its base class <code><a class="el" href="classMatrixBase.htm">MatrixBase</a></code>.<p>
This class provides common mathematical functions for matrices such as addition, multipication, division and subtraction between matrices, along with methods to get/set elements/sub-matrices. The template class also provides methods for determination of the inverse of a matrix upto 4 x 4, the transpose of a matrix and generation of unit matrices. The classes <code><a class="el" href="classColumnVector.htm">ColumnVector</a></code>, <code><a class="el" href="classRowVector.htm">RowVector</a></code> and <code><a class="el" href="classTransform.htm">Transform</a></code> are derived from this class.<p>
<b>Example Program:</b><p>
<div class="fragment"><pre class="fragment"><span class="comment">//======================================================================== </span>
<span class="comment">// Package              : The Math Library - Ex</span>
<span class="comment">// Authors              : Vilas Kumar Chitrakaran</span>
<span class="comment">// Start Date           : Wed Dec 20 11:08:28 GMT 2000</span>
<span class="comment">// Compiler             : GNU C++ 2.95.3 and above</span>
<span class="comment">// ----------------------------------------------------------------------</span>
<span class="comment">// File: Matrix.t.cpp</span>
<span class="comment">// Example program for the class Matrix.</span>
<span class="comment">//========================================================================</span>

<span class="preprocessor">#include "Matrix.hpp"</span>
<span class="preprocessor">#include "ColumnVector.hpp"</span>
<span class="preprocessor">#include "RowVector.hpp"</span> 

<span class="comment">//========================================================================</span>
<span class="comment">// This example demonstrates solving the foll. simultaneous eqns</span>
<span class="comment">// 2 * x1 + 8 * x2 + 5 * x3 = 5,</span>
<span class="comment">// 1 * x1 + 1 * x2 - 1 * x3 = -2,</span>
<span class="comment">// 1 * x1 + 2 * x2 - 1 * x3 = 2.</span>
<span class="comment">//========================================================================</span>
<span class="keywordtype">int</span> main()
{
 <a class="code" href="classMatrix.htm">Matrix&lt;3,3&gt;</a> A;
 <a class="code" href="classColumnVector.htm">ColumnVector&lt;3&gt;</a> x;
 <a class="code" href="classColumnVector.htm">ColumnVector&lt;3&gt;</a> b;
 
 <span class="comment">// Write in Ax = b form</span>
 A = 2, 8, 5,
     1, 1, 1, 
     1, 2, -1;
 b = 5, -2, 2;
 
 <span class="comment">// solve for x</span>
 x = inverse(A) * b;
 
 cout &lt;&lt; <span class="stringliteral">"solution: "</span> &lt;&lt; transpose(x) &lt;&lt; endl;
 <span class="keywordflow">return</span> 0;
}
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="a0" doxytag="Matrix::Matrix"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::<a class="el" href="classMatrix.htm">Matrix</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor for the <code>Matrix</code> object. The elements of Matrix are not initialized.    </td>
  </tr>
</table>
<a class="anchor" name="a1" doxytag="Matrix::Matrix"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::<a class="el" href="classMatrix.htm">Matrix</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>matrix</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Copy Constructor.     </td>
  </tr>
</table>
<a class="anchor" name="a2" doxytag="Matrix::~Matrix"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::~<a class="el" href="classMatrix.htm">Matrix</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default destructor of the <code>Matrix</code> object.    </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="a6" doxytag="Matrix::getColumn"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt;numRows, T&gt; <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::getColumn           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>c</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The column specified by <em>c</em>. Example: <div class="fragment"><pre class="fragment">    <a class="code" href="classColumnVector.htm">ColumnVector&lt;3&gt;</a> c;
    <a class="code" href="classMatrix.htm">Matrix&lt;3,3&gt;</a> m;
    c = m.<a class="code" href="classMatrix.htm#a6">getColumn</a>(1); <span class="comment">// extract first column</span>
</pre></div></dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a8" doxytag="Matrix::getElement"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::getElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>r</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>c</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
returns the element at the specified position. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>Row number of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>c</em>&nbsp;</td><td>Column number of the desired element. </td></tr>
  </table>
</dl>

<p>
Implements <a class="el" href="classMatrixBase.htm#a5">MatrixBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a3" doxytag="Matrix::getElementsPointer"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T* <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::getElementsPointer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The pointer to the first element in the Matrix.</dd></dl>

<p>
Implements <a class="el" href="classMatrixBase.htm#a2">MatrixBase&lt; T &gt;</a>.
<p>
Reimplemented in <a class="el" href="classColumnVector.htm#a5">ColumnVector&lt; size, T &gt;</a>, and <a class="el" href="classRowVector.htm#a4">RowVector&lt; size, T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a5" doxytag="Matrix::getNumColumns"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual int <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::getNumColumns           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The number of columns in the Matrix.</dd></dl>

<p>
Implements <a class="el" href="classMatrixBase.htm#a4">MatrixBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a4" doxytag="Matrix::getNumRows"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual int <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::getNumRows           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The number of rows in the Matrix. </dd></dl>

<p>
Implements <a class="el" href="classMatrixBase.htm#a3">MatrixBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a7" doxytag="Matrix::getRow"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt;numColumns, T&gt; <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::getRow           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>r</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The row specified by <em>r</em>. Example: see <a class="el" href="classMatrix.htm#a6">getColumn()</a> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a10" doxytag="Matrix::getSubMatrix"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" colspan="4">
template&lt;int sr, int sc, class X&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">void <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::getSubMatrix           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>pivotRow</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>pivotColumn</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap><a class="el" href="classMatrix.htm">Matrix</a>&lt; sr, sc, X &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>m</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function extracts a sub-matrix of the size of <em>m</em> (sr x sc) starting from the specified pivotal row and column (that defines the top left corner of sub matrix). <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pivotRow,pivotColumn</em>&nbsp;</td><td>The position of the first element of the sub-matrix in the matrix from which it is extracted. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>m</em>&nbsp;</td><td>The extracted sub matrix. Example: <div class="fragment"><pre class="fragment">    <a class="code" href="classMatrix.htm">Matrix&lt;2,2&gt;</a> s;
    <a class="code" href="classMatrix.htm">Matrix&lt;4,4&gt;</a> m;
    <span class="comment">//extract s = [m(1,3), m(1,4); m(2,3), m(2,4)]</span>
    m.<a class="code" href="classMatrix.htm#a10">getSubMatrix</a>(1,3,s); 
</pre></div></td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a18" doxytag="Matrix::operator *"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a> <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::operator *           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const T &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>scalar</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Post-multiplication of a matrix with a scalar. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>scalar</em>&nbsp;</td><td>The scalar value to be multiplied with the matrix. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>The product of <em>scalar</em> and the matrix. Example: <div class="fragment"><pre class="fragment">    <span class="keywordtype">double</span> s;
    <a class="code" href="classMatrix.htm">Matrix&lt;3,2&gt;</a> m1, m2;
    m1 = m2 * s; 
</pre></div></dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a13" doxytag="Matrix::operator()"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::operator()           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>row</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>column</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Access the element at <em>r</em> row and <em>c</em> column of the matrix. Example: <div class="fragment"><pre class="fragment"> cout &lt;&lt; myMatrix(2,3); 
</pre></div>.     </td>
  </tr>
</table>
<a class="anchor" name="a12" doxytag="Matrix::operator()"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T&amp; <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::operator()           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>r</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>c</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Access or assign the element at <em>r</em> row and <em>c</em> column of the matrix. Example: <div class="fragment"><pre class="fragment"> myMatrix(2,3)=22.2; 
</pre></div>    </td>
  </tr>
</table>
<a class="anchor" name="a16" doxytag="Matrix::operator+"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a> <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::operator+           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>rhs</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Matrix addition operator. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>rhs</em>&nbsp;</td><td>The right hand side Matrix. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>The sum of <em>rhs</em> and the matrix to the left hand side of the addition operator. Example: <div class="fragment"><pre class="fragment">    <a class="code" href="classMatrix.htm">Matrix&lt;2,2&gt;</a> m1, m2, m3;
    m1 = m2 + m3;
</pre></div></dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a17" doxytag="Matrix::operator-"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a> <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::operator-           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>rhs</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Matrix difference operator. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>rhs</em>&nbsp;</td><td>The right hand side Matrix. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>The matrix after subtracting <em>rhs</em> matrix from the matrix on the left hand side of the difference operator. Example: see <a class="el" href="classMatrix.htm#a16">operator+()</a> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a19" doxytag="Matrix::operator/"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a> <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::operator/           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const T &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>scalar</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Division of a matrix by a scalar. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>scalar</em>&nbsp;</td><td>The scalar value to divide the Matrix with. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>The matrix with each element divided by the <em>scalar</em>. Example: <div class="fragment"><pre class="fragment">    <span class="keywordtype">double</span> s;
    <a class="code" href="classMatrix.htm">Matrix&lt;3,2&gt;</a> m1, m2;
    m1 = m2 / s; 
</pre></div></dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a15" doxytag="Matrix::operator="></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&amp; <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>m</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Assign a <em><a class="el" href="classMatrixBase.htm">MatrixBase</a></em> type to a <em>Matrix</em> type. The dimensions of both the objects must be the same. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>m</em>&nbsp;</td><td>The object of the base class <em><a class="el" href="classMatrixBase.htm">MatrixBase</a></em>. </td></tr>
  </table>
</dl>

<p>
Reimplemented from <a class="el" href="classMatrixBase.htm#a7">MatrixBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a14" doxytag="Matrix::operator="></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt;T&gt; <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const T &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>val</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Assignment operator for initializing a Matrix object. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>val</em>&nbsp;</td><td>This is the value to which all elements in the matrix are initialized. The initialization of the Matrix object can also be done as a comma seperated list. For example: <div class="fragment"><pre class="fragment"> <a class="code" href="classMatrix.htm">Matrix&lt;2,2&gt;</a> myMatrix;
    myMatrix = 67.899, 23.45, 6, 98; 
</pre></div></td></tr>
  </table>
</dl>

<p>
Implements <a class="el" href="classMatrixBase.htm#a8">MatrixBase&lt; T &gt;</a>.
<p>
Reimplemented in <a class="el" href="classColumnVector.htm#a13">ColumnVector&lt; size, T &gt;</a>, <a class="el" href="classRowVector.htm#a12">RowVector&lt; size, T &gt;</a>, <a class="el" href="classTransform.htm#a3">Transform</a>, and <a class="el" href="classVector.htm#a5">Vector&lt; size, T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a9" doxytag="Matrix::setElement"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual void <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::setElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>r</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>T&nbsp;</td>
          <td class="mdname" nowrap> <em>val</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets an element to a value at the specified position. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>Row number of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>c</em>&nbsp;</td><td>Column number of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>val</em>&nbsp;</td><td>The desired element is set to this value. </td></tr>
  </table>
</dl>

<p>
Implements <a class="el" href="classMatrixBase.htm#a6">MatrixBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a11" doxytag="Matrix::setSubMatrix"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" colspan="4">
template&lt;int sr, int sc, class X&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">void <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt;::setSubMatrix           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>pivotRow</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>pivotColumn</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const <a class="el" href="classMatrix.htm">Matrix</a>&lt; sr, sc, X &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>m</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function sets a sub-matrix of the size of <em>m</em> (sr x sc) starting from the pivotal row and column within the matrix. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pivotRow,pivotColumn</em>&nbsp;</td><td>The position of the first element of the sub-matrix in the matrix to which it is extracted. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>m</em>&nbsp;</td><td>The sub-matrix. Example: <div class="fragment"><pre class="fragment">    <a class="code" href="classMatrix.htm">Matrix&lt;2,2&gt;</a> s;
    <a class="code" href="classMatrix.htm">Matrix&lt;3,2&gt;</a> m;
    <span class="comment">//set m = [m(1,1), s(1,1), s(1,2); m(2,1), s(2,1), s(2,2)]</span>
    m.<a class="code" href="classMatrix.htm#a10">getSubMatrix</a>(1,2,s); 
</pre></div></td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<hr><h2>Friends And Related Function Documentation</h2>
<a class="anchor" name="n3" doxytag="Matrix::operator!="></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">bool operator!=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>rhs</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [friend]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>'true' if the <em>lhs</em> matrix is not the same as the <em>rhs</em> matrix, else FALSE. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="n0" doxytag="Matrix::operator<<"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">ostream&amp; operator&lt;&lt;           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">ostream &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>output</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>matrix</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [friend]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function overloads the ostream <code>&lt;&lt;</code> operator to output the elements of the matrix <em>matrix</em> row-wise to the output stream separated by white spaces(e.g. spaces). Example: <div class="fragment"><pre class="fragment"> cout &lt;&lt; matrix; 
</pre></div>    </td>
  </tr>
</table>
<a class="anchor" name="n2" doxytag="Matrix::operator=="></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">bool operator==           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const <a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>rhs</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [friend]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>'true' if the <em>lhs</em> matrix is same as the <em>rhs</em> matrix, else FALSE. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="n1" doxytag="Matrix::operator>>"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" colspan="4">
template&lt;int numRows, int numColumns, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">istream&amp; operator&gt;&gt;           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">istream &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>input</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap><a class="el" href="classMatrix.htm">Matrix</a>&lt; numRows, numColumns, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>matrix</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [friend]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function overloads the istream <code>&gt;&gt;</code> operator to read the elements of the matrix <em>matrix</em> from an input stream. The elements must be arranged row-wise in the input stream, separated by white spaces (e.g. spaces, tabs, etc). Example: <div class="fragment"><pre class="fragment"> cin &gt;&gt; matrix; 
</pre></div>    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Matrix_8hpp-source.htm">Matrix.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>QMath Matrix Library</b></font></code> on Mon May 2 11:22:00 EDT 2005
<br>
Vilas Kumar Chitrakaran (cvilas at ces dot clemson dot edu)
</body>
</html>
