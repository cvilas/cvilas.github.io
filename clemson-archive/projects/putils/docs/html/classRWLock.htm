<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>POSIX Utilities Package 2.2: RWLock Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>RWLock Class Reference</h1><!-- doxytag: class="RWLock" -->The pthread reader-writer lock.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="RWLock_8hpp-source.htm">RWLock.hpp</a>&gt;</code>
<p>
<a href="classRWLock-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRWLock.htm#d584ecc0f762d79a55672c0a280fac3e">RWLock</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRWLock.htm#7792a8f64ae32e2564aa430e7c754c75">~RWLock</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRWLock.htm#c1a8814594b39358b3fc15552903963c">readLock</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRWLock.htm#768799f11f5123bc0db34159a7fbe0ed">tryReadLock</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRWLock.htm#64b83c3c0cff22d9d3512daaeacc7bfb">writeLock</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRWLock.htm#85dea04f0d03ca3a1e0103619ac9b165">tryWriteLock</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRWLock.htm#e10f34c72f932f60868c69dfe37ea4d7">unlock</a> ()</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The pthread reader-writer lock. 
<p>
<ul>
<li>
A Reader-Writer lock allows concurrent access to multiple processes for reading shared data, but restricts writing to shared data only when no readers are present. </li>
<li>
Conversely, when a writer has access to shared data, all other writers and readers are blocked until the writer is done. </li>
<li>
This class will throw an exception of type <a class="el" href="classErrnoException.htm">ErrnoException</a> in case of errors. </li>
</ul>
<p>
<b>Example Program:</b> <div class="fragment"><pre class="fragment"><span class="comment">//==============================================================================</span>
<span class="comment">// RWLock.t.cpp - Example program for RWLock class.</span>
<span class="comment">//</span>
<span class="comment">// Author        : Vilas Kumar Chitrakaran</span>
<span class="comment">//==============================================================================</span>

<span class="preprocessor">#include "RWLock.hpp"</span>
<span class="preprocessor">#include &lt;iostream&gt;</span>
<span class="preprocessor">#include &lt;math.h&gt;</span>
<span class="preprocessor">#include &lt;stdlib.h&gt;</span>

<span class="keyword">using namespace </span>std;

<span class="comment">// A structure for checking accounts</span>
<span class="keyword">typedef</span> <span class="keyword">struct </span>
<span class="keyword"></span>{
 <span class="keywordtype">double</span> balance;
 <a class="code" href="classRWLock.htm">RWLock</a> key;
}bank_account;


<span class="comment">// My checking account</span>
bank_account myAccnt;


<span class="comment">//========================================================================  </span>
<span class="comment">// balance</span>
<span class="comment">//========================================================================  </span>
<span class="keywordtype">void</span> *balance(<span class="keywordtype">void</span> *)
{
 <span class="keywordflow">while</span>(1)
 {
  <span class="keywordflow">if</span>( myAccnt.key.tryReadLock() == -1 )
   cout &lt;&lt; <span class="stringliteral">"Account info: Busy updating"</span> &lt;&lt; endl;
  <span class="keywordflow">else</span>
  {
   cout &lt;&lt; <span class="stringliteral">"Account info: $ "</span> &lt;&lt; myAccnt.balance &lt;&lt; endl;
   myAccnt.key.unlock();
  }
 }
 <span class="keywordflow">return</span> NULL;
}


<span class="comment">//========================================================================  </span>
<span class="comment">// credit</span>
<span class="comment">//========================================================================  </span>
<span class="keywordtype">void</span> credit(<span class="keywordtype">double</span> amount)
{
 myAccnt.key.writeLock();
 myAccnt.balance += amount;
 myAccnt.key.unlock();
}


<span class="comment">//========================================================================  </span>
<span class="comment">// main function</span>
<span class="comment">//========================================================================  </span>
<span class="keywordtype">int</span> main()
{
 <span class="keywordtype">double</span> amnt;
 pthread_t threadId;
 pthread_create(&amp;threadId, NULL, balance, NULL);
 <span class="keywordflow">while</span>(1)
 {
  amnt = 10.0 * (rand()/(double)RAND_MAX - 0.5);
  credit(amnt);
 }
 <span class="keywordflow">return</span> 0;
}

</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="d584ecc0f762d79a55672c0a280fac3e"></a><!-- doxytag: member="RWLock::RWLock" ref="d584ecc0f762d79a55672c0a280fac3e" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">RWLock::RWLock           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Constructor initializes the lock.     </td>
  </tr>
</table>
<a class="anchor" name="7792a8f64ae32e2564aa430e7c754c75"></a><!-- doxytag: member="RWLock::~RWLock" ref="7792a8f64ae32e2564aa430e7c754c75" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">RWLock::~RWLock           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Destroys the lock.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="c1a8814594b39358b3fc15552903963c"></a><!-- doxytag: member="RWLock::readLock" ref="c1a8814594b39358b3fc15552903963c" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void RWLock::readLock           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Acquire the shared lock for read access. If the lock is not available, block until it is.     </td>
  </tr>
</table>
<a class="anchor" name="768799f11f5123bc0db34159a7fbe0ed"></a><!-- doxytag: member="RWLock::tryReadLock" ref="768799f11f5123bc0db34159a7fbe0ed" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int RWLock::tryReadLock           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Try to acquire the shared lock for read access. If the lock is not available, return immediately. <dl compact><dt><b>Returns:</b></dt><dd>0 on successful acquisition of lock, else -1 </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="85dea04f0d03ca3a1e0103619ac9b165"></a><!-- doxytag: member="RWLock::tryWriteLock" ref="85dea04f0d03ca3a1e0103619ac9b165" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int RWLock::tryWriteLock           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Try to acquire the shared lock for exclusive write access. If the lock is not available, return immediately. <dl compact><dt><b>Returns:</b></dt><dd>0 on successful acquisition of lock, else -1 </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="e10f34c72f932f60868c69dfe37ea4d7"></a><!-- doxytag: member="RWLock::unlock" ref="e10f34c72f932f60868c69dfe37ea4d7" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void RWLock::unlock           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Unlock the shared lock. If the calling thread doesn't own the lock, the behavior of this function is undefined.     </td>
  </tr>
</table>
<a class="anchor" name="64b83c3c0cff22d9d3512daaeacc7bfb"></a><!-- doxytag: member="RWLock::writeLock" ref="64b83c3c0cff22d9d3512daaeacc7bfb" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void RWLock::writeLock           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Acquire the shared lock for exclusive write access. If the lock is not available, block until it is.     </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="RWLock_8hpp-source.htm">RWLock.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>POSIX Utilities Package</b></font></code> on Sat Aug 26 17:12:56 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
