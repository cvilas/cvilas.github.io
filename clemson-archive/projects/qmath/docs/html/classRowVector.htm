<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>QMath Matrix Library: RowVector&lt; size, T &gt; Class Template Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>RowVector&lt; size, T &gt; Class Template Reference</h1><!-- doxytag: class="RowVector" --><!-- doxytag: inherits="Matrix&lt; 1, size, T &gt;,VectorBase" -->A class for row vectors.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="RowVector_8hpp-source.htm">RowVector.hpp</a>&gt;</code>
<p>
<p>Inheritance diagram for RowVector&lt; size, T &gt;:
<p><center><img src="classRowVector.png" usemap="#RowVector< size, T >_map" border="0" alt=""></center>
<map name="RowVector< size, T >_map">
<area href="classMatrix.htm" alt="Matrix< 1, size, T >" shape="rect" coords="0,56,136,80">
<area href="classVectorBase.htm" alt="VectorBase< T >" shape="rect" coords="146,56,282,80">
<area href="classMatrixBase.htm" alt="MatrixBase< T >" shape="rect" coords="0,0,136,24">
</map>
<a href="classRowVector-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#764a514b6b9a16efee56c7a3a2a25a46">RowVector</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#e91627dc7c1889f8dba8b06015910644">RowVector</a> (const <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt; &amp;rowVector)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#c94086332d896432b219ff1e6d9e784d">RowVector</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; 1, size, T &gt; &amp;matrix)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#e57ad4f21aa88677246ef4f55ee27ad9">~RowVector</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#ab28549dd2b603a0a7727ee3e93f8dfd">getElementsPointer</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#c89b40aa56117193ee2129cac8562f04">getElement</a> (int index) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#02b627a70d0245a62a954a42b1a65ee6">setElement</a> (int index, T value)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#6218b86bbca220ca16cd86f99c7036ef">isRowVector</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#8d197d69cb0859b6cd62b99396bc77b9">getNumElements</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#a9b686d887bcb79c0e89a57c658fe63d">operator()</a> (int index) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">T &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#6b3bf348e879fc21fcba7a13e443fba9">operator()</a> (int index)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#4a2ef5061d14fa1110364d2f1dbf2657">operator=</a> (const <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt; &amp;vectorBase)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt; T &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRowVector.htm#1892ceca09f69b73baceb885270ff07b">operator=</a> (const T &amp;value)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<h3>template&lt;int size, class T = double&gt;<br>
 class RowVector&lt; size, T &gt;</h3>

A class for row vectors. 
<p>
The class <code><a class="el" href="classRowVector.htm">RowVector</a></code> is derived from the base classes <code><a class="el" href="classMatrix.htm">Matrix</a></code> and <code><a class="el" href="classVectorBase.htm">VectorBase</a></code>, and provides methods for operations such as cross product, dot product and element-by-element multiplication.<p>
<b>Example Program: </b>See the example of the class <code><a class="el" href="classColumnVector.htm">ColumnVector</a></code>. 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="764a514b6b9a16efee56c7a3a2a25a46"></a><!-- doxytag: member="RowVector::RowVector" ref="764a514b6b9a16efee56c7a3a2a25a46" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::<a class="el" href="classRowVector.htm">RowVector</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor. The elements are not initialized.     </td>
  </tr>
</table>
<a class="anchor" name="e91627dc7c1889f8dba8b06015910644"></a><!-- doxytag: member="RowVector::RowVector" ref="e91627dc7c1889f8dba8b06015910644" args="(const RowVector&lt; size, T &gt; &amp;rowVector)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::<a class="el" href="classRowVector.htm">RowVector</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>rowVector</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Copy Constructor.     </td>
  </tr>
</table>
<a class="anchor" name="c94086332d896432b219ff1e6d9e784d"></a><!-- doxytag: member="RowVector::RowVector" ref="c94086332d896432b219ff1e6d9e784d" args="(const Matrix&lt; 1, size, T &gt; &amp;matrix)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::<a class="el" href="classRowVector.htm">RowVector</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; 1, size, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>matrix</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The conversion constructor for conversion of a <code><a class="el" href="classMatrix.htm">Matrix</a></code> type of single row into type <code><a class="el" href="classRowVector.htm">RowVector</a></code>.     </td>
  </tr>
</table>
<a class="anchor" name="e57ad4f21aa88677246ef4f55ee27ad9"></a><!-- doxytag: member="RowVector::~RowVector" ref="e57ad4f21aa88677246ef4f55ee27ad9" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::~<a class="el" href="classRowVector.htm">RowVector</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default destructor     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="ab28549dd2b603a0a7727ee3e93f8dfd"></a><!-- doxytag: member="RowVector::getElementsPointer" ref="ab28549dd2b603a0a7727ee3e93f8dfd" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T* <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::getElementsPointer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>A pointer to the first element in the vector. </dd></dl>

<p>
Implements <a class="el" href="classVectorBase.htm#a4b541538865f78f3047602e81218572">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="c89b40aa56117193ee2129cac8562f04"></a><!-- doxytag: member="RowVector::getElement" ref="c89b40aa56117193ee2129cac8562f04" args="(int index) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::getElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>index</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The value at position specified by index (index = 1 is the first element). </dd></dl>

<p>
Implements <a class="el" href="classVectorBase.htm#ca55b281d62b2c0d47048585b461ef5e">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="02b627a70d0245a62a954a42b1a65ee6"></a><!-- doxytag: member="RowVector::setElement" ref="02b627a70d0245a62a954a42b1a65ee6" args="(int index, T value)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual void <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::setElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>index</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>T&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets an element to a value at the specified position. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>index</em>&nbsp;</td><td>Position of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The desired element is set to this value. </td></tr>
  </table>
</dl>

<p>
Implements <a class="el" href="classVectorBase.htm#3f5f181627c37d72fd2b3384e4072f4c">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="6218b86bbca220ca16cd86f99c7036ef"></a><!-- doxytag: member="RowVector::isRowVector" ref="6218b86bbca220ca16cd86f99c7036ef" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual bool <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::isRowVector           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>true </dd></dl>

<p>
Implements <a class="el" href="classVectorBase.htm#69bb4249c0f1bf59b464fb6bab1ce091">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="8d197d69cb0859b6cd62b99396bc77b9"></a><!-- doxytag: member="RowVector::getNumElements" ref="8d197d69cb0859b6cd62b99396bc77b9" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual int <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::getNumElements           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The number of elements in the vector. </dd></dl>

<p>
Implements <a class="el" href="classVectorBase.htm#382bad4c18bca2ff98666ae8187a0654">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="a9b686d887bcb79c0e89a57c658fe63d"></a><!-- doxytag: member="RowVector::operator()" ref="a9b686d887bcb79c0e89a57c658fe63d" args="(int index) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::operator()           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>index</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
    </td>
  </tr>
</table>
<a class="anchor" name="6b3bf348e879fc21fcba7a13e443fba9"></a><!-- doxytag: member="RowVector::operator()" ref="6b3bf348e879fc21fcba7a13e443fba9" args="(int index)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T&amp; <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::operator()           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>index</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Access or assign the element at the position specified by index. For example: <div class="fragment"><pre class="fragment">    myVector(2)=12.65; 
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="4a2ef5061d14fa1110364d2f1dbf2657"></a><!-- doxytag: member="RowVector::operator=" ref="4a2ef5061d14fa1110364d2f1dbf2657" args="(const VectorBase&lt; T &gt; &amp;vectorBase)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt;size, T&gt;&amp; <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>vectorBase</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Assign a <code><a class="el" href="classVectorBase.htm">VectorBase</a></code> type to a <code><a class="el" href="classRowVector.htm">RowVector</a></code> type. Both objects must have the same dimensions. 
<p>
Reimplemented from <a class="el" href="classVectorBase.htm#a8cf80b8534b85864af03a4a248be7b1">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="1892ceca09f69b73baceb885270ff07b"></a><!-- doxytag: member="RowVector::operator=" ref="1892ceca09f69b73baceb885270ff07b" args="(const T &amp;value)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt;T&gt; <a class="el" href="classRowVector.htm">RowVector</a>&lt; size, T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const T &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Initialize a vector object. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The value to which all elements in the vector are initialized. The initialization of the vector object can also be done as a comma seperated list. For example: <div class="fragment"><pre class="fragment">    <a class="code" href="classColumnVector.htm">ColumnVector&lt;3&gt;</a> myVector;
    myVector = 67.88, 45.89, 90; 
</pre></div> </td></tr>
  </table>
</dl>

<p>
Implements <a class="el" href="classVectorBase.htm#5e4218fdb2e8839eabc48c37eddbac17">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="RowVector_8hpp-source.htm">RowVector.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>QMath Matrix Library</b></font></code> on Mon Sep 11 14:52:24 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
