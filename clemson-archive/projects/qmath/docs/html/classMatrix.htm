<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>QMath Matrix Library: Matrix&lt; nRows, nCols, T &gt; Class Template Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>Matrix&lt; nRows, nCols, T &gt; Class Template Reference</h1><!-- doxytag: class="Matrix" --><!-- doxytag: inherits="MatrixBase" -->Methods for mathematical operations on matrices.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Matrix_8hpp-source.htm">Matrix.hpp</a>&gt;</code>
<p>
<p>Inheritance diagram for Matrix&lt; nRows, nCols, T &gt;:
<p><center><img src="classMatrix.png" usemap="#Matrix< nRows, nCols, T >_map" border="0" alt=""></center>
<map name="Matrix< nRows, nCols, T >_map">
<area href="classMatrixBase.htm" alt="MatrixBase< T >" shape="rect" coords="0,0,165,24">
</map>
<a href="classMatrix-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#f81c867db5cdbf2d4a8892f6b8439f82">Matrix</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#2ccfd6df3e282a1634699ceaa80016f1">Matrix</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;matrix)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#317d03800b7573e5fe4810c3edd99522">~Matrix</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#15ed828f282a27d51bc11a9499b6749e">getElementsPointer</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#0b3f0fbcb77b712b7dc29596bd75945a">getNumRows</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#f5a746aee68aa00f0cdbdcd1400d8c14">getNumColumns</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; nRows, T &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#f0373874bcefa4c11d80e2c2ca7ce650">getColumn</a> (int c) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt; nCols, T &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#d48c4475e9ec1c71e53b61a60317b4e5">getRow</a> (int r) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#0a7366bb9752491a8a8ae7d5c5626080">getElement</a> (int r, int c) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#ec00b50a25f4e5cb95a0b0b7e192e0bf">setElement</a> (int r, int c, T val)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2">template&lt;int sr, int sc, class X&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classMatrix.htm#d2a2c2427aa4150c7349237e774ceb81">getSubMatrix</a> (int pivotRow, int pivotColumn, <a class="el" href="classMatrix.htm">Matrix</a>&lt; sr, sc, X &gt; &amp;m) const </td></tr>

<tr><td class="memTemplParams" nowrap colspan="2">template&lt;int sr, int sc, class X&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classMatrix.htm#60e9b07c96df3bd5eebb79ba0e124943">setSubMatrix</a> (int pivotRow, int pivotColumn, const <a class="el" href="classMatrix.htm">Matrix</a>&lt; sr, sc, X &gt; &amp;m)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#e6153c41f242aa4d74668f1af12c5ff4">operator()</a> (int r, int c) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">T &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#172d6dac11ecaca6d6ba9fa37e79db24">operator()</a> (int r, int c)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt; T &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#05b79ba5d2b4854bc3ef6ae7b00a9c75">operator=</a> (const T &amp;val)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#ed665403f0f55f8212220146bec9ce89">operator=</a> (const <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt; &amp;m)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#edf7eb50f3481be450845b8938f2905c">operator+=</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;rhs)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#cf59e55bb983060a84a9ff6b99f4ef77">operator-=</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;rhs)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#3e1aedce68233877ac17178e56e7aaf9">operator *=</a> (const T &amp;scalar)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#f4675ef62406c10f7947daefc0fae592">operator/=</a> (const T &amp;scalar)</td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memTemplParams" nowrap colspan="2">template&lt;int nCols, int nRows, class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&lt; nCols, nRows, T &gt;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classMatrix.htm#8e1002b73935c3285e044b67e00b2382">transpose</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;matrix)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2">template&lt;int size, class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&lt; size, size, T &gt;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classMatrix.htm#800d306b91f512c556316b182a6b7201">inverse</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; size, size, T &gt; &amp;m)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2">template&lt;int size, class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classMatrix.htm#624386f865095247d13c8282bb8db991">determinant</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; size, size, T &gt; &amp;matrix)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2">template&lt;int size, class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classMatrix.htm#55be71612a1b34484c5b39a649e84536">trace</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; size, size, T &gt; &amp;matrix)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2">template&lt;int size, class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&lt; size, size, T &gt;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classMatrix.htm#ea6c6fd8fcc3d2f32c0e0c69a9a204c4">unitMatrix</a> ()</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2">template&lt;int r1, int c1r2, int c2, class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&lt; r1, c2, T &gt;&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classMatrix.htm#a0ca1e96285323a9fc5a1f71d7872e53">operator *</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; r1, c1r2, T &gt; &amp;m1, const <a class="el" href="classMatrix.htm">Matrix</a>&lt; c1r2, c2, T &gt; &amp;m2)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2">template&lt;int c1r2, class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classMatrix.htm#c2f0b69d82c7ae5d317ef87d1a76ee8f">operator *</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; 1, c1r2, T &gt; &amp;m1, const <a class="el" href="classMatrix.htm">Matrix</a>&lt; c1r2, 1, T &gt; &amp;m2)</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#50926e7ca3f56aa0028e990e5c394a7b">d_element</a> [nRows *nCols]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#d1ca45237c389f51f63cab83b1cf0dd2">d_size</a></td></tr>

<tr><td colspan="2"><br><h2>Friends</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#de39d7fbf42f7da8a5349c66e6f34dad">operator+</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;lhs, const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;rhs)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#f45f7536c3be43377a4298c37bafbcc1">operator-</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;lhs, const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;rhs)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#79ad509dcb87dce873d631d9e82a5838">operator *</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;lhs, const T &amp;scalar)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#ca57bb6c17f5f07fa9c413badc46da11">operator *</a> (const T &amp;s, const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;rhs)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#050579bc4f30d6cb93976df3676ac830">operator/</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;lhs, const T &amp;scalar)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#b6dd207b17fa40e610a3623cb531f278">operator&lt;&lt;</a> (std::ostream &amp;output, const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;matrix)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::istream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#bed80944ebde4fafca2252aa33069c93">operator&gt;&gt;</a> (std::istream &amp;input, <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;matrix)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#e4fc9eb3282b2fbc3d432cfc1e7aa4ce">operator==</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;lhs, const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;rhs)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMatrix.htm#70bbf4ba567224d5259746b6623047d9">operator!=</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;lhs, const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;rhs)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<h3>template&lt;int nRows, int nCols, class T = double&gt;<br>
 class Matrix&lt; nRows, nCols, T &gt;</h3>

Methods for mathematical operations on matrices. 
<p>
The class <code><a class="el" href="classMatrix.htm">Matrix</a></code> is derived from its base class <code><a class="el" href="classMatrixBase.htm">MatrixBase</a></code>.<p>
This class provides common mathematical functions for matrices such as addition, multipication and subtraction between matrices, along with methods to get/set elements/sub-matrices. The template class also provides methods for determination of the inverse of a matrix upto 4 x 4, the transpose of a matrix and generation of unit matrices. The classes <code><a class="el" href="classColumnVector.htm">ColumnVector</a></code>, <code><a class="el" href="classRowVector.htm">RowVector</a></code> and <code><a class="el" href="classTransform.htm">Transform</a></code> are derived from this class.<p>
<b>Example Program:</b> <div class="fragment"><pre class="fragment"><span class="comment">//======================================================================== </span>
<span class="comment">// Package              : The Math Library - Ex</span>
<span class="comment">// Authors              : Vilas Kumar Chitrakaran</span>
<span class="comment">// Start Date   : Wed Dec 20 11:08:28 GMT 2000</span>
<span class="comment">// Compiler             : GNU C++ 2.95.3 and above</span>
<span class="comment">// ----------------------------------------------------------------------</span>
<span class="comment">// File: Matrix.t.cpp</span>
<span class="comment">// Example program for the class Matrix.</span>
<span class="comment">//========================================================================</span>

<span class="preprocessor">#include "<a class="code" href="Matrix_8hpp.htm">Matrix.hpp</a>"</span>
<span class="preprocessor">#include "<a class="code" href="ColumnVector_8hpp.htm">ColumnVector.hpp</a>"</span>
<span class="preprocessor">#include "<a class="code" href="RowVector_8hpp.htm">RowVector.hpp</a>"</span> 

<span class="keyword">using namespace </span>std;

<span class="comment">//========================================================================</span>
<span class="comment">// This example demonstrates solving the foll. simultaneous eqns</span>
<span class="comment">// 2 * x1 + 8 * x2 + 5 * x3 = 5,</span>
<span class="comment">// 1 * x1 + 1 * x2 + 1 * x3 = -2,</span>
<span class="comment">// 1 * x1 + 2 * x2 - 1 * x3 = 2.</span>
<span class="comment">//========================================================================</span>
<span class="keywordtype">int</span> main()
{
 <a class="code" href="classMatrix.htm">Matrix&lt;3,3&gt;</a> A;
 <a class="code" href="classColumnVector.htm">ColumnVector&lt;3&gt;</a> x;
 <a class="code" href="classColumnVector.htm">ColumnVector&lt;3&gt;</a> b;

 <span class="comment">// Write in Ax = b form</span>
 A = 2, 8, 5,
     1, 1, 1, 
     1, 2, -1;
 b = 5, -2, 2;
 
 <span class="comment">// solve for x</span>
 x = <a class="code" href="classMatrix.htm#800d306b91f512c556316b182a6b7201">inverse</a>(A) * b;
 cout &lt;&lt; <span class="stringliteral">"solution: "</span> &lt;&lt; <a class="code" href="classMatrix.htm#8e1002b73935c3285e044b67e00b2382">transpose</a>(x) &lt;&lt; endl;

 <span class="keywordflow">return</span> 0;
}
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="f81c867db5cdbf2d4a8892f6b8439f82"></a><!-- doxytag: member="Matrix::Matrix" ref="f81c867db5cdbf2d4a8892f6b8439f82" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::<a class="el" href="classMatrix.htm">Matrix</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
    </td>
  </tr>
</table>
<a class="anchor" name="2ccfd6df3e282a1634699ceaa80016f1"></a><!-- doxytag: member="Matrix::Matrix" ref="2ccfd6df3e282a1634699ceaa80016f1" args="(const Matrix&lt; nRows, nCols, T &gt; &amp;matrix)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::<a class="el" href="classMatrix.htm">Matrix</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>matrix</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor for the <code><a class="el" href="classMatrix.htm">Matrix</a></code> object. The elements of <a class="el" href="classMatrix.htm">Matrix</a> are not initialized. Copy Constructor.     </td>
  </tr>
</table>
<a class="anchor" name="317d03800b7573e5fe4810c3edd99522"></a><!-- doxytag: member="Matrix::~Matrix" ref="317d03800b7573e5fe4810c3edd99522" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::~<a class="el" href="classMatrix.htm">Matrix</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default destructor of the <code><a class="el" href="classMatrix.htm">Matrix</a></code> object.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="15ed828f282a27d51bc11a9499b6749e"></a><!-- doxytag: member="Matrix::getElementsPointer" ref="15ed828f282a27d51bc11a9499b6749e" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T* <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::getElementsPointer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The pointer to the first element in the <a class="el" href="classMatrix.htm">Matrix</a>. </dd></dl>

<p>
Implements <a class="el" href="classMatrixBase.htm#697a99966e5933f36d9fb6b05ee8b88f">MatrixBase&lt; T &gt;</a>.
<p>
Reimplemented in <a class="el" href="classColumnVector.htm#1fb8d93b4d6c13497b2fa7250ab6d367">ColumnVector&lt; size, T &gt;</a>, and <a class="el" href="classRowVector.htm#ab28549dd2b603a0a7727ee3e93f8dfd">RowVector&lt; size, T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="0b3f0fbcb77b712b7dc29596bd75945a"></a><!-- doxytag: member="Matrix::getNumRows" ref="0b3f0fbcb77b712b7dc29596bd75945a" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual int <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::getNumRows           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The number of rows in the <a class="el" href="classMatrix.htm">Matrix</a>. </dd></dl>

<p>
Implements <a class="el" href="classMatrixBase.htm#294b91db01517fa317024bddb15b2ba3">MatrixBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="f5a746aee68aa00f0cdbdcd1400d8c14"></a><!-- doxytag: member="Matrix::getNumColumns" ref="f5a746aee68aa00f0cdbdcd1400d8c14" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual int <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::getNumColumns           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The number of columns in the <a class="el" href="classMatrix.htm">Matrix</a>. </dd></dl>

<p>
Implements <a class="el" href="classMatrixBase.htm#2fee84c748193dd52066d60cc925072c">MatrixBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="f0373874bcefa4c11d80e2c2ca7ce650"></a><!-- doxytag: member="Matrix::getColumn" ref="f0373874bcefa4c11d80e2c2ca7ce650" args="(int c) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt;nRows, T&gt; <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::getColumn           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>c</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The column specified by <em>c</em>. Example: <div class="fragment"><pre class="fragment">    <a class="code" href="classColumnVector.htm">ColumnVector&lt;3&gt;</a> c;
    <a class="code" href="classMatrix.htm">Matrix&lt;3,3&gt;</a> m;
    c = m.<a class="code" href="classMatrix.htm#f0373874bcefa4c11d80e2c2ca7ce650">getColumn</a>(1); <span class="comment">// extract first column</span>
</pre></div> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="d48c4475e9ec1c71e53b61a60317b4e5"></a><!-- doxytag: member="Matrix::getRow" ref="d48c4475e9ec1c71e53b61a60317b4e5" args="(int r) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classRowVector.htm">RowVector</a>&lt;nCols, T&gt; <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::getRow           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>r</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The row specified by <em>r</em>. Example: see <a class="el" href="classMatrix.htm#f0373874bcefa4c11d80e2c2ca7ce650">getColumn()</a> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="0a7366bb9752491a8a8ae7d5c5626080"></a><!-- doxytag: member="Matrix::getElement" ref="0a7366bb9752491a8a8ae7d5c5626080" args="(int r, int c) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::getElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>r</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>c</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
returns the element at the specified position. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>Row number of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>c</em>&nbsp;</td><td>Column number of the desired element. </td></tr>
  </table>
</dl>

<p>
Implements <a class="el" href="classMatrixBase.htm#9da6b2075ff556cf1c575cc7a0684859">MatrixBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="ec00b50a25f4e5cb95a0b0b7e192e0bf"></a><!-- doxytag: member="Matrix::setElement" ref="ec00b50a25f4e5cb95a0b0b7e192e0bf" args="(int r, int c, T val)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual void <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::setElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>r</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>T&nbsp;</td>
          <td class="mdname" nowrap> <em>val</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets an element to a value at the specified position. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>r</em>&nbsp;</td><td>Row number of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>c</em>&nbsp;</td><td>Column number of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>val</em>&nbsp;</td><td>The desired element is set to this value. </td></tr>
  </table>
</dl>

<p>
Implements <a class="el" href="classMatrixBase.htm#69c4d1d9631e4f3343491297bfc9b1f5">MatrixBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="d2a2c2427aa4150c7349237e774ceb81"></a><!-- doxytag: member="Matrix::getSubMatrix" ref="d2a2c2427aa4150c7349237e774ceb81" args="(int pivotRow, int pivotColumn, Matrix&lt; sr, sc, X &gt; &amp;m) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int sr, int sc, class X&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">void <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::getSubMatrix           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>pivotRow</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>pivotColumn</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap><a class="el" href="classMatrix.htm">Matrix</a>&lt; sr, sc, X &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>m</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function extracts a sub-matrix of the size of <em>m</em> (sr x sc) starting from the specified pivotal row and column (that defines the top left corner of sub matrix). <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pivotRow,pivotColumn</em>&nbsp;</td><td>The position of the first element of the sub-matrix in the matrix from which it is extracted. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>m</em>&nbsp;</td><td>The extracted sub matrix. Example: <div class="fragment"><pre class="fragment">    <a class="code" href="classMatrix.htm">Matrix&lt;2,2&gt;</a> s;
    <a class="code" href="classMatrix.htm">Matrix&lt;4,4&gt;</a> m;
    <span class="comment">//extract s = [m(1,3), m(1,4); m(2,3), m(2,4)]</span>
    m.<a class="code" href="classMatrix.htm#d2a2c2427aa4150c7349237e774ceb81">getSubMatrix</a>(1,3,s); 
</pre></div> </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="60e9b07c96df3bd5eebb79ba0e124943"></a><!-- doxytag: member="Matrix::setSubMatrix" ref="60e9b07c96df3bd5eebb79ba0e124943" args="(int pivotRow, int pivotColumn, const Matrix&lt; sr, sc, X &gt; &amp;m)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int sr, int sc, class X&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">void <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::setSubMatrix           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>pivotRow</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>pivotColumn</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const <a class="el" href="classMatrix.htm">Matrix</a>&lt; sr, sc, X &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>m</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function sets a sub-matrix of the size of <em>m</em> (sr x sc) starting from the pivotal row and column within the matrix. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pivotRow,pivotColumn</em>&nbsp;</td><td>The position of the first element of the sub-matrix in the matrix to which it is extracted. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>m</em>&nbsp;</td><td>The sub-matrix. Example: <div class="fragment"><pre class="fragment">    <a class="code" href="classMatrix.htm">Matrix&lt;2,2&gt;</a> s;
    <a class="code" href="classMatrix.htm">Matrix&lt;3,2&gt;</a> m;
    <span class="comment">//set m = [m(1,1), s(1,1), s(1,2); m(2,1), s(2,1), s(2,2)]</span>
    m.<a class="code" href="classMatrix.htm#d2a2c2427aa4150c7349237e774ceb81">getSubMatrix</a>(1,2,s); 
</pre></div> </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="e6153c41f242aa4d74668f1af12c5ff4"></a><!-- doxytag: member="Matrix::operator()" ref="e6153c41f242aa4d74668f1af12c5ff4" args="(int r, int c) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::operator()           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>r</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>c</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
    </td>
  </tr>
</table>
<a class="anchor" name="172d6dac11ecaca6d6ba9fa37e79db24"></a><!-- doxytag: member="Matrix::operator()" ref="172d6dac11ecaca6d6ba9fa37e79db24" args="(int r, int c)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T&amp; <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::operator()           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>r</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>c</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Access or assign the element at <em>r</em> row and <em>c</em> column of the matrix. Example:<div class="fragment"><pre class="fragment"> myMatrix(2,3)=22.2; 
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="05b79ba5d2b4854bc3ef6ae7b00a9c75"></a><!-- doxytag: member="Matrix::operator=" ref="05b79ba5d2b4854bc3ef6ae7b00a9c75" args="(const T &amp;val)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt;T&gt; <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const T &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>val</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Assignment operator for initializing a <a class="el" href="classMatrix.htm">Matrix</a> object. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>val</em>&nbsp;</td><td>This is the value to which all elements in the matrix are initialized. The initialization of the <a class="el" href="classMatrix.htm">Matrix</a> object can also be done as a comma seperated list. For example: <div class="fragment"><pre class="fragment"> <a class="code" href="classMatrix.htm">Matrix&lt;2,2&gt;</a> myMatrix;
    myMatrix = 67.899, 23.45, 6, 98; 
</pre></div> </td></tr>
  </table>
</dl>

<p>
Implements <a class="el" href="classMatrixBase.htm#2eb51f7ac52d6ad11bc60aee399114b7">MatrixBase&lt; T &gt;</a>.
<p>
Reimplemented in <a class="el" href="classColumnVector.htm#25bcd4c9b443769b7b07beadf8d0426e">ColumnVector&lt; size, T &gt;</a>, <a class="el" href="classRowVector.htm#1892ceca09f69b73baceb885270ff07b">RowVector&lt; size, T &gt;</a>, <a class="el" href="classTransform.htm#e5cf18ef44b656c18a03233c0e0558d1">Transform</a>, and <a class="el" href="classVector.htm#7db6221df5b3298e6ad2631dfe7d729a">Vector&lt; size, T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="ed665403f0f55f8212220146bec9ce89"></a><!-- doxytag: member="Matrix::operator=" ref="ed665403f0f55f8212220146bec9ce89" args="(const MatrixBase&lt; T &gt; &amp;m)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&amp; <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrixBase.htm">MatrixBase</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>m</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Assign a <em><a class="el" href="classMatrixBase.htm">MatrixBase</a></em> type to a <em><a class="el" href="classMatrix.htm">Matrix</a></em> type. The dimensions of both the objects must be the same. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>m</em>&nbsp;</td><td>The object of the base class <em><a class="el" href="classMatrixBase.htm">MatrixBase</a></em>. </td></tr>
  </table>
</dl>

<p>
Reimplemented from <a class="el" href="classMatrixBase.htm#b8dfe404a25c32601d59143eb15128f2">MatrixBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="edf7eb50f3481be450845b8938f2905c"></a><!-- doxytag: member="Matrix::operator+=" ref="edf7eb50f3481be450845b8938f2905c" args="(const Matrix&lt; nRows, nCols, T &gt; &amp;rhs)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&amp; <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::operator+=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>rhs</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<a class="el" href="classMatrix.htm">Matrix</a> addition and assignment operator. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>rhs</em>&nbsp;</td><td>The right hand side <a class="el" href="classMatrix.htm">Matrix</a>. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Assign matrix to the sum of itself and <em>rhs</em> matrix. Example: <div class="fragment"><pre class="fragment">    <a class="code" href="classMatrix.htm">Matrix&lt;2,2&gt;</a> m1, m2;
    m1 += m2;
</pre></div> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="cf59e55bb983060a84a9ff6b99f4ef77"></a><!-- doxytag: member="Matrix::operator-=" ref="cf59e55bb983060a84a9ff6b99f4ef77" args="(const Matrix&lt; nRows, nCols, T &gt; &amp;rhs)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&amp; <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::operator-=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>rhs</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<a class="el" href="classMatrix.htm">Matrix</a> subtraction and assignment operator. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>rhs</em>&nbsp;</td><td>The right hand side <a class="el" href="classMatrix.htm">Matrix</a>. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Assign matrix to the difference of itself and <em>rhs</em> matrix. Example: <div class="fragment"><pre class="fragment">    <a class="code" href="classMatrix.htm">Matrix&lt;2,2&gt;</a> m1, m2;
    m1 -= m2;
</pre></div> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="3e1aedce68233877ac17178e56e7aaf9"></a><!-- doxytag: member="Matrix::operator *=" ref="3e1aedce68233877ac17178e56e7aaf9" args="(const T &amp;scalar)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&amp; <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::operator *=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const T &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>scalar</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<a class="el" href="classMatrix.htm">Matrix</a> product with scalar and assignment operator. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>scalar</em>&nbsp;</td><td>The scalar value to be multiplied with the matrix. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Assign matrix to the product of itself and <em>scalar</em>. Example: <div class="fragment"><pre class="fragment">    <a class="code" href="classMatrix.htm">Matrix&lt;2,2&gt;</a> m1;
    <span class="keywordtype">double</span> s;
    m1 *= s;
</pre></div> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="f4675ef62406c10f7947daefc0fae592"></a><!-- doxytag: member="Matrix::operator/=" ref="f4675ef62406c10f7947daefc0fae592" args="(const T &amp;scalar)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&amp; <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::operator/=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const T &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>scalar</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<a class="el" href="classMatrix.htm">Matrix</a> division with scalar and assignment operator. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>scalar</em>&nbsp;</td><td>The scalar value to divide the matrix by. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Assign matrix to the product of itself and <em>scalar</em>. Example: <div class="fragment"><pre class="fragment">    <a class="code" href="classMatrix.htm">Matrix&lt;2,2&gt;</a> m1;
    <span class="keywordtype">double</span> s;
    m1 /= s;
</pre></div> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="8e1002b73935c3285e044b67e00b2382"></a><!-- doxytag: member="Matrix::transpose" ref="8e1002b73935c3285e044b67e00b2382" args="(const Matrix&lt; nRows, nCols, T &gt; &amp;matrix)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nCols, int nRows, class T&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&lt;nCols, nRows, T&gt; <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::transpose           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>matrix</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Additional template functions<dl compact><dt><b>Returns:</b></dt><dd>The transpose of the matrix <em>matrix</em>. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="800d306b91f512c556316b182a6b7201"></a><!-- doxytag: member="Matrix::inverse" ref="800d306b91f512c556316b182a6b7201" args="(const Matrix&lt; size, size, T &gt; &amp;m)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&lt;size, size, T&gt; <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::inverse           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; size, size, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>m</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Inverse of a square matrix <em>m</em>. This function can be used to compute inverses of matrices of size 2x2, 3x3, 4x4, 6x6, and 8x8. This library does not support inverse operation on matrices of any other dimensions. <dl compact><dt><b>Returns:</b></dt><dd>inverse of the matrix m. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="624386f865095247d13c8282bb8db991"></a><!-- doxytag: member="Matrix::determinant" ref="624386f865095247d13c8282bb8db991" args="(const Matrix&lt; size, size, T &gt; &amp;matrix)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::determinant           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; size, size, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>matrix</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>Determinant of a matrix. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="55be71612a1b34484c5b39a649e84536"></a><!-- doxytag: member="Matrix::trace" ref="55be71612a1b34484c5b39a649e84536" args="(const Matrix&lt; size, size, T &gt; &amp;matrix)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::trace           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; size, size, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>matrix</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>Trace of a size x size matrix. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ea6c6fd8fcc3d2f32c0e0c69a9a204c4"></a><!-- doxytag: member="Matrix::unitMatrix" ref="ea6c6fd8fcc3d2f32c0e0c69a9a204c4" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&lt;size, size, T&gt; <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::unitMatrix           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Generate a unit matrix of size x size. Example:<div class="fragment"><pre class="fragment"> <a class="code" href="classMatrix.htm">Matrix&lt;3,3&gt;</a> A;
  A=unitMatrix&lt;3&gt;(); 
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a0ca1e96285323a9fc5a1f71d7872e53"></a><!-- doxytag: member="Matrix::operator *" ref="a0ca1e96285323a9fc5a1f71d7872e53" args="(const Matrix&lt; r1, c1r2, T &gt; &amp;m1, const Matrix&lt; c1r2, c2, T &gt; &amp;m2)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int r1, int c1r2, int c2, class T&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a>&lt;r1, c2, T&gt; <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::operator *           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; r1, c1r2, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>m1</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const <a class="el" href="classMatrix.htm">Matrix</a>&lt; c1r2, c2, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>m2</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<a class="el" href="classMatrix.htm">Matrix</a> multiplication. <dl compact><dt><b>Returns:</b></dt><dd>The product of <em>m1</em> and <em>m2</em>. Example: <div class="fragment"><pre class="fragment">  <a class="code" href="classMatrix.htm">Matrix&lt;3,2&gt;</a> m1, m2, m3;
  m1 = m2 * m3; 
</pre></div> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="c2f0b69d82c7ae5d317ef87d1a76ee8f"></a><!-- doxytag: member="Matrix::operator *" ref="c2f0b69d82c7ae5d317ef87d1a76ee8f" args="(const Matrix&lt; 1, c1r2, T &gt; &amp;m1, const Matrix&lt; c1r2, 1, T &gt; &amp;m2)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int c1r2, class T&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::operator *           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; 1, c1r2, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>m1</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const <a class="el" href="classMatrix.htm">Matrix</a>&lt; c1r2, 1, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>m2</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [protected]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Multiplication between a row <a class="el" href="classMatrix.htm">Matrix</a> object and a column <a class="el" href="classMatrix.htm">Matrix</a>. <dl compact><dt><b>Returns:</b></dt><dd>The scalar product of row matrix <em>m1</em> and column matrix <em>m2</em>. </dd></dl>
    </td>
  </tr>
</table>
<hr><h2>Friends And Related Function Documentation</h2>
<a class="anchor" name="de39d7fbf42f7da8a5349c66e6f34dad"></a><!-- doxytag: member="Matrix::operator+" ref="de39d7fbf42f7da8a5349c66e6f34dad" args="(const Matrix&lt; nRows, nCols, T &gt; &amp;lhs, const Matrix&lt; nRows, nCols, T &gt; &amp;rhs)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a> operator+           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>rhs</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [friend]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<a class="el" href="classMatrix.htm">Matrix</a> addition operator. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>lhs</em>&nbsp;</td><td>Left hand side matrix </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rhs</em>&nbsp;</td><td>The right hand side <a class="el" href="classMatrix.htm">Matrix</a>. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>The sum of <em>rhs</em> and the matrix to the left hand side of the addition operator. Example: <div class="fragment"><pre class="fragment">    <a class="code" href="classMatrix.htm">Matrix&lt;2,2&gt;</a> m1, m2, m3;
    m1 = m2 + m3;
</pre></div> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="f45f7536c3be43377a4298c37bafbcc1"></a><!-- doxytag: member="Matrix::operator-" ref="f45f7536c3be43377a4298c37bafbcc1" args="(const Matrix&lt; nRows, nCols, T &gt; &amp;lhs, const Matrix&lt; nRows, nCols, T &gt; &amp;rhs)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a> operator-           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>rhs</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [friend]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<a class="el" href="classMatrix.htm">Matrix</a> difference operator. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>lhs</em>&nbsp;</td><td>Left hand side matrix </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rhs</em>&nbsp;</td><td>The right hand side <a class="el" href="classMatrix.htm">Matrix</a>. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>The matrix after subtracting <em>rhs</em> matrix from the matrix on the left hand side of the difference operator. Example: see <a class="el" href="classMatrix.htm#de39d7fbf42f7da8a5349c66e6f34dad">operator+()</a> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="79ad509dcb87dce873d631d9e82a5838"></a><!-- doxytag: member="Matrix::operator *" ref="79ad509dcb87dce873d631d9e82a5838" args="(const Matrix&lt; nRows, nCols, T &gt; &amp;lhs, const T &amp;scalar)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a> operator *           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const T &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>scalar</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [friend]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Post-multiplication of a matrix with a scalar. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>lhs</em>&nbsp;</td><td>Left hand side matrix </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>scalar</em>&nbsp;</td><td>The scalar value to be multiplied with the matrix. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>The product of <em>scalar</em> and the matrix. Example: <div class="fragment"><pre class="fragment">    <span class="keywordtype">double</span> s;
    <a class="code" href="classMatrix.htm">Matrix&lt;3,2&gt;</a> m1, m2;
    m1 = m2 * s; 
</pre></div> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ca57bb6c17f5f07fa9c413badc46da11"></a><!-- doxytag: member="Matrix::operator *" ref="ca57bb6c17f5f07fa9c413badc46da11" args="(const T &amp;s, const Matrix&lt; nRows, nCols, T &gt; &amp;rhs)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a> operator *           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const T &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>s</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>rhs</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [friend]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Pre-multiplication of a matrix with scalar. <dl compact><dt><b>Returns:</b></dt><dd>The product of <em>scalar</em> and <em>matrix</em>. Example: <div class="fragment"><pre class="fragment">    <span class="keywordtype">double</span> s;
    <a class="code" href="classMatrix.htm">Matrix&lt;3,2&gt;</a> m1, m2;
    m1 = s * m2; 
</pre></div> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="050579bc4f30d6cb93976df3676ac830"></a><!-- doxytag: member="Matrix::operator/" ref="050579bc4f30d6cb93976df3676ac830" args="(const Matrix&lt; nRows, nCols, T &gt; &amp;lhs, const T &amp;scalar)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrix.htm">Matrix</a> operator/           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const T &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>scalar</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [friend]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Division of a matrix by a scalar. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>lhs</em>&nbsp;</td><td>Left hand side matrix </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>scalar</em>&nbsp;</td><td>The scalar value to divide the <a class="el" href="classMatrix.htm">Matrix</a> by. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>The matrix with each element divided by the <em>scalar</em>. Example: <div class="fragment"><pre class="fragment">    <span class="keywordtype">double</span> s;
    <a class="code" href="classMatrix.htm">Matrix&lt;3,2&gt;</a> m1, m2;
    m1 = m2 / s; 
</pre></div> </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="b6dd207b17fa40e610a3623cb531f278"></a><!-- doxytag: member="Matrix::operator&lt;&lt;" ref="b6dd207b17fa40e610a3623cb531f278" args="(std::ostream &amp;output, const Matrix&lt; nRows, nCols, T &gt; &amp;matrix)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">std::ostream&amp; operator&lt;&lt;           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">std::ostream &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>output</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>matrix</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [friend]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function overloads the ostream <code>&lt;&lt;</code> operator to output the elements of the matrix <em>matrix</em> row-wise to the output stream separated by white spaces(e.g. spaces). Example:<div class="fragment"><pre class="fragment"> cout &lt;&lt; matrix; 
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="bed80944ebde4fafca2252aa33069c93"></a><!-- doxytag: member="Matrix::operator&gt;&gt;" ref="bed80944ebde4fafca2252aa33069c93" args="(std::istream &amp;input, Matrix&lt; nRows, nCols, T &gt; &amp;matrix)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">std::istream&amp; operator&gt;&gt;           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">std::istream &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>input</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap><a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>matrix</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [friend]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function overloads the istream <code>&gt;&gt;</code> operator to read the elements of the matrix <em>matrix</em> from an input stream. The elements must be arranged row-wise in the input stream, separated by white spaces (e.g. spaces, tabs, etc). Example:<div class="fragment"><pre class="fragment"> cin &gt;&gt; matrix; 
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="e4fc9eb3282b2fbc3d432cfc1e7aa4ce"></a><!-- doxytag: member="Matrix::operator==" ref="e4fc9eb3282b2fbc3d432cfc1e7aa4ce" args="(const Matrix&lt; nRows, nCols, T &gt; &amp;lhs, const Matrix&lt; nRows, nCols, T &gt; &amp;rhs)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">bool operator==           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>rhs</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [friend]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>'true' if the <em>lhs</em> matrix is same as the <em>rhs</em> matrix, else FALSE. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="70bbf4ba567224d5259746b6623047d9"></a><!-- doxytag: member="Matrix::operator!=" ref="70bbf4ba567224d5259746b6623047d9" args="(const Matrix&lt; nRows, nCols, T &gt; &amp;lhs, const Matrix&lt; nRows, nCols, T &gt; &amp;rhs)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">bool operator!=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt; &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>rhs</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [friend]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>'true' if the <em>lhs</em> matrix is not the same as the <em>rhs</em> matrix, else FALSE. </dd></dl>
    </td>
  </tr>
</table>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="50926e7ca3f56aa0028e990e5c394a7b"></a><!-- doxytag: member="Matrix::d_element" ref="50926e7ca3f56aa0028e990e5c394a7b" args="[nRows *nCols]" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::<a class="el" href="classMatrix.htm#50926e7ca3f56aa0028e990e5c394a7b">d_element</a>[nRows *nCols]<code> [protected]</code>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
    </td>
  </tr>
</table>
<a class="anchor" name="d1ca45237c389f51f63cab83b1cf0dd2"></a><!-- doxytag: member="Matrix::d_size" ref="d1ca45237c389f51f63cab83b1cf0dd2" args="" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int nRows, int nCols, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">int <a class="el" href="classMatrix.htm">Matrix</a>&lt; nRows, nCols, T &gt;::<a class="el" href="classMatrix.htm#d1ca45237c389f51f63cab83b1cf0dd2">d_size</a><code> [protected]</code>          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Matrix_8hpp-source.htm">Matrix.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>QMath Matrix Library</b></font></code> on Mon Sep 11 14:52:24 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
