<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>QMath Matrix Library: Transform Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>Transform Class Reference</h1><!-- doxytag: class="Transform" --><!-- doxytag: inherits="Matrix&lt; 4, 4, double &gt;" -->The class <code><a class="el" href="classTransform.htm">Transform</a></code> represents a 4x4 homogeneous transformation matrix.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Transform_8hpp-source.htm">Transform.hpp</a>&gt;</code>
<p>
<p>Inheritance diagram for Transform:
<p><center><img src="classTransform.png" usemap="#Transform_map" border="0" alt=""></center>
<map name="Transform_map">
<area href="classMatrix.htm" alt="Matrix< 4, 4, double >" shape="rect" coords="0,56,141,80">
<area href="classMatrixBase.htm" alt="MatrixBase< double >" shape="rect" coords="0,0,141,24">
</map>
<a href="classTransform-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTransform.htm#a08ca4266efabc768973cdeea51945ab">Transform</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTransform.htm#a7a387108cf421888952b454d641895b">Transform</a> (const <a class="el" href="classTransform.htm">Transform</a> &amp;transform)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTransform.htm#a72e286c069850db80927b0e6554cd3e">~Transform</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt; double &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTransform.htm#e5cf18ef44b656c18a03233c0e0558d1">operator=</a> (const double &amp;val)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; 3, double &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTransform.htm#efd76efb2df548c1bf9feac5d9da4f62">getTranslation</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTransform.htm#20f1917f34315984367421e98f5a759a">getRollPitchYaw</a> (double &amp;roll, double &amp;pitch, double &amp;yaw) const </td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The class <code><a class="el" href="classTransform.htm">Transform</a></code> represents a 4x4 homogeneous transformation matrix. 
<p>
<b>Example Program:</b> <div class="fragment"><pre class="fragment"><span class="comment">//======================================================================== </span>
<span class="comment">// Package              : The Math Library - Ex</span>
<span class="comment">// Authors              : Vilas Kumar Chitrakaran</span>
<span class="comment">// Start Date           : Wed Dec 20 11:08:28 GMT 2000</span>
<span class="comment">// Compiler             : GNU C++ 2.95.3 and above</span>
<span class="comment">// ----------------------------------------------------------------------</span>
<span class="comment">// File: Transform.t.cpp</span>
<span class="comment">// Example program for the Transform class.</span>
<span class="comment">//========================================================================</span>

<span class="comment">//========================================================================</span>
<span class="comment">// Transform.t.cpp</span>
<span class="comment">//------------------------------------------------------------------------</span>
<span class="comment">// This program demonstrates how to find the values of the</span>
<span class="comment">// components of a vector in a fixed reference frame after the </span>
<span class="comment">// vector undergoes a series of transformations about the frame.</span>
<span class="comment">//========================================================================</span>

<span class="preprocessor">#include "<a class="code" href="Transform_8hpp.htm">Transform.hpp</a>"</span>
<span class="preprocessor">#include &lt;math.h&gt;</span>
<span class="preprocessor">#ifndef M_PI</span>
<span class="preprocessor"></span><span class="preprocessor"> #define M_PI 3.14159265358979323846</span>
<span class="preprocessor"></span><span class="preprocessor">#endif</span>
<span class="preprocessor"></span>
<span class="keyword">using namespace </span>std;

<span class="keywordtype">int</span> main()
{
 <a class="code" href="classColumnVector.htm">ColumnVector&lt;4, double&gt;</a> initialVector;
 <a class="code" href="classColumnVector.htm">ColumnVector&lt;4, double&gt;</a> finalVector;
 <a class="code" href="classTransform.htm">Transform</a> firstRotation;
 <a class="code" href="classTransform.htm">Transform</a> secondRotation;
 <a class="code" href="classTransform.htm">Transform</a> transform;

 <span class="comment">// The initial position is [1 0 0 1] in homogeneous coordinates</span>
 initialVector = 1, 0, 0, 1;
        
 <span class="comment">// Finding the new co-ordinates. (Angles must be specified in radians.)</span>
 transform = <a class="code" href="Transform_8hpp.htm#2cad57b11ff9b341fc0704e9b1d77a5b">xRotation</a>(0.5 * <a class="code" href="HighpassFilter_8hpp.htm#e71449b1cc6e6250b91f539153a7a0d3">M_PI</a>) * <a class="code" href="Transform_8hpp.htm#1b3ba255462fef42fd06c837b2d4df60">yRotation</a>(0.5 * <a class="code" href="HighpassFilter_8hpp.htm#e71449b1cc6e6250b91f539153a7a0d3">M_PI</a>)  * <a class="code" href="Transform_8hpp.htm#50e96d3661a444f0c944e65cda002b43">translation</a>(0,0,6);

 finalVector = transform * initialVector;
 cout &lt;&lt; <span class="stringliteral">"* Position vector after transformation in fixed frame : "</span> 
      &lt;&lt; <a class="code" href="classMatrix.htm#8e1002b73935c3285e044b67e00b2382">transpose</a>(finalVector) &lt;&lt; endl;
 cout &lt;&lt; <span class="stringliteral">"* Translation : "</span> &lt;&lt; <a class="code" href="classMatrix.htm#8e1002b73935c3285e044b67e00b2382">transpose</a>(transform.<a class="code" href="classTransform.htm#efd76efb2df548c1bf9feac5d9da4f62">getTranslation</a>()) &lt;&lt; endl;

 <span class="comment">// To get the roll/pitch/yaw angles of the new vector.</span>
 <span class="keywordtype">double</span> roll;
 <span class="keywordtype">double</span> pitch;
 <span class="keywordtype">double</span> yaw;
        
 transform.<a class="code" href="classTransform.htm#20f1917f34315984367421e98f5a759a">getRollPitchYaw</a>(roll, pitch, yaw);
 roll *= 180.0/<a class="code" href="HighpassFilter_8hpp.htm#e71449b1cc6e6250b91f539153a7a0d3">M_PI</a>; pitch *= 180.0/<a class="code" href="HighpassFilter_8hpp.htm#e71449b1cc6e6250b91f539153a7a0d3">M_PI</a>; yaw *= 180.0/<a class="code" href="HighpassFilter_8hpp.htm#e71449b1cc6e6250b91f539153a7a0d3">M_PI</a>;
 cout &lt;&lt; <span class="stringliteral">"* (yaw, pitch, roll) angles of the new vector (degrees) : ("</span> 
      &lt;&lt; yaw &lt;&lt; <span class="stringliteral">","</span> &lt;&lt; pitch &lt;&lt; <span class="stringliteral">","</span> &lt;&lt; roll &lt;&lt; <span class="stringliteral">")"</span> &lt;&lt; endl;
        
 <span class="comment">// You can get back the initial position vector by the inverse transformation..</span>
 <a class="code" href="classColumnVector.htm">ColumnVector&lt;4, double&gt;</a> initialVectorAgain;
 initialVectorAgain = <a class="code" href="classMatrix.htm#800d306b91f512c556316b182a6b7201">inverse</a>(transform) * finalVector;

 cout &lt;&lt; <span class="stringliteral">"* After inverse transform : "</span> &lt;&lt; <a class="code" href="classMatrix.htm#8e1002b73935c3285e044b67e00b2382">transpose</a>(initialVectorAgain) &lt;&lt; endl;
 cout &lt;&lt; <span class="stringliteral">"* Should be the same as what we began with : "</span> &lt;&lt; <a class="code" href="classMatrix.htm#8e1002b73935c3285e044b67e00b2382">transpose</a>(initialVector) &lt;&lt; endl;

 <span class="keywordflow">return</span> 0;
}
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="a08ca4266efabc768973cdeea51945ab"></a><!-- doxytag: member="Transform::Transform" ref="a08ca4266efabc768973cdeea51945ab" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">Transform::Transform           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor for the <code><a class="el" href="classTransform.htm">Transform</a></code> object. The <code><a class="el" href="classTransform.htm">Transform</a></code> matrix is initialized to the following form. <div class="fragment"><pre class="fragment">        [1 0 0 0]
        [0 1 0 0]
        [0 0 1 0]
        [0 0 0 1]
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="a7a387108cf421888952b454d641895b"></a><!-- doxytag: member="Transform::Transform" ref="a7a387108cf421888952b454d641895b" args="(const Transform &amp;transform)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">Transform::Transform           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classTransform.htm">Transform</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>transform</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Copy Constructor.     </td>
  </tr>
</table>
<a class="anchor" name="a72e286c069850db80927b0e6554cd3e"></a><!-- doxytag: member="Transform::~Transform" ref="a72e286c069850db80927b0e6554cd3e" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">Transform::~Transform           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default destructor.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="e5cf18ef44b656c18a03233c0e0558d1"></a><!-- doxytag: member="Transform::operator=" ref="e5cf18ef44b656c18a03233c0e0558d1" args="(const double &amp;val)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt;double&gt; Transform::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const double &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>val</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function provides an overloaded assignment operator for initializing the elements of a <a class="el" href="classTransform.htm">Transform</a>. The initialization of the <a class="el" href="classTransform.htm">Transform</a> object can be done as a comma seperated list. For example: <div class="fragment"><pre class="fragment"> <a class="code" href="classTransform.htm">Transform</a> myTransform;
    myTransform = cos(x), sin(x),...so on ; 
</pre></div> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>val</em>&nbsp;</td><td>The comma separated list of elements. </td></tr>
  </table>
</dl>

<p>
Reimplemented from <a class="el" href="classMatrix.htm#05b79ba5d2b4854bc3ef6ae7b00a9c75">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="efd76efb2df548c1bf9feac5d9da4f62"></a><!-- doxytag: member="Transform::getTranslation" ref="efd76efb2df548c1bf9feac5d9da4f62" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt;3,double&gt; Transform::getTranslation           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The position vector (last column) from the matrix. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="20f1917f34315984367421e98f5a759a"></a><!-- doxytag: member="Transform::getRollPitchYaw" ref="20f1917f34315984367421e98f5a759a" args="(double &amp;roll, double &amp;pitch, double &amp;yaw) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void Transform::getRollPitchYaw           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">double &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>roll</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>double &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>pitch</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>double &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>yaw</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function returns the roll (z), pitch (y) and yaw (x) angles from the homogeneous transformation matrix. The angles are defined as follows: The rotational part of the <a class="el" href="classTransform.htm">Transform</a> matrix is obtained by first defining a rotation about X axis by <code>yaw</code> radians, then a rotation about the Y axis by <code>pitch</code> radians and finally a rotation about the Z axis by <code>roll</code> radians, all rotations being relative to a fixed XYZ frame. The definition follows the description in the following textbook: M. W. Spong, and M. Vidyasagar, Robot Dynamics and Control, John Wiley and Sons, ISBN: 047161243, 1989. <hr>
NOTE: There are multiple solutions (combinations of angles) that result in the same rotation matrix, but are physically different orientations. This function returns a solution corresponding to cos(pitch) &gt; 0, i.e., -pi/2 &lt; pitch &lt; pi/2. If the assumption that cos(pitch) &gt; 0 does not hold, incorrect solutions are returned. Beware of gimbal lock that happens when cos(pitch) = 0, in which case, the roll and the yaw angles are indistinguishable.<hr>
 <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>roll,pitch,yaw</em>&nbsp;</td><td>The angles extracted from the transformation matrix. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Transform_8hpp-source.htm">Transform.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>QMath Matrix Library</b></font></code> on Mon Sep 11 14:52:24 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
