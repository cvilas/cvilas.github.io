<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>QMath Matrix Library: ColumnVector&lt; size, T &gt; Class Template Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>ColumnVector&lt; size, T &gt; Class Template Reference</h1><!-- doxytag: class="ColumnVector" --><!-- doxytag: inherits="Matrix&lt; size, 1, T &gt;,VectorBase" -->A class for column vectors.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="ColumnVector_8hpp-source.htm">ColumnVector.hpp</a>&gt;</code>
<p>
<p>Inheritance diagram for ColumnVector&lt; size, T &gt;:
<p><center><img src="classColumnVector.png" usemap="#ColumnVector< size, T >_map" border="0" alt=""></center>
<map name="ColumnVector< size, T >_map">
<area href="classMatrix.htm" alt="Matrix< size, 1, T >" shape="rect" coords="0,56,154,80">
<area href="classVectorBase.htm" alt="VectorBase< T >" shape="rect" coords="164,56,318,80">
<area href="classMatrixBase.htm" alt="MatrixBase< T >" shape="rect" coords="0,0,154,24">
<area href="classVector.htm" alt="Vector< size, T >" shape="rect" coords="82,168,236,192">
</map>
<a href="classColumnVector-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#8ec37d856b8ff03907a7a241306a13f5">ColumnVector</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#43d298efee4ea3ec3de90124e0699227">ColumnVector</a> (const <a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt; &amp;v)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#52589ad07f6afda8a2c0ddf975708e85">ColumnVector</a> (const <a class="el" href="classMatrix.htm">Matrix</a>&lt; size, 1, T &gt; &amp;m)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#2790d8758cee21662ee4d0acd84dec46">ColumnVector</a> (const <a class="el" href="classVector.htm">Vector</a>&lt; size, T &gt; &amp;v)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#90dd1992ce2bdab0a73723f47fb2943e">~ColumnVector</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#1fb8d93b4d6c13497b2fa7250ab6d367">getElementsPointer</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#9894c4055278ffb94870c807f0f10bcf">getElement</a> (int index) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#4ac4407800e8de0783fccce91a15de1a">setElement</a> (int index, T value)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#bd0a12f204c4cce59cc89ae3173a94a9">isRowVector</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#f5723f3275a78eee299f0c1c84bde2c3">getNumElements</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">T&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#948740a309ae4f4a3aba5da639186009">operator()</a> (int index) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">T &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#e30c7f83159f5db7fef76c713b87d071">operator()</a> (int index)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#4ef0197c69f952e40d98e097ab7e0b45">operator=</a> (const <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt; &amp;v)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt; T &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classColumnVector.htm#25bcd4c9b443769b7b07beadf8d0426e">operator=</a> (const T &amp;value)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<h3>template&lt;int size, class T = double&gt;<br>
 class ColumnVector&lt; size, T &gt;</h3>

A class for column vectors. 
<p>
The class <code><a class="el" href="classColumnVector.htm">ColumnVector</a></code> is derived from the base classes <code><a class="el" href="classMatrix.htm">Matrix</a></code> and <code><a class="el" href="classVectorBase.htm">VectorBase</a></code>, and provides methods for operations such as cross product, dot product and element-by-element multiplication.<p>
<b>Example Program:</b> <div class="fragment"><pre class="fragment"><span class="comment">//======================================================================== </span>
<span class="comment">// Package              : The Math Library - Ex</span>
<span class="comment">// Authors              : Vilas Kumar Chitrakaran</span>
<span class="comment">// Start Date   : Wed Dec 20 11:08:28 GMT 2000</span>
<span class="comment">// Compiler             : GNU C++ 2.95.3 and above</span>
<span class="comment">// ----------------------------------------------------------------------</span>
<span class="comment">// File: Vector.t.cpp</span>
<span class="comment">// Example program for the vector classes.</span>
<span class="comment">//========================================================================</span>

<span class="preprocessor">#include "<a class="code" href="Vector_8hpp.htm">Vector.hpp</a>"</span>
<span class="preprocessor">#include "<a class="code" href="RowVector_8hpp.htm">RowVector.hpp</a>"</span>

<span class="keyword">using namespace </span>std;

<span class="keywordtype">int</span> main()
{
 <a class="code" href="classVector.htm">Vector&lt;3&gt;</a> v1, v2, v3;
 
 v1 = 1, 1, 2;
 v2 = 2, 3, 4;
 <span class="keywordtype">double</span> dp;
  
 <span class="comment">// dot product: component of v1 along v2</span>
 dp = <a class="code" href="ColumnVector_8hpp.htm#ef8b3c2063567e9183ba7d8278067a6d">dotProduct</a>(v1, v2);
 cout &lt;&lt; <span class="stringliteral">"Dot product: v1 . v2 = "</span> &lt;&lt; dp &lt;&lt; endl;
 
 <span class="comment">// cross product: v1 x v2</span>
 v3 = <a class="code" href="ColumnVector_8hpp.htm#5f13aeb05dc21cbc06820c2c4a9a462a">crossProduct</a>(v1, v2);
 cout &lt;&lt; <span class="stringliteral">"Cross product: v1 x v2 = "</span> &lt;&lt; <a class="code" href="classMatrix.htm#8e1002b73935c3285e044b67e00b2382">transpose</a>(v3) &lt;&lt; endl; 

 <span class="comment">// 2-norm of a vector</span>
 cout &lt;&lt; <span class="stringliteral">"norm(v1): "</span> &lt;&lt; v1.<a class="code" href="classVectorBase.htm#a538b3378ecb84ffcf4f2932c3e2e802">norm</a>() &lt;&lt; endl;
 <span class="keywordflow">return</span> 0;
}

</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="8ec37d856b8ff03907a7a241306a13f5"></a><!-- doxytag: member="ColumnVector::ColumnVector" ref="8ec37d856b8ff03907a7a241306a13f5" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::<a class="el" href="classColumnVector.htm">ColumnVector</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor. The elements are not initialized.     </td>
  </tr>
</table>
<a class="anchor" name="43d298efee4ea3ec3de90124e0699227"></a><!-- doxytag: member="ColumnVector::ColumnVector" ref="43d298efee4ea3ec3de90124e0699227" args="(const ColumnVector&lt; size, T &gt; &amp;v)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::<a class="el" href="classColumnVector.htm">ColumnVector</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>v</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Copy Constructor.     </td>
  </tr>
</table>
<a class="anchor" name="52589ad07f6afda8a2c0ddf975708e85"></a><!-- doxytag: member="ColumnVector::ColumnVector" ref="52589ad07f6afda8a2c0ddf975708e85" args="(const Matrix&lt; size, 1, T &gt; &amp;m)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::<a class="el" href="classColumnVector.htm">ColumnVector</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classMatrix.htm">Matrix</a>&lt; size, 1, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>m</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The conversion constructor for conversion of a <code><a class="el" href="classMatrix.htm">Matrix</a></code> type of single column into type <code><a class="el" href="classColumnVector.htm">ColumnVector</a></code>.     </td>
  </tr>
</table>
<a class="anchor" name="2790d8758cee21662ee4d0acd84dec46"></a><!-- doxytag: member="ColumnVector::ColumnVector" ref="2790d8758cee21662ee4d0acd84dec46" args="(const Vector&lt; size, T &gt; &amp;v)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::<a class="el" href="classColumnVector.htm">ColumnVector</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classVector.htm">Vector</a>&lt; size, T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>v</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The conversion constructor for conversion of a <code><a class="el" href="classVector.htm">Vector</a></code> type into <code><a class="el" href="classColumnVector.htm">ColumnVector</a></code>.     </td>
  </tr>
</table>
<a class="anchor" name="90dd1992ce2bdab0a73723f47fb2943e"></a><!-- doxytag: member="ColumnVector::~ColumnVector" ref="90dd1992ce2bdab0a73723f47fb2943e" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual <a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::~<a class="el" href="classColumnVector.htm">ColumnVector</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default destructor.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="1fb8d93b4d6c13497b2fa7250ab6d367"></a><!-- doxytag: member="ColumnVector::getElementsPointer" ref="1fb8d93b4d6c13497b2fa7250ab6d367" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T* <a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::getElementsPointer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>A pointer to the first element in the vector. </dd></dl>

<p>
Implements <a class="el" href="classVectorBase.htm#a4b541538865f78f3047602e81218572">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="9894c4055278ffb94870c807f0f10bcf"></a><!-- doxytag: member="ColumnVector::getElement" ref="9894c4055278ffb94870c807f0f10bcf" args="(int index) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual T <a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::getElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>index</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The value at position specified by index (index = 1 is the first element). </dd></dl>

<p>
Implements <a class="el" href="classVectorBase.htm#ca55b281d62b2c0d47048585b461ef5e">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="4ac4407800e8de0783fccce91a15de1a"></a><!-- doxytag: member="ColumnVector::setElement" ref="4ac4407800e8de0783fccce91a15de1a" args="(int index, T value)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual void <a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::setElement           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>index</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>T&nbsp;</td>
          <td class="mdname" nowrap> <em>value</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets an element to a value at the specified position. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>index</em>&nbsp;</td><td>Position of the desired element. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The desired element is set to this value. </td></tr>
  </table>
</dl>

<p>
Implements <a class="el" href="classVectorBase.htm#3f5f181627c37d72fd2b3384e4072f4c">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="bd0a12f204c4cce59cc89ae3173a94a9"></a><!-- doxytag: member="ColumnVector::isRowVector" ref="bd0a12f204c4cce59cc89ae3173a94a9" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual bool <a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::isRowVector           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>false </dd></dl>

<p>
Implements <a class="el" href="classVectorBase.htm#69bb4249c0f1bf59b464fb6bab1ce091">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="f5723f3275a78eee299f0c1c84bde2c3"></a><!-- doxytag: member="ColumnVector::getNumElements" ref="f5723f3275a78eee299f0c1c84bde2c3" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">virtual int <a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::getNumElements           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The number of elements in the vector. </dd></dl>

<p>
Implements <a class="el" href="classVectorBase.htm#382bad4c18bca2ff98666ae8187a0654">VectorBase&lt; T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="948740a309ae4f4a3aba5da639186009"></a><!-- doxytag: member="ColumnVector::operator()" ref="948740a309ae4f4a3aba5da639186009" args="(int index) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T <a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::operator()           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>index</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
    </td>
  </tr>
</table>
<a class="anchor" name="e30c7f83159f5db7fef76c713b87d071"></a><!-- doxytag: member="ColumnVector::operator()" ref="e30c7f83159f5db7fef76c713b87d071" args="(int index)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top">T&amp; <a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::operator()           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>index</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Access or assign the element at the position specified by index. For example: <div class="fragment"><pre class="fragment">    myVector(2)=12.65; 
</pre></div>     </td>
  </tr>
</table>
<a class="anchor" name="4ef0197c69f952e40d98e097ab7e0b45"></a><!-- doxytag: member="ColumnVector::operator=" ref="4ef0197c69f952e40d98e097ab7e0b45" args="(const VectorBase&lt; T &gt; &amp;v)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt;size, T&gt;&amp; <a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classVectorBase.htm">VectorBase</a>&lt; T &gt; &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>v</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Assign a <code><a class="el" href="classVectorBase.htm">VectorBase</a></code> type to a <code><a class="el" href="classColumnVector.htm">ColumnVector</a></code> type. Both objects must have the same dimensions. 
<p>
Reimplemented from <a class="el" href="classVectorBase.htm#a8cf80b8534b85864af03a4a248be7b1">VectorBase&lt; T &gt;</a>.
<p>
Reimplemented in <a class="el" href="classVector.htm#2e1515125b6c64381de5c80affa804cc">Vector&lt; size, T &gt;</a>.    </td>
  </tr>
</table>
<a class="anchor" name="25bcd4c9b443769b7b07beadf8d0426e"></a><!-- doxytag: member="ColumnVector::operator=" ref="25bcd4c9b443769b7b07beadf8d0426e" args="(const T &amp;value)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="mdPrefix" colspan="4">
template&lt;int size, class T = double&gt; </td>
        </tr>
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt;T&gt; <a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; size, T &gt;::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const T &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Initialize a vector object. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The value to which all elements in the vector are initialized. The initialization of the vector object can also be done as a comma seperated list. For example: <div class="fragment"><pre class="fragment">    <a class="code" href="classColumnVector.htm">ColumnVector&lt;3&gt;</a> myVector;
    myVector = 67.88, 45.89, 90; 
</pre></div> </td></tr>
  </table>
</dl>

<p>
Implements <a class="el" href="classVectorBase.htm#5e4218fdb2e8839eabc48c37eddbac17">VectorBase&lt; T &gt;</a>.
<p>
Reimplemented in <a class="el" href="classVector.htm#7db6221df5b3298e6ad2631dfe7d729a">Vector&lt; size, T &gt;</a>.    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="ColumnVector_8hpp-source.htm">ColumnVector.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>QMath Matrix Library</b></font></code> on Mon Sep 11 14:52:24 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
