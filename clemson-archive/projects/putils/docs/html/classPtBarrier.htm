<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>POSIX Utilities Package 2.2: PtBarrier Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>PtBarrier Class Reference</h1><!-- doxytag: class="PtBarrier" -->The pthread barrier synchronization object.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="PtBarrier_8hpp-source.htm">PtBarrier.hpp</a>&gt;</code>
<p>
<a href="classPtBarrier-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPtBarrier.htm#07b7fdf95cc3db23dc60258d492e5cd2">PtBarrier</a> (int n)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPtBarrier.htm#4c7498e33edb089e01c513a5ad6e0be1">~PtBarrier</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPtBarrier.htm#42c38a3185256088129748938277466b">wait</a> ()</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The pthread barrier synchronization object. 
<p>
<ul>
<li>
A barrier can be created and used to synchronize a bunch of threads. A barrier object common to multiple threads blocks each of the threads until all of them have reached a certain point in their code, at which point they are all released. </li>
<li>
This class will throw an exception of type <a class="el" href="classErrnoException.htm">ErrnoException</a> in case of errors. </li>
</ul>
<p>
<b>Example Program:</b> <div class="fragment"><pre class="fragment"><span class="comment">//==============================================================================</span>
<span class="comment">// PtBarrier.t.cpp - Example program for PtBarrier class.</span>
<span class="comment">//</span>
<span class="comment">// Author        : Vilas Kumar Chitrakaran</span>
<span class="comment">//==============================================================================</span>
 
<span class="preprocessor">#include "PtBarrier.hpp"</span>
<span class="preprocessor">#include &lt;iostream&gt;</span>
<span class="preprocessor">#include &lt;time.h&gt;</span>

<span class="keyword">using namespace </span>std;

<a class="code" href="classPtBarrier.htm">PtBarrier</a> barrier(2);
<span class="comment">// The synchronization object for two threads</span>

<span class="comment">//==============================================================================</span>
<span class="comment">// work </span>
<span class="comment">// - does some work</span>
<span class="comment">// - waits at the barrier for the other thread to finish its work cycle</span>
<span class="comment">// - loop again</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">void</span> *work(<span class="keywordtype">void</span> *arg)
{
 <span class="keyword">struct </span>timespec napTime;
 napTime.tv_sec = (int)arg;
 napTime.tv_nsec = 0;
 <span class="keywordflow">while</span> (1)
 {
  nanosleep( &amp;napTime, NULL ); <span class="comment">// work!!</span>
  cout &lt;&lt; <span class="stringliteral">"Thread "</span> &lt;&lt; pthread_self() &lt;&lt; <span class="stringliteral">" worked "</span> 
       &lt;&lt; napTime.tv_sec &lt;&lt; <span class="stringliteral">" secs."</span>
       &lt;&lt; endl &lt;&lt; flush;

  <span class="comment">// wait for the other thread</span>
  barrier.wait();

  cout &lt;&lt; <span class="stringliteral">"Thread "</span> &lt;&lt; pthread_self() &lt;&lt; <span class="stringliteral">" sync."</span>
       &lt;&lt; endl &lt;&lt; flush;
 }
 <span class="keywordflow">return</span> NULL;
}


<span class="comment">//==============================================================================</span>
<span class="comment">// main function</span>
<span class="comment">// - creates two synchronized threads that wait for each other</span>
<span class="comment">//   at the end of each cycle.</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">int</span> main()
{
 pthread_t threadId;
 <span class="keywordtype">int</span> arg;
 arg = 1;
 pthread_create(&amp;threadId, NULL, work, (<span class="keywordtype">void</span> *)arg);
 arg = 2;
 work((<span class="keywordtype">void</span> *)arg);
 <span class="keywordflow">return</span> 0;
}
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="07b7fdf95cc3db23dc60258d492e5cd2"></a><!-- doxytag: member="PtBarrier::PtBarrier" ref="07b7fdf95cc3db23dc60258d492e5cd2" args="(int n)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PtBarrier::PtBarrier           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>n</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Initialize a barrier object. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>n</em>&nbsp;</td><td>The number of threads that must call <a class="el" href="classPtBarrier.htm#42c38a3185256088129748938277466b">wait()</a> before any of them successfully returns from the call. This value must be greater than 0. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="4c7498e33edb089e01c513a5ad6e0be1"></a><!-- doxytag: member="PtBarrier::~PtBarrier" ref="4c7498e33edb089e01c513a5ad6e0be1" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">PtBarrier::~PtBarrier           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Destroy the barrier object     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="42c38a3185256088129748938277466b"></a><!-- doxytag: member="PtBarrier::wait" ref="42c38a3185256088129748938277466b" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void PtBarrier::wait           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Synchronize participating threads at the barrier. NOTE: For 'n' cooperating threads as specified in the constructor: <ul>
<li>
This function blocks until 'n-1' other participating threads have called <a class="el" href="classPtBarrier.htm#42c38a3185256088129748938277466b">wait()</a> on the same barrier. </li>
<li>
You can't unblock this function by calling <a class="el" href="classPtBarrier.htm#42c38a3185256088129748938277466b">wait()</a> 'n' times from the same thread. </li>
</ul>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="PtBarrier_8hpp-source.htm">PtBarrier.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>POSIX Utilities Package</b></font></code> on Sat Aug 26 17:12:56 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
