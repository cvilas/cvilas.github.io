<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>POSIX Utilities Package 2.2: StatusReport Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>StatusReport Class Reference</h1><!-- doxytag: class="StatusReport" -->An object for storing status messages containing a integer code, a message and a timestamp.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="StatusReport_8hpp-source.htm">StatusReport.hpp</a>&gt;</code>
<p>
<a href="classStatusReport-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classStatusReport.htm#a1df78d601cf533055c4e699f2d9a3bd">StatusReport</a> (int maxMsgLen=80, int maxNumMsgs=1, SR_buffer_type type=SR_CIRCULAR)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classStatusReport.htm#10e357a50487014d8fbedb97cc23440c">~StatusReport</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classStatusReport.htm#8155f912f67e6807cff0a3640940ba37">setReport</a> (int code, const char *message=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classStatusReport.htm#a17ae7d00bd0fa53c65bb0c3027b3cc7">getReportMessage</a> (unsigned int reportNum=1) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classStatusReport.htm#0d4d5cbc4f2053154392db7460dc72e1">getReportCode</a> (unsigned int reportNum=1) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">timespec&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classStatusReport.htm#b6525a9502d3e43cb80f95100bcaa0b0">getReportTimestamp</a> (unsigned int reportNum=1) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classStatusReport.htm#4a0e281a03a2941dad4c38fce3846469">clearReports</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classStatusReport.htm#c4c4c13cab668e39f53653186518da6b">getNumReports</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classStatusReport.htm#ea5ef87f6abf9f5d198cf0f67f954668">getNumReportsOverflow</a> () const </td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
An object for storing status messages containing a integer code, a message and a timestamp. 
<p>
Objects of this class can be embedded in any software module that requires status reporting capabilities to users or other connected subsystems. Notes about usability to your application: <ul>
<li>
User must specify the maximum number of reports to store and maximum possible length of reports apriori. </li>
<li>
Reports longer than maximum specified report length will get truncated. </li>
<li>
If the buffer is initialized as circular, once the buffer is full new messages will overwrite oldest messages from the beginning of the buffer so that if the buffer size is 'n', you will always have the last 'n' messages available to you. </li>
<li>
The class constructor does dynamic memory allocation. Create objects of this class outside realtime code. </li>
</ul>
<p>
<b>Example Program:</b><p>
<div class="fragment"><pre class="fragment"><span class="comment">//==============================================================================</span>
<span class="comment">// StatusReport.t.cpp - Example program for StatusReport class.</span>
<span class="comment">//</span>
<span class="comment">// Author        : Vilas Kumar Chitrakaran</span>
<span class="comment">//==============================================================================</span>

<span class="preprocessor">#include "StatusReport.hpp"</span>
<span class="preprocessor">#include &lt;iostream&gt;</span>
<span class="preprocessor">#include &lt;unistd.h&gt;</span>

<span class="keyword">using namespace </span>std;

<span class="comment">// use message</span>
<span class="keywordtype">void</span> usage(<span class="keywordtype">char</span> *argv[])
{
 cout &lt;&lt; endl
      &lt;&lt; <span class="stringliteral">"Usage: "</span> &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">" -[cl]"</span> &lt;&lt; endl
      &lt;&lt; <span class="stringliteral">" where:"</span> &lt;&lt; endl
      &lt;&lt; <span class="stringliteral">"  -c          use circular buffer"</span> &lt;&lt; endl
      &lt;&lt; <span class="stringliteral">"  -l          use linear buffer"</span> &lt;&lt; endl &lt;&lt; endl;
}

<span class="comment">//==============================================================================</span>
<span class="comment">// main function</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[])
{
 <a class="code" href="classStatusReport.htm">StatusReport</a> *buffer;
 <span class="keywordtype">char</span> timeBuf[26];
 time_t time;
 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;
 <span class="keywordtype">int</span> opt;
 SR_buffer_type type = SR_CIRCULAR;
 
 <span class="comment">// check command line arguments</span>
 <span class="keywordflow">if</span>(argc &lt;= 1)
 {
  usage(argv);
  <span class="keywordflow">return</span> 0;
 }
  
 <span class="comment">// parse command line option for type of buffer</span>
 <span class="keywordflow">while</span>( (opt = getopt(argc, argv, <span class="stringliteral">"cl"</span>)) != -1)
 {
  <span class="keywordflow">switch</span>(opt)
  {
   <span class="keywordflow">case</span> <span class="charliteral">'c'</span>: <span class="comment">// circular buffer</span>
    type = SR_CIRCULAR;
    <span class="keywordflow">break</span>;
   <span class="keywordflow">case</span> <span class="charliteral">'l'</span>: <span class="comment">// linear buffer</span>
    type = SR_LINEAR;
    <span class="keywordflow">break</span>;
   <span class="keywordflow">default</span>:
    usage(argv);
    <span class="keywordflow">return</span> 0;
    <span class="keywordflow">break</span>;
  }
 } 
 
 <span class="comment">// create buffer for 2 messages 80 chars long</span>
 buffer = <span class="keyword">new</span> <a class="code" href="classStatusReport.htm#a1df78d601cf533055c4e699f2d9a3bd">StatusReport</a>(80,2,type);

 <span class="comment">// Add two error messages</span>
 buffer-&gt;<a class="code" href="classStatusReport.htm#8155f912f67e6807cff0a3640940ba37">setReport</a>(0x100);
 buffer-&gt;<a class="code" href="classStatusReport.htm#8155f912f67e6807cff0a3640940ba37">setReport</a>(0x0, <span class="stringliteral">"Second message"</span>);
 
 <span class="comment">// Add another message - this will overflow</span>
 <span class="comment">// for linear buffer and replace first message</span>
 <span class="comment">// for a circular buffer</span>
 buffer-&gt;<a class="code" href="classStatusReport.htm#8155f912f67e6807cff0a3640940ba37">setReport</a>(0x300, <span class="stringliteral">"Third message"</span>);
 
 <span class="comment">// Print the reports </span>
 cout &lt;&lt; <span class="stringliteral">"num reports: "</span> &lt;&lt; buffer-&gt;<a class="code" href="classStatusReport.htm#c4c4c13cab668e39f53653186518da6b">getNumReports</a>() &lt;&lt; endl
      &lt;&lt; <span class="stringliteral">"num overflow: "</span> &lt;&lt; buffer-&gt;<a class="code" href="classStatusReport.htm#ea5ef87f6abf9f5d198cf0f67f954668">getNumReportsOverflow</a>() &lt;&lt; endl;
 <span class="keywordflow">for</span>(i = 1; i &lt;= buffer-&gt;<a class="code" href="classStatusReport.htm#c4c4c13cab668e39f53653186518da6b">getNumReports</a>(); i++)
 {
  time = (time_t)buffer-&gt;<a class="code" href="classStatusReport.htm#b6525a9502d3e43cb80f95100bcaa0b0">getReportTimestamp</a>(i).tv_sec;
  ctime_r(&amp;time, timeBuf);
  timeBuf[24] = <span class="charliteral">'\0'</span>;
  cout &lt;&lt; <span class="stringliteral">"[Report: "</span> &lt;&lt; (dec) &lt;&lt; i 
       &lt;&lt; <span class="stringliteral">"] [mesg: "</span> &lt;&lt; buffer-&gt;<a class="code" href="classStatusReport.htm#a17ae7d00bd0fa53c65bb0c3027b3cc7">getReportMessage</a>(i) 
       &lt;&lt; <span class="stringliteral">"] [code: "</span> &lt;&lt; <span class="stringliteral">"0x"</span> &lt;&lt; (hex) &lt;&lt; buffer-&gt;<a class="code" href="classStatusReport.htm#0d4d5cbc4f2053154392db7460dc72e1">getReportCode</a>(i) 
       &lt;&lt; <span class="stringliteral">"] [time: "</span> &lt;&lt; timeBuf &lt;&lt; <span class="stringliteral">"]"</span> &lt;&lt; endl;
 }
 
 <span class="keyword">delete</span> buffer;

 <span class="keywordflow">return</span> 0;
}
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="a1df78d601cf533055c4e699f2d9a3bd"></a><!-- doxytag: member="StatusReport::StatusReport" ref="a1df78d601cf533055c4e699f2d9a3bd" args="(int maxMsgLen=80, int maxNumMsgs=1, SR_buffer_type type=SR_CIRCULAR)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">StatusReport::StatusReport           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>maxMsgLen</em> = <code>80</code>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>maxNumMsgs</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>SR_buffer_type&nbsp;</td>
          <td class="mdname" nowrap> <em>type</em> = <code>SR_CIRCULAR</code></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The constructor. Creates required buffers and initializes. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>maxMsgLen</em>&nbsp;</td><td>Maximum length of messages in the buffer (default = 80 chars). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>maxNumMsgs</em>&nbsp;</td><td>Number of messages the buffer can hold (default = 1). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>The type of buffer, either circular (SR_CIRCULAR) or linear (SR_LINEAR). If the buffer is initialized as circular, once the buffer is full new messages will overwrite oldest messages from the beginning of the buffer so that if the buffer size is 'n', you will always have the last 'n' messages available to you (default SR_CIRCULAR). </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="10e357a50487014d8fbedb97cc23440c"></a><!-- doxytag: member="StatusReport::~StatusReport" ref="10e357a50487014d8fbedb97cc23440c" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">StatusReport::~StatusReport           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The destructor. Frees allocated memory.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="4a0e281a03a2941dad4c38fce3846469"></a><!-- doxytag: member="StatusReport::clearReports" ref="4a0e281a03a2941dad4c38fce3846469" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void StatusReport::clearReports           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Clear all reports.     </td>
  </tr>
</table>
<a class="anchor" name="c4c4c13cab668e39f53653186518da6b"></a><!-- doxytag: member="StatusReport::getNumReports" ref="c4c4c13cab668e39f53653186518da6b" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">unsigned int StatusReport::getNumReports           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Return the number of reports available to the user from the reports buffer.     </td>
  </tr>
</table>
<a class="anchor" name="ea5ef87f6abf9f5d198cf0f67f954668"></a><!-- doxytag: member="StatusReport::getNumReportsOverflow" ref="ea5ef87f6abf9f5d198cf0f67f954668" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">unsigned int StatusReport::getNumReportsOverflow           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Return the number of reports that were not recorded because of insufficient buffer space. If the buffer is circular this function will return number of messages lost because they were overwritten.     </td>
  </tr>
</table>
<a class="anchor" name="0d4d5cbc4f2053154392db7460dc72e1"></a><!-- doxytag: member="StatusReport::getReportCode" ref="0d4d5cbc4f2053154392db7460dc72e1" args="(unsigned int reportNum=1) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int StatusReport::getReportCode           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">unsigned int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>reportNum</em> = <code>1</code>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Return a report code. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>reportNum</em>&nbsp;</td><td>The desired report number for which you want the message. Note that reports are collected first-in last out. Hence if no report number is specified, the most recent report is returned; i.e. report number 1 is most recent. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a17ae7d00bd0fa53c65bb0c3027b3cc7"></a><!-- doxytag: member="StatusReport::getReportMessage" ref="a17ae7d00bd0fa53c65bb0c3027b3cc7" args="(unsigned int reportNum=1) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">const char* StatusReport::getReportMessage           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">unsigned int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>reportNum</em> = <code>1</code>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Return a report message. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>reportNum</em>&nbsp;</td><td>The desired report number for which you want the message. Note that reports are collected first-in last out. Hence if no report number is specified, the most recent report is returned; i.e. report number 1 is most recent. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="b6525a9502d3e43cb80f95100bcaa0b0"></a><!-- doxytag: member="StatusReport::getReportTimestamp" ref="b6525a9502d3e43cb80f95100bcaa0b0" args="(unsigned int reportNum=1) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">struct timespec StatusReport::getReportTimestamp           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">unsigned int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>reportNum</em> = <code>1</code>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Return the timestamp when a report was received. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>reportNum</em>&nbsp;</td><td>The desired report number for which you want the message. Note that reports are collected first-in last out. Hence if no report number is specified, the most recent report is returned; i.e. report number 1 is most recent. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="8155f912f67e6807cff0a3640940ba37"></a><!-- doxytag: member="StatusReport::setReport" ref="8155f912f67e6807cff0a3640940ba37" args="(int code, const char *message=NULL)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void StatusReport::setReport           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>code</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>message</em> = <code>NULL</code></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Add a report message and code to the buffer. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>code</em>&nbsp;</td><td>An integer code. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>message</em>&nbsp;</td><td>The message to add to the report. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="StatusReport_8hpp-source.htm">StatusReport.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>POSIX Utilities Package</b></font></code> on Sat Aug 26 17:12:56 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
