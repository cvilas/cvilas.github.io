<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>POSIX Utilities Package 2.2: RecursiveMutex Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>RecursiveMutex Class Reference</h1><!-- doxytag: class="RecursiveMutex" -->A wrapper for pthread mutex, with the added functionality that it is recursive.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="RecursiveMutex_8hpp-source.htm">RecursiveMutex.hpp</a>&gt;</code>
<p>
<a href="classRecursiveMutex-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRecursiveMutex.htm#91103d44df173701be6884b27779e9ed">RecursiveMutex</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRecursiveMutex.htm#537d4ded7ea3e4ff8b9971f8fe75e027">~RecursiveMutex</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRecursiveMutex.htm#e58fbce0b153017e73f0de390d025a93">lock</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRecursiveMutex.htm#780c2a4cda3b38c8037d0e8bea74ceb1">unlock</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classRecursiveMutex.htm#792d2f19f15300eb0863fd07038aa73e">tryLock</a> ()</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
A wrapper for pthread mutex, with the added functionality that it is recursive. 
<p>
<ul>
<li>
A recursive mutex can be locked more than once by a thread without causing a deadlock. </li>
<li>
The thread must call the unlock routine on the mutex the same number of times that it called the lock routine before another thread can lock the same mutex. </li>
<li>
This class is useful if the thread is already in a mutex protected section of the code and needs to call another routine that locks the same mutex again. </li>
<li>
This class will throw an exception of type <a class="el" href="classErrnoException.htm">ErrnoException</a> in case of errors. </li>
</ul>
<p>
The error checking code snippet used here is similar to John Nagle's mutexlock.h.<p>
<b>Example Program:</b><p>
<div class="fragment"><pre class="fragment"><span class="comment">//==============================================================================</span>
<span class="comment">// RecursiveMutex.t.cpp - Example program for RecursiveMutex class.</span>
<span class="comment">//</span>
<span class="comment">// Author        : Vilas Kumar Chitrakaran</span>
<span class="comment">//==============================================================================</span>


<span class="preprocessor">#include "RecursiveMutex.hpp"</span>
<span class="preprocessor">#include &lt;iostream&gt;</span>
<span class="preprocessor">#include &lt;string.h&gt;</span>
<span class="preprocessor">#include &lt;time.h&gt;</span>
<span class="preprocessor">#include &lt;stdlib.h&gt;</span>

<span class="comment">//==============================================================================</span>
<span class="comment">// This program demostrates how access to a resource shared between two </span>
<span class="comment">// threads is controlled using a RecursiveMutex object. </span>
<span class="comment">//==============================================================================</span>

<span class="keyword">using namespace </span>std;

<a class="code" href="classRecursiveMutex.htm">RecursiveMutex</a> mutex; <span class="comment">// mutex object</span>
<span class="keyword">static</span> <span class="keywordtype">int</span> counter;     <span class="comment">// shared resource</span>

<span class="comment">//==============================================================================</span>
<span class="comment">// Consumer thread</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">int</span> consume()
{
 <span class="keyword">struct </span>timespec delay;
 delay.tv_sec = 0;
 delay.tv_nsec = (<span class="keywordtype">long</span> int)5e8;
 <span class="keywordflow">while</span>(1)
 {
  <span class="keywordflow">if</span>(mutex.<a class="code" href="classRecursiveMutex.htm#792d2f19f15300eb0863fd07038aa73e">tryLock</a>() == -1)
   cout &lt;&lt; <span class="stringliteral">"CONSUME: missed"</span> &lt;&lt; endl &lt;&lt; flush;
  <span class="keywordflow">else</span>
  {
   cout &lt;&lt; <span class="stringliteral">"CONSUME : "</span> &lt;&lt; --counter &lt;&lt; endl &lt;&lt; flush;
   mutex.<a class="code" href="classRecursiveMutex.htm#780c2a4cda3b38c8037d0e8bea74ceb1">unlock</a>();
  }
  nanosleep(&amp;delay, NULL);
 }
 <span class="keywordflow">return</span> 0;
}

<span class="comment">//==============================================================================</span>
<span class="comment">// Producer thread</span>
<span class="comment">// NOTE that the mutex is recursively locked twice</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">void</span> *produce(<span class="keywordtype">void</span> *arg)
{
 arg=arg;
 <span class="keyword">struct </span>timespec delay;
 delay.tv_sec = 0;
 delay.tv_nsec = (<span class="keywordtype">long</span> int)1e8;
 <span class="keywordflow">while</span>(1)
 {
  mutex.<a class="code" href="classRecursiveMutex.htm#e58fbce0b153017e73f0de390d025a93">lock</a>();
  mutex.<a class="code" href="classRecursiveMutex.htm#e58fbce0b153017e73f0de390d025a93">lock</a>(); <span class="comment">// This is valid!</span>
  cout &lt;&lt; <span class="stringliteral">"PRODUCE: "</span> &lt;&lt; ++counter &lt;&lt; endl &lt;&lt; flush;
  mutex.<a class="code" href="classRecursiveMutex.htm#780c2a4cda3b38c8037d0e8bea74ceb1">unlock</a>();
  nanosleep(&amp;delay, NULL); <span class="comment">// sleep a little before releasing second mutex</span>
  mutex.<a class="code" href="classRecursiveMutex.htm#780c2a4cda3b38c8037d0e8bea74ceb1">unlock</a>();
  nanosleep(&amp;delay, NULL);
 }
 <span class="keywordflow">return</span> NULL;
}



<span class="comment">//==============================================================================</span>
<span class="comment">// main function</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">int</span> main()
{
 pthread_t threadId;
 pthread_create(&amp;threadId, NULL, &amp;produce, NULL);
 consume();
 <span class="keywordflow">return</span> 0;
}
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="91103d44df173701be6884b27779e9ed"></a><!-- doxytag: member="RecursiveMutex::RecursiveMutex" ref="91103d44df173701be6884b27779e9ed" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">RecursiveMutex::RecursiveMutex           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Constructs a recursive mutex     </td>
  </tr>
</table>
<a class="anchor" name="537d4ded7ea3e4ff8b9971f8fe75e027"></a><!-- doxytag: member="RecursiveMutex::~RecursiveMutex" ref="537d4ded7ea3e4ff8b9971f8fe75e027" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">RecursiveMutex::~RecursiveMutex           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Deletes a recursive mutex     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="e58fbce0b153017e73f0de390d025a93"></a><!-- doxytag: member="RecursiveMutex::lock" ref="e58fbce0b153017e73f0de390d025a93" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void RecursiveMutex::lock           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Locks a recursive mutex. If the mutex is locked by another thread, this thread is blocked until the mutex gets unlocked.     </td>
  </tr>
</table>
<a class="anchor" name="792d2f19f15300eb0863fd07038aa73e"></a><!-- doxytag: member="RecursiveMutex::tryLock" ref="792d2f19f15300eb0863fd07038aa73e" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int RecursiveMutex::tryLock           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns 0 and locks the mutex if it is not already locked by another thread, else returns -1.     </td>
  </tr>
</table>
<a class="anchor" name="780c2a4cda3b38c8037d0e8bea74ceb1"></a><!-- doxytag: member="RecursiveMutex::unlock" ref="780c2a4cda3b38c8037d0e8bea74ceb1" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void RecursiveMutex::unlock           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Unlocks a recursive mutex.     </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="RecursiveMutex_8hpp-source.htm">RecursiveMutex.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>POSIX Utilities Package</b></font></code> on Sat Aug 26 17:12:56 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
