<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Motion Mind DC Motor Controller 1.0: MotionMind Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>MotionMind Class Reference</h1><!-- doxytag: class="MotionMind" -->A driver for the Solutions Cubed Motion Mind DC motor controller Revision 4.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="MotionMind_8hpp-source.htm">MotionMind.hpp</a>&gt;</code>
<p>
<a href="classMotionMind-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMotionMind.htm#00c6a516965ace2fbe845c14d820914c">MotionMind</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMotionMind.htm#a38ca2d31cfd601e7506f37dae3f1464">~MotionMind</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMotionMind.htm#ae44954727a4a89fc444e23842b3730f">init</a> (const char *port, int baud, int address, bool verbose=true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMotionMind.htm#5b47bb10466b36835a3f5fb8cc244a6b">changeSpeed</a> (int16_t speed)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMotionMind.htm#696fb36d3409aee8b090b9fb060facd6">moveToAbsolute</a> (int32_t position)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMotionMind.htm#b87448588ff1a802b0f8c21c4c003862">moveToRelative</a> (int32_t position)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMotionMind.htm#642d5d10cc8caf4a7d013bd490945289">moveAtVelocity</a> (int16_t velocity)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMotionMind.htm#8da5f0734dba880356e9979eaad4ea49">writeRegister</a> (<a class="el" href="MotionMind_8hpp.htm#f5f4a36cdb1a71965e0c9966b63c2667">MMReg_t</a> reg, int32_t val)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMotionMind.htm#ededa3a3d2982ec61395b94d350cfb25">writeStoreRegister</a> (<a class="el" href="MotionMind_8hpp.htm#f5f4a36cdb1a71965e0c9966b63c2667">MMReg_t</a> reg, int32_t val)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int32_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMotionMind.htm#f1b552d68160c5ca8dd18b20e4821f52">readRegister</a> (<a class="el" href="MotionMind_8hpp.htm#f5f4a36cdb1a71965e0c9966b63c2667">MMReg_t</a> reg)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMotionMind.htm#9190c70af76b97f5b37e6358edd23cde">restore</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMotionMind.htm#79717798d5afb1dd2509e649beb7a51d">reset</a> ()</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
A driver for the Solutions Cubed Motion Mind DC motor controller Revision 4. 
<p>
The documentation in this file supplements the technical manual for the motion mind controller which can be obtained from <a href="http://www.solutions-cubed.com/solutions%20cubed/MM1_2005.htm">http://www.solutions-cubed.com/solutions%20cubed/MM1_2005.htm</a> . This driver is designed for the controller released with revision 4 of the above technical manual (late 2005). This driver class provides a RS232 communication interface to the controller, and is most useful for modes 3 (serial open-loop control) and 4 (serial PID position control) specified in the controller manual. The user must select the mode of operation by setting jumpers J5, and RS232 baud rate through J2.<p>
<b>Example Program:</b> <div class="fragment"><pre class="fragment"><span class="comment">//======================================================================== </span>
<span class="comment">// Package: Motion Mind DC Motor Controller</span>
<span class="comment">// Authors: Vilas Kumar Chitrakaran, Nitendra Nath</span>
<span class="comment">// Start Date: Sun Jan 15 15:36:46 EST 2006</span>
<span class="comment">// ----------------------------------------------------------------------  </span>
<span class="comment">// File: MotionMind.t.cpp</span>
<span class="comment">// Example program for the class MotionMind.</span>
<span class="comment">//========================================================================  </span>
 

<span class="preprocessor">#include &lt;stdio.h&gt;</span>
<span class="preprocessor">#include &lt;unistd.h&gt;</span>
<span class="preprocessor">#include "<a class="code" href="MotionMind_8hpp.htm">MotionMind.hpp</a>"</span>

<span class="comment">//======================================================================== </span>
<span class="comment">// main - An example PID control program</span>
<span class="comment">//========================================================================  </span>
<span class="keywordtype">int</span> main()
{
 <a class="code" href="classMotionMind.htm">MotionMind</a> controller;
 <span class="keywordtype">int</span> ret = 0;
 
 <span class="comment">// connect to the controller</span>
 ret = controller.<a class="code" href="classMotionMind.htm#ae44954727a4a89fc444e23842b3730f">init</a>(<span class="stringliteral">"/dev/ser1"</span>, 19200, 1);
 <span class="keywordflow">if</span>(ret == -1) {
  fprintf(stderr, <span class="stringliteral">"Connection error\n"</span>);
  <span class="keywordflow">return</span>(-1);
 }
 
 <span class="comment">// set gains p = 6000, I = 35, D = 200</span>
 <span class="keywordflow">if</span>( controller.<a class="code" href="classMotionMind.htm#8da5f0734dba880356e9979eaad4ea49">writeRegister</a>(<a class="code" href="MotionMind_8hpp.htm#65a43d0f26eb331b308d526ea131e29ef8fc2b30d0f6d1f6f9d24d58b779d1ff">MMReg_pTerm</a>, 6000) == -1 ) {
  fprintf(stderr, <span class="stringliteral">"[main] ERROR setting P gain\n"</span>);
 }
 <span class="keywordflow">if</span>( controller.<a class="code" href="classMotionMind.htm#8da5f0734dba880356e9979eaad4ea49">writeRegister</a>(<a class="code" href="MotionMind_8hpp.htm#65a43d0f26eb331b308d526ea131e29e3fa6cf5bfaa1d524f6dd40001a086cd0">MMReg_iTerm</a>, 35) == -1 ) {
  fprintf(stderr, <span class="stringliteral">"[main] ERROR setting I gain\n"</span>);
 }
 <span class="keywordflow">if</span>( controller.<a class="code" href="classMotionMind.htm#8da5f0734dba880356e9979eaad4ea49">writeRegister</a>(<a class="code" href="MotionMind_8hpp.htm#65a43d0f26eb331b308d526ea131e29e8d8a95145ac5e660fe5748b07836e7dc">MMReg_dTerm</a>, 200) == -1 ) {
  fprintf(stderr, <span class="stringliteral">"[main] ERROR setting D gain\n"</span>);
 }
 
 <span class="comment">// read current position</span>
 fprintf(stdout, <span class="stringliteral">"current position: %d\n"</span>, (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>) controller.<a class="code" href="classMotionMind.htm#f1b552d68160c5ca8dd18b20e4821f52">readRegister</a>(<a class="code" href="MotionMind_8hpp.htm#65a43d0f26eb331b308d526ea131e29eb1dedea465ec450da8072a99dd7ccc7e">MMReg_position</a>));

 <span class="comment">// send desired position (in encoder counts x 4)</span>
 <span class="keywordflow">if</span>( controller.<a class="code" href="classMotionMind.htm#696fb36d3409aee8b090b9fb060facd6">moveToAbsolute</a>(5000) == -1 ) {
  fprintf(stderr, <span class="stringliteral">"[main] ERROR sending desired position\n"</span>);
 }
  
 <span class="comment">// wait</span>
 sleep(4);
 
 <span class="comment">// bye (controller automatically resets and stops motor on exit)</span>
 
 <span class="keywordflow">return</span> 0;
}

</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="00c6a516965ace2fbe845c14d820914c"></a><!-- doxytag: member="MotionMind::MotionMind" ref="00c6a516965ace2fbe845c14d820914c" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">MotionMind::MotionMind           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor does nothing. Call <a class="el" href="classMotionMind.htm#ae44954727a4a89fc444e23842b3730f">init()</a> to connect to the device.     </td>
  </tr>
</table>
<a class="anchor" name="a38ca2d31cfd601e7506f37dae3f1464"></a><!-- doxytag: member="MotionMind::~MotionMind" ref="a38ca2d31cfd601e7506f37dae3f1464" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">MotionMind::~MotionMind           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default destructor. Frees resources.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="5b47bb10466b36835a3f5fb8cc244a6b"></a><!-- doxytag: member="MotionMind::changeSpeed" ref="5b47bb10466b36835a3f5fb8cc244a6b" args="(int16_t speed)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MotionMind::changeSpeed           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int16_t&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>speed</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Modifies speed and direction of motor when controller is operated in mode 3 (serial open loop control). The device takes between 5 - 10 ms to respond to this command. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>speed</em>&nbsp;</td><td>Value in the range -1023 to +1023. The direction is determined by the sign (- reverse, + forward) and the the absolute value sets the duty cycle of the input voltage (for example -512 =&gt; motor is driven in reverse with 50% duty cycle). The timer register (MMReg_timer) and the velocity limit register (MMReg_velocityLimit) determines the ramp up time required to achieve the new speed. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ae44954727a4a89fc444e23842b3730f"></a><!-- doxytag: member="MotionMind::init" ref="ae44954727a4a89fc444e23842b3730f" args="(const char *port, int baud, int address, bool verbose=true)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MotionMind::init           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>port</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>baud</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>address</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>bool&nbsp;</td>
          <td class="mdname" nowrap> <em>verbose</em> = <code>true</code></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Connects to the device through a specified serial port. Only RS232 binary data communication is supported. NOTE: This method must be called before calling any other method to interact with the hardware. <ul>
<li>
Make sure jumper pins in J2 are set to 19.2 KBPS baud rate and Binary mode. </li>
<li>
Make sure that the PC's serial port is hooked to RS232 lines of the device. </li>
<li>
Ensure that mode of operation is selected through J5. </li>
</ul>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>port</em>&nbsp;</td><td>The serial port name (example /dev/ttyS0, /dev/ser1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>baud</em>&nbsp;</td><td>The baud select and motor direction lines are common in connector J4. When the desired operating mode is 2 (button mode), the baud rate is selected based on motor direction. Otherwise, it is advised to set baud rate to 19.2 KBPS. Specify either 9600 or 19200 for the selected baud rate here. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>address</em>&nbsp;</td><td>Multiple contollers may be daisy chained. Specify which device is being controlled by an instance of this object using this parameter. (address=1 if only one device present). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>verbose</em>&nbsp;</td><td>Print device info if set to true. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 in case of error. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="642d5d10cc8caf4a7d013bd490945289"></a><!-- doxytag: member="MotionMind::moveAtVelocity" ref="642d5d10cc8caf4a7d013bd490945289" args="(int16_t velocity)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MotionMind::moveAtVelocity           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int16_t&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>velocity</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Specify velocity when operating in mode 4 (serial closed loop). The PID filter must be tuned to get best results. The device takes between 5 - 10 ms to respond to this command. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>velocity</em>&nbsp;</td><td>The desired velocity as a 2's compliment integer. The velocity measurement in the controller occurs over a 5 ms period. Hence, the desired velocity setting can be computed from the following equation: velocity = (MotorShaftRotations/Second * EncoderCountPerRotation * GearRatio)/50. Use negative values for motion in reverse direction. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="696fb36d3409aee8b090b9fb060facd6"></a><!-- doxytag: member="MotionMind::moveToAbsolute" ref="696fb36d3409aee8b090b9fb060facd6" args="(int32_t position)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MotionMind::moveToAbsolute           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int32_t&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>position</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Specify an absolute motor position when operating in mode 4 (serial closed-loop). Ensure that the PID filter is tuned, and note that the encoder is decoded on a 4:1 ratio (i.e., if the encoder gives 500 pulses for 1 rotation of the shaft, send 2000 to rotate motor shaft by one full rotation. The device takes between 5 - 10 ms to respond to this command. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>position</em>&nbsp;</td><td>Absolute position as a 32 bit 2's compliment number. Set velocity limit bit in the function register (MMFunc_velocityLimit) and load velocity limit register (mmcreg_velocityLimit) to limit average velocity during motion. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="b87448588ff1a802b0f8c21c4c003862"></a><!-- doxytag: member="MotionMind::moveToRelative" ref="b87448588ff1a802b0f8c21c4c003862" args="(int32_t position)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MotionMind::moveToRelative           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int32_t&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>position</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Specify movement to a position relative to current position, when operating in mode 4 (serial closed loop). Ensure that the PID filter is tuned, and note that the encoder is decoded on a 4:1 ratio (i.e., if the encoder gives 500 pulses for 1 rotation of the shaft, send 2000 to rotate motor shaft by one full rotation. The device takes between 5 - 10 ms to respond to this command. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>position</em>&nbsp;</td><td>Relative position as a 32 bit 2's compliment number. Set velocity limit bit in the function register (MMFunc_velocityLimit) and load velocity limit register (MMReg_velocityLimit) to limit average velocity during motion. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="f1b552d68160c5ca8dd18b20e4821f52"></a><!-- doxytag: member="MotionMind::readRegister" ref="f1b552d68160c5ca8dd18b20e4821f52" args="(MMReg_t reg)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int32_t MotionMind::readRegister           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="MotionMind_8hpp.htm#f5f4a36cdb1a71965e0c9966b63c2667">MMReg_t</a>&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>reg</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Read contents of a register. The returned values may have 1, 2 or 4 bytes of valid data, and may be in 2's compliment data format. See Section 6.0 (Register Definitions - Function/Status Bits) of the user manual for more informaiton. The device takes between 5 - 10 ms to respond to this command. To check whether a particular bit (example MMFunc_posPwUp) is set in the function register, use this method as follows <div class="fragment"><pre class="fragment">    int16_t func = <a class="code" href="classMotionMind.htm#f1b552d68160c5ca8dd18b20e4821f52">readRegister</a>(<a class="code" href="MotionMind_8hpp.htm#65a43d0f26eb331b308d526ea131e29e225dda3c150c4b48a2167a580480015a">MMReg_function</a>);
    func &amp;= <a class="code" href="MotionMind_8hpp.htm#008f6d1c9ab5e8d4648814352b8afbcfe526c077ccf58254fd44ba9ec6818784">MMFunc_posPwUp</a>;
    <span class="keywordflow">if</span>(func) {
    cout &lt;&lt; <span class="stringliteral">"Position will be restored from EEPROM on power up"</span> &lt;&lt; endl;
    }
</pre></div> The status register can be read in the same manner. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>reg</em>&nbsp;</td><td>The register index. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>register value. The return value is undefined if the call didn't successfully execute. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="79717798d5afb1dd2509e649beb7a51d"></a><!-- doxytag: member="MotionMind::reset" ref="79717798d5afb1dd2509e649beb7a51d" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MotionMind::reset           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Stops the motor and does a software reset. Allow a few seconds before calling any other method after a call to this function. <dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="9190c70af76b97f5b37e6358edd23cde"></a><!-- doxytag: member="MotionMind::restore" ref="9190c70af76b97f5b37e6358edd23cde" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MotionMind::restore           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Restore factory defaults. The motor is automatically stopped after successful execution of this command NOTE: The device takes up to 40 ms to respond to this command. <dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="8da5f0734dba880356e9979eaad4ea49"></a><!-- doxytag: member="MotionMind::writeRegister" ref="8da5f0734dba880356e9979eaad4ea49" args="(MMReg_t reg, int32_t val)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MotionMind::writeRegister           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="MotionMind_8hpp.htm#f5f4a36cdb1a71965e0c9966b63c2667">MMReg_t</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>reg</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int32_t&nbsp;</td>
          <td class="mdname" nowrap> <em>val</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This command can be used to set internal registers in any mode of operation. Register values set using this call are not retained after power cycling the controller. Use <a class="el" href="classMotionMind.htm#ededa3a3d2982ec61395b94d350cfb25">writeStoreRegister()</a> to make permanent changes to register contents. The registers are 1, 2 or 4 bytes in length, and some of them expect 2's compliment data format. The user must take care to send properly formatted data to this call. The function and status registers (MMReg_function, MMReg_status) contain bit fields where each bit is related to a functionality. See Section 6.0 (Register Definitions - Function/Status Bits) of the user manual for more informaiton. The device takes between 5 - 10 ms to respond to this command. To enable a particular bit (example MMFunc_posPwUp) in the function register, use this method as follows <div class="fragment"><pre class="fragment">    int16_t func = <a class="code" href="classMotionMind.htm#f1b552d68160c5ca8dd18b20e4821f52">readRegister</a>(<a class="code" href="MotionMind_8hpp.htm#65a43d0f26eb331b308d526ea131e29e225dda3c150c4b48a2167a580480015a">MMReg_function</a>);
    <a class="code" href="classMotionMind.htm#8da5f0734dba880356e9979eaad4ea49">writeRegister</a>(<a class="code" href="MotionMind_8hpp.htm#65a43d0f26eb331b308d526ea131e29e225dda3c150c4b48a2167a580480015a">MMReg_function</a>, func | <a class="code" href="MotionMind_8hpp.htm#008f6d1c9ab5e8d4648814352b8afbcfe526c077ccf58254fd44ba9ec6818784">MMFunc_posPwUp</a>);
</pre></div> In order to disable a functionality, the user code would look like the following <div class="fragment"><pre class="fragment">    int16_t func = <a class="code" href="classMotionMind.htm#f1b552d68160c5ca8dd18b20e4821f52">readRegister</a>(<a class="code" href="MotionMind_8hpp.htm#65a43d0f26eb331b308d526ea131e29e225dda3c150c4b48a2167a580480015a">MMReg_function</a>);
    <a class="code" href="classMotionMind.htm#8da5f0734dba880356e9979eaad4ea49">writeRegister</a>(<a class="code" href="MotionMind_8hpp.htm#65a43d0f26eb331b308d526ea131e29e225dda3c150c4b48a2167a580480015a">MMReg_function</a>, func &amp; ~<a class="code" href="MotionMind_8hpp.htm#008f6d1c9ab5e8d4648814352b8afbcfe526c077ccf58254fd44ba9ec6818784">MMFunc_posPwUp</a>);
</pre></div> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>reg</em>&nbsp;</td><td>The register index. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>val</em>&nbsp;</td><td>the desired value. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error (including attempted write into a read-only register). </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="ededa3a3d2982ec61395b94d350cfb25"></a><!-- doxytag: member="MotionMind::writeStoreRegister" ref="ededa3a3d2982ec61395b94d350cfb25" args="(MMReg_t reg, int32_t val)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MotionMind::writeStoreRegister           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="MotionMind_8hpp.htm#f5f4a36cdb1a71965e0c9966b63c2667">MMReg_t</a>&nbsp;</td>
          <td class="mdname" nowrap> <em>reg</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int32_t&nbsp;</td>
          <td class="mdname" nowrap> <em>val</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This command can be used to set internal registers in any mode of operation. Register values set using this call are retained after power cycling the controller, and hence, used to modify default settings. Use <a class="el" href="classMotionMind.htm#8da5f0734dba880356e9979eaad4ea49">writeRegister()</a> to make temporary changes to register contents. The registers are 1, 2 or 4 bytes in length, and some of them expect 2's compliment data format. The user must take care to send properly formatted data to this call. The function register (MMReg_function) contains bit fields where each bit is related to a functionality. See Section 6.0 (Register Definitions - Function/Status Bits) of the user manual for more informaiton. NOTE: The device takes up to 40 ms to respond to this command. Upon reception of a valid command, the motor is automatically stopped. The settings are made permanent by writing to the internal EEPROM which has a life time of about 1,000,000 write cycles. Avoid overuse of this function call. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>reg</em>&nbsp;</td><td>The register index. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>val</em>&nbsp;</td><td>array with desired value (1,2, or 4 bytes). </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, -1 on error (including attempted write into a read-only register). </dd></dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="MotionMind_8hpp-source.htm">MotionMind.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>Motion Mind DC Motor Controller</b></font></code> on Tue Apr 11 14:51:00 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
