<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>POSIX Utilities Package 2.2: MessageQueue Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>MessageQueue Class Reference</h1><!-- doxytag: class="MessageQueue" -->Inter-process messaging mechanism.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="MessageQueue_8hpp-source.htm">MessageQueue.hpp</a>&gt;</code>
<p>
<a href="classMessageQueue-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#006069f4b83d2372c989c52784fac5de">MessageQueue</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#3640a8a6140801f1e127a41e60c014dd">~MessageQueue</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#f64fcc12185bbc9e36b6dff44695abba">create</a> (const char *name, int maxNumMsgs, int maxMsgLen=1024)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#b859183ee80effd5f6e72878a28d6288">open</a> (const char *name)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#868e812cecc91a81193820fd1c76906a">close</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#279098deb2b6b817b4ee7d652723a40a">unlink</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#cb975a0b55757a3e5352ed9a5619e05c">trySend</a> (const char *msgBuffer, int msgSize)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#9c81d82868812d4c616d0bd5c761233f">send</a> (const char *msgBuffer, int msgSize)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#cb98a7a8139a87a9debb45eb39bf69c4">tryReceive</a> (char *msgBuffer, int bufSize)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#02e9a0fed19783e7b78f1c3f13ecabdd">receive</a> (char *msgBuffer, int bufSize)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#cc212e4f7cc53132dac07b17e8da0d10">notify</a> (const struct sigevent *notification)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#e4e179482f1856e107650c7cd9794747">getMaxNumMsgs</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#f7ed3e20f65fc1649dab1139e8fe66d9">getMaxMsgLength</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError</a> () const </td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Inter-process messaging mechanism. 
<p>
This class provides a wrapper for non-blocking message queues. Messages are sent at the priority of the sending process, and received highest priority first. Messages of equal priority are received on a first-come-first-serve basis. When developing a client-server system using a <a class="el" href="classMessageQueue.htm">MessageQueue</a> object, run the server at maximum possible priority as it waits for messages.<p>
This is an efficient mechanism only for sending small messages (because messages get 'copied' from sender to OS, and then OS to receiver). Use SharedMemory for passing large amounts of data between processes.<p>
<b>Example Program:</b><p>
<div class="fragment"><pre class="fragment"><span class="comment">//==============================================================================</span>
<span class="comment">// MessageQueue.t.cpp - Example program for MessageQueue class.</span>
<span class="comment">//</span>
<span class="comment">// Author        : Vilas Kumar Chitrakaran</span>
<span class="comment">//==============================================================================</span>

<span class="preprocessor">#include "MessageQueue.hpp"</span>
<span class="preprocessor">#include &lt;iostream&gt;</span>

<span class="keyword">using namespace </span>std;

<span class="comment">//==============================================================================</span>
<span class="comment">// receiver thread</span>
<span class="comment">// - Creates a queue that can hold 2 messages at a time, each 1 byte long</span>
<span class="comment">// - Waits for, receives and prints 3 messages before exiting </span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">void</span> *receiver(<span class="keywordtype">void</span> *arg)
{
 arg = arg;
 <a class="code" href="classMessageQueue.htm">MessageQueue</a> rq;
 <span class="keywordtype">char</span> rbuf[10];
 
 <span class="keywordtype">int</span> numMsgs = 2;
 <span class="keywordtype">int</span> msgSize = 1 * <span class="keyword">sizeof</span>(char);
 
 <span class="keywordtype">int</span> m = 0;
 
 <span class="comment">// create receive queue</span>
 <span class="keywordflow">if</span>( rq.<a class="code" href="classMessageQueue.htm#f64fcc12185bbc9e36b6dff44695abba">create</a>(<span class="stringliteral">"/rq"</span>, numMsgs, msgSize) == -1)
 {
  cout &lt;&lt; <span class="stringliteral">"receiver: "</span> &lt;&lt; strerror(rq.<a class="code" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError</a>()) &lt;&lt; endl &lt;&lt; flush;
  <span class="keywordflow">return</span> NULL;
 }
 
 <span class="comment">// stats</span>
 cout &lt;&lt; <span class="stringliteral">"receiver: queue created for "</span> &lt;&lt; rq.<a class="code" href="classMessageQueue.htm#e4e179482f1856e107650c7cd9794747">getMaxNumMsgs</a>() &lt;&lt; <span class="stringliteral">" messages, "</span> 
      &lt;&lt; rq.<a class="code" href="classMessageQueue.htm#f7ed3e20f65fc1649dab1139e8fe66d9">getMaxMsgLength</a>() &lt;&lt; <span class="stringliteral">" bytes long."</span> &lt;&lt; endl &lt;&lt; flush;
 
 <span class="keywordflow">while</span>(m &lt; 3)
 {
  <span class="comment">// receive a message from someone</span>
  strncpy(rbuf, <span class="stringliteral">"\0"</span>, 10);
  <span class="keywordflow">if</span>( rq.<a class="code" href="classMessageQueue.htm#02e9a0fed19783e7b78f1c3f13ecabdd">receive</a>(rbuf, msgSize) == -1)
   cout &lt;&lt; <span class="stringliteral">"receiver: "</span> &lt;&lt; strerror(rq.<a class="code" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError</a>()) &lt;&lt; endl &lt;&lt; flush;
  <span class="keywordflow">else</span>
   cout &lt;&lt; <span class="stringliteral">"receiver: received msg: "</span> &lt;&lt; rbuf &lt;&lt; endl &lt;&lt; flush;
  m++;
 }
 
 <span class="comment">// exit</span>
 <span class="keywordflow">if</span>( rq.<a class="code" href="classMessageQueue.htm#279098deb2b6b817b4ee7d652723a40a">unlink</a>() == -1)
   cout &lt;&lt; <span class="stringliteral">"receiver: "</span> &lt;&lt; strerror(rq.<a class="code" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError</a>()) &lt;&lt; endl &lt;&lt; flush;
 cout &lt;&lt; <span class="stringliteral">"receiver: exiting"</span> &lt;&lt; endl &lt;&lt; flush;
 <span class="keywordflow">return</span> NULL;
}


<span class="comment">//==============================================================================</span>
<span class="comment">// sender thread</span>
<span class="comment">// - opens queue created by receiver</span>
<span class="comment">// - sends messages from user without blocking</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">int</span> sender()
{
 <a class="code" href="classMessageQueue.htm">MessageQueue</a> sq;
 <span class="keywordtype">char</span> sbuf;
 
 <span class="comment">// open queue</span>
 <span class="keywordflow">if</span>( sq.<a class="code" href="classMessageQueue.htm#b859183ee80effd5f6e72878a28d6288">open</a>(<span class="stringliteral">"/rq"</span>) == -1)
 {
  cout &lt;&lt; <span class="stringliteral">"sender: "</span> &lt;&lt; strerror(sq.<a class="code" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError</a>()) &lt;&lt; endl &lt;&lt; flush;
  <span class="keywordflow">return</span> -1;
 }

 <span class="comment">// stats</span>
 cout &lt;&lt; <span class="stringliteral">"sender: queue opened for "</span> &lt;&lt; sq.<a class="code" href="classMessageQueue.htm#e4e179482f1856e107650c7cd9794747">getMaxNumMsgs</a>() &lt;&lt; <span class="stringliteral">" messages, "</span> 
      &lt;&lt; sq.<a class="code" href="classMessageQueue.htm#f7ed3e20f65fc1649dab1139e8fe66d9">getMaxMsgLength</a>() &lt;&lt; <span class="stringliteral">" bytes long."</span> &lt;&lt; endl &lt;&lt; flush;

 <span class="keywordflow">while</span>(1)
 {
  <span class="comment">// send message</span>
  cout &lt;&lt; endl &lt;&lt; <span class="stringliteral">"sender: Enter message: "</span> &lt;&lt; endl &lt;&lt; flush;
  cin &gt;&gt; sbuf;

  <span class="keywordflow">if</span> ( sq.<a class="code" href="classMessageQueue.htm#cb975a0b55757a3e5352ed9a5619e05c">trySend</a>(&amp;sbuf, <span class="keyword">sizeof</span>(<span class="keywordtype">char</span>)) == -1 )
   cout &lt;&lt; <span class="stringliteral">"sender: "</span> &lt;&lt; strerror(sq.<a class="code" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError</a>()) 
        &lt;&lt; <span class="stringliteral">". Queue is full."</span> &lt;&lt; endl &lt;&lt; flush;
 }
 <span class="keywordflow">return</span> 0;
}


<span class="comment">//==============================================================================</span>
<span class="comment">// main function</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">int</span> main()
{
 pthread_t threadId;
 pthread_create(&amp;threadId, NULL, &amp;receiver, NULL);
 sleep(1);
 sender();
 <span class="keywordflow">return</span> 0;
}
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="006069f4b83d2372c989c52784fac5de"></a><!-- doxytag: member="MessageQueue::MessageQueue" ref="006069f4b83d2372c989c52784fac5de" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">MessageQueue::MessageQueue           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Default constructor does nothing.     </td>
  </tr>
</table>
<a class="anchor" name="3640a8a6140801f1e127a41e60c014dd"></a><!-- doxytag: member="MessageQueue::~MessageQueue" ref="3640a8a6140801f1e127a41e60c014dd" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">MessageQueue::~MessageQueue           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Default destructor deletes the message queue if it was created by the object.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="868e812cecc91a81193820fd1c76906a"></a><!-- doxytag: member="MessageQueue::close" ref="868e812cecc91a81193820fd1c76906a" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MessageQueue::close           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Release access to the message queue. Note that the queue and any messages it may contain are not deleted, and can be opened again. <dl compact><dt><b>Returns:</b></dt><dd>0 on sucess, -1 on error, 'errno' is set and can be retrieved by a call to <a class="el" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError()</a>. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="f64fcc12185bbc9e36b6dff44695abba"></a><!-- doxytag: member="MessageQueue::create" ref="f64fcc12185bbc9e36b6dff44695abba" args="(const char *name, int maxNumMsgs, int maxMsgLen=1024)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MessageQueue::create           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>maxNumMsgs</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>maxMsgLen</em> = <code>1024</code></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Creates a message queue object with read/write access. Note that if a message queue with the same name already exists, this function will exit with an error (errno set). <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>Name of the message queue. For portability, the name should begin with a leading "/" and contain no other "/" characters. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>maxNumMsgs</em>&nbsp;</td><td>Number of messages the queue must hold </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>maxMsgLen</em>&nbsp;</td><td>Maximum possible length (bytes) of each message (default 1kB) </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on sucess, -1 on error, 'errno' is set and can be retrieved by a call to <a class="el" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError()</a>. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="68844654091afe7e95e39aa5db381548"></a><!-- doxytag: member="MessageQueue::getErrnoError" ref="68844654091afe7e95e39aa5db381548" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MessageQueue::getErrnoError           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>Error code from the last error that happened before this function was called, else 0. Error codes are defined in the standard header errno.h </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="f7ed3e20f65fc1649dab1139e8fe66d9"></a><!-- doxytag: member="MessageQueue::getMaxMsgLength" ref="f7ed3e20f65fc1649dab1139e8fe66d9" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MessageQueue::getMaxMsgLength           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The maximum possible length (in bytes) for a message in queue. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="e4e179482f1856e107650c7cd9794747"></a><!-- doxytag: member="MessageQueue::getMaxNumMsgs" ref="e4e179482f1856e107650c7cd9794747" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MessageQueue::getMaxNumMsgs           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>The maximum number of messages the queue can hold. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="cc212e4f7cc53132dac07b17e8da0d10"></a><!-- doxytag: member="MessageQueue::notify" ref="cc212e4f7cc53132dac07b17e8da0d10" args="(const struct sigevent *notification)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MessageQueue::notify           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const struct sigevent *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>notification</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Notify the calling process asynchronously if a message appeared in the queue. This is useful if you don't want to keep polling the queue to find whether a new message has arrived, for instance in handling emergency messages. (See pp. 107, Programming for the Real World, POSIX.4 for an example.) <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>notification</em>&nbsp;</td><td>NULL or a pointer to sigevent structure that describes how you want to be notified. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on sucess, -1 on error, 'errno' is set and can be retrieved by a call to <a class="el" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError()</a>. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="b859183ee80effd5f6e72878a28d6288"></a><!-- doxytag: member="MessageQueue::open" ref="b859183ee80effd5f6e72878a28d6288" args="(const char *name)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MessageQueue::open           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>name</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Opens an existing message queue for read/write access. Note that if the queue does not exist, this function will return with an error (errno set). <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>Name of the queue to establish connection with. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on sucess, -1 on error, 'errno' is set and can be retrieved by a call to <a class="el" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError()</a>. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="02e9a0fed19783e7b78f1c3f13ecabdd"></a><!-- doxytag: member="MessageQueue::receive" ref="02e9a0fed19783e7b78f1c3f13ecabdd" args="(char *msgBuffer, int bufSize)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MessageQueue::receive           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">char *&nbsp;</td>
          <td class="mdname" nowrap> <em>msgBuffer</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>bufSize</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Removes a message from the head of the queue. If the queue is empty, it will block until there is something to read. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>msgBuffer</em>&nbsp;</td><td>Buffer for received message. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bufSize</em>&nbsp;</td><td>Size of the buffer (must be atleast as large as the maximum message size for the queue). </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Number of bytes in the received message, -1 on error. If the queue is empty, this function will return -1 with errno set to EAGAIN (which can be retrieved by a call to <a class="el" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError()</a>). </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="9c81d82868812d4c616d0bd5c761233f"></a><!-- doxytag: member="MessageQueue::send" ref="9c81d82868812d4c616d0bd5c761233f" args="(const char *msgBuffer, int msgSize)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MessageQueue::send           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>msgBuffer</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>msgSize</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Send a message. If the queue is full, this function blocks until the message queue empties and the message can be placed in the queue <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>msgBuffer</em>&nbsp;</td><td>Buffer containing message to be sent. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>msgSize</em>&nbsp;</td><td>Size of the message. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on sucess, -1 on error, 'errno' is set and can be retrieved by a call to <a class="el" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError()</a>. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="cb98a7a8139a87a9debb45eb39bf69c4"></a><!-- doxytag: member="MessageQueue::tryReceive" ref="cb98a7a8139a87a9debb45eb39bf69c4" args="(char *msgBuffer, int bufSize)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MessageQueue::tryReceive           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">char *&nbsp;</td>
          <td class="mdname" nowrap> <em>msgBuffer</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>bufSize</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Removes a message from the head of the queue. If the queue is empty, returns immediately without blocking. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>msgBuffer</em>&nbsp;</td><td>Buffer for received message. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bufSize</em>&nbsp;</td><td>Size of the buffer (must be atleast as large as the maximum message size for the queue). </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Number of bytes in the received message, -1 on error. If the queue is empty, this function will return -1 with errno set to EAGAIN (which can be retrieved by a call to <a class="el" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError()</a>). </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="cb975a0b55757a3e5352ed9a5619e05c"></a><!-- doxytag: member="MessageQueue::trySend" ref="cb975a0b55757a3e5352ed9a5619e05c" args="(const char *msgBuffer, int msgSize)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MessageQueue::trySend           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>msgBuffer</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>msgSize</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Send a message without blocking. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>msgBuffer</em>&nbsp;</td><td>Buffer containing message to be sent. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>msgSize</em>&nbsp;</td><td>Size of the message. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on sucess, -1 on error. If the queue is full, this function will return -1 with errno set to EAGAIN (which can be retrieved by a call to <a class="el" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError()</a>). </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="279098deb2b6b817b4ee7d652723a40a"></a><!-- doxytag: member="MessageQueue::unlink" ref="279098deb2b6b817b4ee7d652723a40a" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int MessageQueue::unlink           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
If the process calling this function created the message queue, this function calls <a class="el" href="classMessageQueue.htm#868e812cecc91a81193820fd1c76906a">close()</a> and marks the message queue for deletion. Message queues are persistant, i.e., if there are processes that have the queue open when this function is called then the destruction of the queue is delayed until all processes have closed their access to the queue (by calling <a class="el" href="classMessageQueue.htm#868e812cecc91a81193820fd1c76906a">close()</a>). <dl compact><dt><b>Returns:</b></dt><dd>0 on sucess, -1 on error, 'errno' is set and can be retrieved by a call to <a class="el" href="classMessageQueue.htm#68844654091afe7e95e39aa5db381548">getErrnoError()</a>. This function will return -1 if it is called by an object that did not create the message queue. </dd></dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="MessageQueue_8hpp-source.htm">MessageQueue.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>POSIX Utilities Package</b></font></code> on Sat Aug 26 17:12:56 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
