<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>POSIX Utilities Package 2.2: ShMem Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>ShMem Class Reference</h1><!-- doxytag: class="ShMem" -->Shared memory objects.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="ShMem_8hpp-source.htm">ShMem.hpp</a>&gt;</code>
<p>
<a href="classShMem-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classShMem.htm#3672e013d4684ef33c04b48055487034">ShMem</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classShMem.htm#82e95de85e2be704335ff8bb6dae89e5">~ShMem</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classShMem.htm#d88e12009547f9297869567ee4fb41f6">create</a> (const char *name, int size)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classShMem.htm#5be5d43fc1903956469f6705144d19bc">open</a> (const char *name, int size)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classShMem.htm#9e3a568dda6f4ceefaa73443833a8ff5">close</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classShMem.htm#9a6291888f64ae19a3b4574043420adc">unlink</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classShMem.htm#6df80734ce9571f6d32e836539facb8f">getErrnoError</a> () const </td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Shared memory objects. 
<p>
This class provides just the basic shared memory functionality. The user must provide the facility for synchronization of access to the shared object between multiple processes (using memory based semaphores, etc - see pp. 143, Programming for the Real World, POSIX.4).<p>
<b>Example Program:</b><p>
<div class="fragment"><pre class="fragment"><span class="comment">//==============================================================================</span>
<span class="comment">// ShMem.t.cpp - Example program for creating and writing</span>
<span class="comment">//                            into shared memory.</span>
<span class="comment">//</span>
<span class="comment">// Author        : Vilas Kumar Chitrakaran</span>
<span class="comment">//==============================================================================</span>

<span class="preprocessor">#include &lt;stdio.h&gt;</span>
<span class="preprocessor">#include &lt;iostream&gt;</span>
<span class="preprocessor">#include &lt;errno.h&gt;</span>
<span class="preprocessor">#include &lt;pthread.h&gt;</span>
<span class="preprocessor">#include &lt;unistd.h&gt;</span>
<span class="preprocessor">#include "ShMem.hpp"</span>

<span class="keyword">using namespace </span>std;

<span class="comment">//==============================================================================</span>
<span class="comment">// writer thread</span>
<span class="comment">// - Creates shared memory</span>
<span class="comment">// - modifies contents continuously</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">void</span> *writer(<span class="keywordtype">void</span> *arg)
{
 arg = arg;
 <a class="code" href="classShMem.htm">ShMem</a> shm;
 <span class="keywordtype">double</span> *counter;
 
 <span class="comment">// create shared memory</span>
 counter = (<span class="keywordtype">double</span> *)shm.<a class="code" href="classShMem.htm#d88e12009547f9297869567ee4fb41f6">create</a>( <span class="stringliteral">"/shm0"</span>, <span class="keyword">sizeof</span>(<span class="keywordtype">double</span>) );
 <span class="keywordflow">if</span>( counter == NULL )
 {
  cout &lt;&lt; <span class="stringliteral">"writer: "</span> &lt;&lt; strerror(shm.<a class="code" href="classShMem.htm#6df80734ce9571f6d32e836539facb8f">getErrnoError</a>()) &lt;&lt; endl;
  <span class="keywordflow">return</span> NULL;
 }
 
 <span class="comment">// change shared memory</span>
 *counter = 0;
 <span class="keywordflow">while</span>(*counter &lt; 10)
 {
  cout &lt;&lt; <span class="stringliteral">"writer: "</span> &lt;&lt; ++(*counter) &lt;&lt; endl;;
  sleep(1);
 }
 
 <span class="comment">// unlink</span>
 shm.<a class="code" href="classShMem.htm#9a6291888f64ae19a3b4574043420adc">unlink</a>();
 
 <span class="keywordflow">return</span> NULL;
}

<span class="comment">//==============================================================================</span>
<span class="comment">// reader thread</span>
<span class="comment">// - opens shared memory created by writer</span>
<span class="comment">// - reads shared memory continuously</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">int</span> reader()
{
 <a class="code" href="classShMem.htm">ShMem</a> shm;
 <span class="keywordtype">double</span> *counter;
 
 <span class="comment">// open existing shared memory</span>
 counter = (<span class="keywordtype">double</span> *)shm.<a class="code" href="classShMem.htm#5be5d43fc1903956469f6705144d19bc">open</a>( <span class="stringliteral">"/shm0"</span>, <span class="keyword">sizeof</span>(<span class="keywordtype">double</span>) );
 <span class="keywordflow">if</span>( counter == NULL )
 {
  cout &lt;&lt; <span class="stringliteral">"reader: "</span> &lt;&lt; strerror(shm.<a class="code" href="classShMem.htm#6df80734ce9571f6d32e836539facb8f">getErrnoError</a>()) &lt;&lt; endl;
  <span class="keywordflow">return</span> -1;
 }
 
 <span class="comment">// read shared memory</span>
 <span class="keywordflow">while</span>(*counter &lt; 10)
 {
  cout &lt;&lt; <span class="stringliteral">"reader: "</span> &lt;&lt; *counter &lt;&lt; endl;
  sleep(1);
 }
 
 <span class="comment">// close</span>
 shm.<a class="code" href="classShMem.htm#9e3a568dda6f4ceefaa73443833a8ff5">close</a>();
 
 <span class="keywordflow">return</span> 0;
}


<span class="comment">//==============================================================================</span>
<span class="comment">// main function</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">int</span> main()
{
 pthread_t threadId;
 pthread_create(&amp;threadId, NULL, &amp;writer, NULL);
 sleep(1);
 reader();
 <span class="keywordflow">return</span> 0;
}
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="3672e013d4684ef33c04b48055487034"></a><!-- doxytag: member="ShMem::ShMem" ref="3672e013d4684ef33c04b48055487034" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">ShMem::ShMem           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Default constructor does nothing     </td>
  </tr>
</table>
<a class="anchor" name="82e95de85e2be704335ff8bb6dae89e5"></a><!-- doxytag: member="ShMem::~ShMem" ref="82e95de85e2be704335ff8bb6dae89e5" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">ShMem::~ShMem           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Default destructor deletes shared memory region if it was created by the object.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="9e3a568dda6f4ceefaa73443833a8ff5"></a><!-- doxytag: member="ShMem::close" ref="9e3a568dda6f4ceefaa73443833a8ff5" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int ShMem::close           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Unmaps the shared memory from process address space and closes the memory region to further access. The shared memory region and its contents are however not deleted and can be opened again (similar to a file open and close operation). <dl compact><dt><b>Returns:</b></dt><dd>0 on sucess, -1 on error, 'errno' is set and can be retrieved by a call to <a class="el" href="classShMem.htm#6df80734ce9571f6d32e836539facb8f">getErrnoError()</a>. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="d88e12009547f9297869567ee4fb41f6"></a><!-- doxytag: member="ShMem::create" ref="d88e12009547f9297869567ee4fb41f6" args="(const char *name, int size)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void* ShMem::create           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>size</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Creates a shared memory object with read/write access and maps it to your process address space. Note that if the shared memory object already exists this function will exit with an error (errno set). <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>Name of the shared memory object. For portability, the name should begin with a leading "/" and contain no other "/" characters. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>Size (number of bytes) of the shared memory object </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>If successful, a pointer to the starting memory location of shared memory, else NULL, 'errno' is set and can be retrieved by a call to <a class="el" href="classShMem.htm#6df80734ce9571f6d32e836539facb8f">getErrnoError()</a>. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="6df80734ce9571f6d32e836539facb8f"></a><!-- doxytag: member="ShMem::getErrnoError" ref="6df80734ce9571f6d32e836539facb8f" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int ShMem::getErrnoError           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>Error code from the last error that happened before this function was called, else 0. Error codes are defined in the standard header errno.h </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="5be5d43fc1903956469f6705144d19bc"></a><!-- doxytag: member="ShMem::open" ref="5be5d43fc1903956469f6705144d19bc" args="(const char *name, int size)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void* ShMem::open           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>size</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Opens a shared memory object for read/write and maps it to your process address space. Note that if the shared memory object doesn't exist this function will exit with an error (errno set). <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>Name of the shared memory object. For portability, the name should begin with a leading "/" and contain no other "/" characters. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>Size (number of bytes) of the shared memory object </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>If successful, a pointer to the starting memory location of shared memory, else NULL, 'errno' is set and can be retrieved by a call to <a class="el" href="classShMem.htm#6df80734ce9571f6d32e836539facb8f">getErrnoError()</a>. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="9a6291888f64ae19a3b4574043420adc"></a><!-- doxytag: member="ShMem::unlink" ref="9a6291888f64ae19a3b4574043420adc" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int ShMem::unlink           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
If the process calling this function created the shared memory, this function calls <a class="el" href="classShMem.htm#9e3a568dda6f4ceefaa73443833a8ff5">close()</a> and marks the shared memory for deletion. Shared memory objects are persistant, i.e., if there are processes that have the object open when this function is called then the destruction of the object is delayed until all processes have closed their access to the object (by calling <a class="el" href="classShMem.htm#9e3a568dda6f4ceefaa73443833a8ff5">close()</a>). <dl compact><dt><b>Returns:</b></dt><dd>0 on sucess, -1 on error, 'errno' is set and can be retrieved by a call to <a class="el" href="classShMem.htm#6df80734ce9571f6d32e836539facb8f">getErrnoError()</a>. NOTE: This function will return -1 if it is called by an object that did not create the shared memory. </dd></dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="ShMem_8hpp-source.htm">ShMem.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>POSIX Utilities Package</b></font></code> on Sat Aug 26 17:12:56 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
