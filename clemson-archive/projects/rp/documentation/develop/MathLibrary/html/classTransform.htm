<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>QMath Matrix Library: Transform Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.9.1 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>Transform Class Reference</h1>The class <code>Transform</code> represents a 4x4 transformation matrix.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Transform_8hpp-source.htm">Transform.hpp</a>&gt;</code>
<p>
<p>Inheritance diagram for Transform:
<p><center><img src="classTransform.png" usemap="#Transform_map" border="0" alt=""></center>
<map name="Transform_map">
<area href="classMatrix.htm" alt="Matrix< 4, 4, double >" shape="rect" coords="0,56,141,80">
<area href="classMatrixBase.htm" alt="MatrixBase< double >" shape="rect" coords="0,0,141,24">
</map>
<a href="classTransform-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTransform.htm#a0">Transform</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTransform.htm#a1">Transform</a> (const <a class="el" href="classTransform.htm">Transform</a> &amp;transform)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTransform.htm#a2">~Transform</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt; double &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTransform.htm#a3">operator=</a> (const double &amp;value)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt; 3, double &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTransform.htm#a4">getTranslation</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTransform.htm#a5">getRollPitchYaw</a> (double &amp;roll, double &amp;pitch, double &amp;yaw) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classTransform.htm#a6">getEulerAngles</a> (double &amp;theta, double &amp;phi, double &amp;xi) const </td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The class <code>Transform</code> represents a 4x4 transformation matrix. 
<p>
The class <code>Transform</code> is derived from it's base class <code><a class="el" href="classMatrix.htm">Matrix</a></code>. The methods provided in the class <code>Transform</code> include homogeneous transformations about XYZ or any arbitrary axes, extraction of position and orientation from the transition matrix.<p>
<b>Example Program:</b> <div class="fragment"><pre class="fragment"><span class="comment">//======================================================================== </span>
<span class="comment">// Package              : The Math Library - Ex</span>
<span class="comment">// Authors              : Vilas Kumar Chitrakaran</span>
<span class="comment">// Start Date           : Wed Dec 20 11:08:28 GMT 2000</span>
<span class="comment">// Compiler             : GNU C++ 2.95.3 and above</span>
<span class="comment">// ----------------------------------------------------------------------</span>
<span class="comment">// File: Transform.t.cpp</span>
<span class="comment">// Example program for the Transform class.</span>
<span class="comment">//========================================================================</span>

<span class="comment">//========================================================================</span>
<span class="comment">// Transform.t.cpp</span>
<span class="comment">//------------------------------------------------------------------------</span>
<span class="comment">// This program demonstrates how to find the values of the</span>
<span class="comment">// components of a vector in a fixed reference frame after the </span>
<span class="comment">// vector undergoes a series of transformations about the frame.</span>
<span class="comment">//========================================================================</span>

<span class="preprocessor">#include "Transform.hpp"</span>
<span class="preprocessor">#include &lt;math.h&gt;</span>
<span class="preprocessor">#ifndef M_PI</span>
<span class="preprocessor"></span><span class="preprocessor"> #define M_PI 3.14159265358979323846</span>
<span class="preprocessor"></span><span class="preprocessor">#endif</span>
<span class="preprocessor"></span>

<span class="keywordtype">int</span> main()
{
 <a class="code" href="classColumnVector.htm">ColumnVector&lt;4, double&gt;</a> initialVector;
 <a class="code" href="classColumnVector.htm">ColumnVector&lt;4, double&gt;</a> finalVector;
 <a class="code" href="classTransform.htm">Transform</a> firstRotation;
 <a class="code" href="classTransform.htm">Transform</a> secondRotation;
 <a class="code" href="classTransform.htm">Transform</a> transform;

 <span class="comment">// The initial position is [1 0 0 1] in homogeneous coordinates</span>
 initialVector = 1, 0, 0, 1;
        
 <span class="comment">// Finding the new co-ordinates. (Angles must be specified in radians.)</span>
 transform = xRotation(0.5 * M_PI) * yRotation(0.5 * M_PI)  * translation(0,0,6);

 finalVector = transform * initialVector;
 cout &lt;&lt; <span class="stringliteral">"* Position vector after transformation in fixed frame : "</span> 
      &lt;&lt; transpose(finalVector) &lt;&lt; endl;
 cout &lt;&lt; <span class="stringliteral">"* Translation : "</span> &lt;&lt; transpose(transform.<a class="code" href="classTransform.htm#a4">getTranslation</a>()) &lt;&lt; endl;

 <span class="comment">// To get the roll/pitch/yaw angles of the new vector.</span>
 <span class="keywordtype">double</span> roll;
 <span class="keywordtype">double</span> pitch;
 <span class="keywordtype">double</span> yaw;
        
 transform.<a class="code" href="classTransform.htm#a5">getRollPitchYaw</a>(roll, pitch, yaw);
 roll = roll * 180.0/M_PI; pitch = pitch * 180.0/M_PI; yaw = yaw * 180.0/M_PI;
 cout &lt;&lt; <span class="stringliteral">"* (yaw, pitch, roll) angles of the new vector (degrees) : ("</span> 
      &lt;&lt; yaw &lt;&lt; <span class="stringliteral">","</span> &lt;&lt; pitch &lt;&lt; <span class="stringliteral">","</span> &lt;&lt; roll &lt;&lt; <span class="stringliteral">")"</span> &lt;&lt; endl;
        
 <span class="comment">// You can get back the initial position vector by the inverse transformation..</span>
 <a class="code" href="classColumnVector.htm">ColumnVector&lt;4, double&gt;</a> initialVectorAgain;
 initialVectorAgain = inverse(transform) * finalVector;

 cout &lt;&lt; <span class="stringliteral">"* After inverse transform : "</span> &lt;&lt; transpose(initialVectorAgain) &lt;&lt; endl;
 cout &lt;&lt; <span class="stringliteral">"* Should be the same as what we began with : "</span> &lt;&lt; transpose(initialVector) &lt;&lt; endl;

 <span class="keywordflow">return</span> 0;
}
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="a0" doxytag="Transform::Transform"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">Transform::Transform           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default constructor for the <code>Transform</code> object. The <code>Transform</code> matrix is initialized to the following form. <div class="fragment"><pre class="fragment">        [1 0 0 0]
        [0 1 0 0]
        [0 0 1 0]
        [0 0 0 1]
</pre></div>    </td>
  </tr>
</table>
<a class="anchor" name="a1" doxytag="Transform::Transform"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">Transform::Transform           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classTransform.htm">Transform</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>transform</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Copy Constructor.     </td>
  </tr>
</table>
<a class="anchor" name="a2" doxytag="Transform::~Transform"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">Transform::~<a class="el" href="classTransform.htm">Transform</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The default destructor.    </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="a6" doxytag="Transform::getEulerAngles"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void Transform::getEulerAngles           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">double &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>theta</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>double &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>phi</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>double &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>xi</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
returns the euler angles from the transition matrix. (Besides the roll/pitch/yaw notation, the rotational part of the Transform matrix is also obtained by first defining a rotation about Z axis by <code>phi</code> radians, then a rotation about the current Y axis by <code>theta</code> radians and finally a rotation about the current Z axis by <code>xi</code> radians.) <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>theta</em>&nbsp;</td><td>The angle theta is extracted into this variable. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>phi</em>&nbsp;</td><td>The angle phi is extracted into this variable. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>xi</em>&nbsp;</td><td>The angle xi is extracted into this variable.</td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a5" doxytag="Transform::getRollPitchYaw"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void Transform::getRollPitchYaw           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">double &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>roll</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>double &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>pitch</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>double &amp;&nbsp;</td>
          <td class="mdname" nowrap> <em>yaw</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
returns the roll, pitch and yaw angles from the transition matrix. (The rotational part of the Transform matrix is obtained by first defining a rotation about X axis by <code>yaw</code> radians, then a rotation about the Y axis by <code>pitch</code> radians and finally a rotation about the Z axis by <code>roll</code> radians, all rotations being relative to a fixed XYZ frame.) <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>roll</em>&nbsp;</td><td>The roll angle is extracted into this variable. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pitch</em>&nbsp;</td><td>The pitch angle is extracted into this variable. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>yaw</em>&nbsp;</td><td>The yaw angle is extracted into this variable.</td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a4" doxytag="Transform::getTranslation"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classColumnVector.htm">ColumnVector</a>&lt;3,double&gt; Transform::getTranslation           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
returns the XYZ position from the transition matrix.    </td>
  </tr>
</table>
<a class="anchor" name="a3" doxytag="Transform::operator="></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classMatrixInitializer.htm">MatrixInitializer</a>&lt;double&gt; Transform::operator=           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const double &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>value</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This function provides an overloaded assignment operator for initializing the elements of a Transform. The initialization of the Transform object can be done as a comma seperated list. For example: <div class="fragment"><pre class="fragment"> <a class="code" href="classTransform.htm">Transform</a> myTransform;
    myTransform = cos(x), sin(x),...so on ; 
</pre></div><dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>The value to which the element at a position in Transform is initialized.</td></tr>
  </table>
</dl>

<p>
Reimplemented from <a class="el" href="classMatrix.htm#a14">Matrix&lt; 4, 4, double &gt;</a>.    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Transform_8hpp-source.htm">Transform.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>QMath Matrix Library</b></font></code> on Mon May 2 11:22:00 EDT 2005
<br>
Vilas Kumar Chitrakaran (cvilas at ces dot clemson dot edu)
</body>
</html>
