<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>POSIX Utilities Package 2.2: Thread Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="annotated.htm"><span>Classes</span></a></li>
    <li><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>Thread Class Reference</h1><!-- doxytag: class="Thread" -->A mechanism to execute code in a separate thread.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Thread_8hpp-source.htm">Thread.hpp</a>&gt;</code>
<p>
<a href="classThread-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classThread.htm#95c703fb8f2f27cb64f475a8c940864a">Thread</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classThread.htm#026b23628e1727050e864e00489c0baf">~Thread</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classThread.htm#bcac832a802bc7c70d3183f03df39090">run</a> (void *arg=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classThread.htm#fd810140b83b3a2ad90a425ea92dc366">isThreadRunning</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classThread.htm#e2c546a555661d19d7e06d7e1d44b6e6">cancel</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classThread.htm#7c3b04b32b4327923cc4c9553a403e32">join</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">pthread_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classThread.htm#0f15cc4d6a6e8d274b00a7d2ad984570">getThreadId</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classThread.htm#88bde3dc3c92dd22a536d5097459f847">enterThread</a> (void *arg)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classThread.htm#943295e261c07a8bc8f418d4ff413b8f">executeInThread</a> (void *arg)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classThread.htm#5ef83430c502cbefeacd98e53640870f">exitThread</a> (void *arg)=0</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
A mechanism to execute code in a separate thread. 
<p>
This is a pure virtual base class for threads. Users must reimplement atleast the <a class="el" href="classThread.htm#88bde3dc3c92dd22a536d5097459f847">enterThread()</a>, <a class="el" href="classThread.htm#943295e261c07a8bc8f418d4ff413b8f">executeInThread()</a> and <a class="el" href="classThread.htm#5ef83430c502cbefeacd98e53640870f">exitThread()</a> functions in a derived class to use this wrapper over POSIX threads.<p>
This class is based partly on the idea presented by Ryan Teixeira in <a href="http://www.geocities.com/SiliconValley/Heights/6038/dthreads.html">http://www.geocities.com/SiliconValley/Heights/6038/dthreads.html</a><p>
<b>Example Program:</b> <div class="fragment"><pre class="fragment"><span class="comment">//==============================================================================</span>
<span class="comment">// Thread.t.cpp - Example program for Thread class.</span>
<span class="comment">//</span>
<span class="comment">// Author        : Vilas Kumar Chitrakaran</span>
<span class="comment">//==============================================================================</span>

<span class="preprocessor">#include "Thread.hpp"</span>
<span class="preprocessor">#include "RWLock.hpp"</span>
<span class="preprocessor">#include &lt;iostream&gt;</span>
<span class="preprocessor">#include &lt;string&gt;</span>
<span class="preprocessor">#include &lt;time.h&gt;</span>

<span class="keyword">using namespace </span>std;

<span class="comment">//==============================================================================</span>
<span class="comment">// MyThread class</span>
<span class="comment">//==============================================================================</span>
<span class="keyword">class </span>MyThread : <span class="keyword">public</span> <a class="code" href="classThread.htm">Thread</a>
{
 <span class="keyword">public</span>:
  MyThread();
  ~MyThread();
  <span class="keywordtype">void</span> setVal(<span class="keywordtype">int</span> p);
  <span class="keywordtype">int</span> getVal();
 <span class="keyword">protected</span>:
  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classThread.htm#88bde3dc3c92dd22a536d5097459f847">enterThread</a>(<span class="keywordtype">void</span> *arg);
  <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classThread.htm#943295e261c07a8bc8f418d4ff413b8f">executeInThread</a>(<span class="keywordtype">void</span> *arg);
  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classThread.htm#5ef83430c502cbefeacd98e53640870f">exitThread</a>(<span class="keywordtype">void</span> *arg);
 <span class="keyword">private</span>:
  <span class="keywordtype">int</span> d_val;
  <a class="code" href="classRWLock.htm">RWLock</a> d_lock;
};

<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="comment">// MyThread::MyThread</span>
<span class="comment">//-----------------------------------------------------------------------------</span>
MyThread::MyThread() 
{
 d_val = 0; 
}

<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="comment">// MyThread::~MyThread</span>
<span class="comment">//-----------------------------------------------------------------------------</span>
MyThread::~MyThread()
{
 cancel();
}

<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="comment">// MyThread::enterThread</span>
<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="keywordtype">void</span> <a class="code" href="classThread.htm#88bde3dc3c92dd22a536d5097459f847">MyThread::enterThread</a>(<span class="keywordtype">void</span> *arg)
{
 arg=arg;
 cout &lt;&lt; <span class="stringliteral">"thread: in entry routine"</span> &lt;&lt; endl;
}

<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="comment">// MyThread::executeInThread</span>
<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="keywordtype">int</span> <a class="code" href="classThread.htm#943295e261c07a8bc8f418d4ff413b8f">MyThread::executeInThread</a>(<span class="keywordtype">void</span> *arg)
{
 <span class="keywordtype">int</span> i = 0;
 <span class="keyword">struct </span>timespec napTime;
 napTime.tv_sec = 0;
 napTime.tv_nsec = (<span class="keywordtype">long</span> int)5e8;
 
 <span class="keywordflow">while</span>(1)<span class="comment">//i &lt; 2)</span>
 {
  i = ((MyThread *)arg)-&gt;getVal();
  cout &lt;&lt; <span class="stringliteral">"thread: reading value = "</span> &lt;&lt; i &lt;&lt; endl;
  nanosleep(&amp;napTime, NULL);
  pthread_testcancel();
 }
 
 <span class="keywordflow">return</span> i;
}

<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="comment">// MyThread::setVal</span>
<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="keywordtype">void</span> MyThread::setVal(<span class="keywordtype">int</span> p) 
{
 d_lock.writeLock();
 d_val = p; 
 d_lock.unlock();
}

<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="comment">// MyThread::getVal</span>
<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="keywordtype">int</span> MyThread::getVal() 
{
 <span class="keywordtype">int</span> i;
 d_lock.readLock();
 i = d_val;
 d_lock.unlock();
 <span class="keywordflow">return</span> i; 
};

<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="comment">// MyThread::cleanupInThread</span>
<span class="comment">//-----------------------------------------------------------------------------</span>
<span class="keywordtype">void</span> <a class="code" href="classThread.htm#5ef83430c502cbefeacd98e53640870f">MyThread::exitThread</a>(<span class="keywordtype">void</span> *arg)
{
 arg=arg;
 cout &lt;&lt; <span class="stringliteral">"thread: in cleanup routine"</span> &lt;&lt; endl;
}


<span class="comment">//==============================================================================</span>
<span class="comment">// main function</span>
<span class="comment">//==============================================================================</span>
<span class="keywordtype">int</span> main()
{
 MyThread thread;
 <span class="keyword">struct </span>timespec napTime;
 napTime.tv_sec = 1;
 napTime.tv_nsec = 0;
 <span class="keywordtype">int</span> err;
 <span class="keywordtype">int</span> i = 0;
 
 <span class="comment">// Start the thread</span>
 err = thread.run(&amp;thread);
 <span class="keywordflow">if</span>( err != 0)
 {
  cout &lt;&lt; <span class="stringliteral">"parent: Thread creation failed: "</span> &lt;&lt; strerror(err) &lt;&lt; endl;
  <span class="keywordflow">return</span> -1;
 }
 
 <span class="comment">// Yield to allow the thread to run</span>
 sched_yield();

 <span class="comment">// Change data in parent thread</span>
 <span class="keywordflow">while</span>(i &lt; 3)
 {
  cout &lt;&lt; <span class="stringliteral">"parent: setting value = "</span> &lt;&lt; i &lt;&lt; endl;
  thread.setVal(i);
  nanosleep(&amp;napTime,NULL);
  i++;
 }
 
 <span class="comment">// wait for thread to finish</span>
 <span class="comment">//err = thread.join();</span>
 <span class="keywordflow">if</span>( err != 0)
 {
  cout &lt;&lt; <span class="stringliteral">"parent: thread retuned: "</span> &lt;&lt; err &lt;&lt; endl;
 }
 cout &lt;&lt; <span class="stringliteral">"parent: exiting"</span> &lt;&lt; endl;
 <span class="keywordflow">return</span> 0;
}
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="95c703fb8f2f27cb64f475a8c940864a"></a><!-- doxytag: member="Thread::Thread" ref="95c703fb8f2f27cb64f475a8c940864a" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">Thread::Thread           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
The constructor. Does some initializations.     </td>
  </tr>
</table>
<a class="anchor" name="026b23628e1727050e864e00489c0baf"></a><!-- doxytag: member="Thread::~Thread" ref="026b23628e1727050e864e00489c0baf" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">virtual Thread::~Thread           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This destructor does nothing. NOTE: If the derived class does not have a shutdown routine that calls <a class="el" href="classThread.htm#e2c546a555661d19d7e06d7e1d44b6e6">cancel()</a> and <a class="el" href="classThread.htm#7c3b04b32b4327923cc4c9553a403e32">join()</a> to wait for the thread to exit cleanly after executing the clean up routine (see <a class="el" href="classThread.htm#5ef83430c502cbefeacd98e53640870f">exitThread()</a>), the destructor of the derived class should call <a class="el" href="classThread.htm#e2c546a555661d19d7e06d7e1d44b6e6">cancel()</a> and <a class="el" href="classThread.htm#7c3b04b32b4327923cc4c9553a403e32">join()</a>.     </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="e2c546a555661d19d7e06d7e1d44b6e6"></a><!-- doxytag: member="Thread::cancel" ref="e2c546a555661d19d7e06d7e1d44b6e6" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int Thread::cancel           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Request cancellation of execution of the thread. Cancel requests are held pending until a cancellation point in the thread is reached ( see man pages for pthread_setcanceltype() and pthread_testcancel() ). <dl compact><dt><b>Returns:</b></dt><dd>0 on success, and errno code on error (ESRCH if thread is already cancelled). </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="88bde3dc3c92dd22a536d5097459f847"></a><!-- doxytag: member="Thread::enterThread" ref="88bde3dc3c92dd22a536d5097459f847" args="(void *arg)=0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">virtual void Thread::enterThread           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">void *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>arg</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected, pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
As soon as the <a class="el" href="classThread.htm#bcac832a802bc7c70d3183f03df39090">run()</a> function is called and the thread is instantiated, this function gets called in the separate thread. Override this function in the derived class to do thread setup operations such as setting thread priority, scheduling policy and so on. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>arg</em>&nbsp;</td><td>Arguments passsed by the call to <a class="el" href="classThread.htm#bcac832a802bc7c70d3183f03df39090">run()</a>. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="943295e261c07a8bc8f418d4ff413b8f"></a><!-- doxytag: member="Thread::executeInThread" ref="943295e261c07a8bc8f418d4ff413b8f" args="(void *arg)=0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">virtual int Thread::executeInThread           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">void *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>arg</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected, pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This is the main function that gets executed in a separate thread. Override this function in your derived class. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>arg</em>&nbsp;</td><td>Arguments passsed by the call to <a class="el" href="classThread.htm#bcac832a802bc7c70d3183f03df39090">run()</a>. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Your choice of return value. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="5ef83430c502cbefeacd98e53640870f"></a><!-- doxytag: member="Thread::exitThread" ref="5ef83430c502cbefeacd98e53640870f" args="(void *arg)=0" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">virtual void Thread::exitThread           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">void *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>arg</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [protected, pure virtual]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
This is a routine that gets executed in the thread just before it terminates (due to a call to <a class="el" href="classThread.htm#e2c546a555661d19d7e06d7e1d44b6e6">cancel()</a>, pthread_exit() and so on). Put your cleanup code here by overriding this function in your derived class. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>arg</em>&nbsp;</td><td>Arguments passsed by the call to <a class="el" href="classThread.htm#bcac832a802bc7c70d3183f03df39090">run()</a>. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="0f15cc4d6a6e8d274b00a7d2ad984570"></a><!-- doxytag: member="Thread::getThreadId" ref="0f15cc4d6a6e8d274b00a7d2ad984570" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">pthread_t Thread::getThreadId           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd><a class="el" href="classThread.htm">Thread</a> ID if the thread is already running, else 0. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="fd810140b83b3a2ad90a425ea92dc366"></a><!-- doxytag: member="Thread::isThreadRunning" ref="fd810140b83b3a2ad90a425ea92dc366" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool Thread::isThreadRunning           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<dl compact><dt><b>Returns:</b></dt><dd>true if thread is running, else false. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="7c3b04b32b4327923cc4c9553a403e32"></a><!-- doxytag: member="Thread::join" ref="7c3b04b32b4327923cc4c9553a403e32" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int Thread::join           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Wait until thread finishes execution. <dl compact><dt><b>Returns:</b></dt><dd>return value from the thread, or -1 if thread already exited (most probably due to a call to cancel). </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="bcac832a802bc7c70d3183f03df39090"></a><!-- doxytag: member="Thread::run" ref="bcac832a802bc7c70d3183f03df39090" args="(void *arg=NULL)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int Thread::run           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">void *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>arg</em> = <code>NULL</code>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Start the thread with arguments 'arg'. <br>
<hr>
 <ul>
<li>
This function blocks until <a class="el" href="classThread.htm#88bde3dc3c92dd22a536d5097459f847">enterThread()</a> finishes executing in the thread. </li>
</ul>
<hr>
<br>
 <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>arg</em>&nbsp;</td><td>A pointer to arguments passed to the new thread. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, and errno code on error (EPERM if thread is already running). </dd></dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Thread_8hpp-source.htm">Thread.hpp</a></ul>
<hr>
Created for project <code><font color="red"><b>POSIX Utilities Package</b></font></code> on Sat Aug 26 17:12:56 EDT 2006
<br>
 for Vilas Kumar Chitrakaran (cvilas(@)ces.clemson.edu). 
<br>
Documentation generated using <a href=http://www.doxygen.org>Doxygen</a>
.
</body>
</html>
